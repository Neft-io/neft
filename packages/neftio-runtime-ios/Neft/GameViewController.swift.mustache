import UIKit

public extension CGFloat {
    /**
     Returns a random floating point number between 0.0 and 1.0, inclusive.
     */
    static func random() -> CGFloat {
        return CGFloat(Float(arc4random()) / 0xFFFFFFFF)
    }
}

extension String {
    var uppercaseFirst: String {
        return prefix(1).uppercased() + self.dropFirst()
    }
}

struct Extension {
    {{#extensions}}
    struct {{&name}} {}
    {{/extensions}}
}

class GameViewController: UIViewController {
    var client: Client! = Client()
    var renderer: Renderer! = Renderer()
    var customApp: CustomApp!
    var openUrl = "" {
        didSet {
            onOpenUrlChange.emit()
        }
    }
    let onOpenUrlChange = Signal()

    @objc private func animationFrame() {
        client.js.callAnimationFrame()
        client.sendData()
    }

    private func initClient() {
        client.actions[InAction.setWindow] = {
            (reader: Reader) in
            self.view.addSubview(self.renderer.getItemFromReader(reader)!.view)
        }
        Db.register()
    }

    private func initRenderer() {
        renderer.app = self
        (UIApplication.shared as! NeftApplication).renderer = renderer
    }

    override func viewDidLoad() {
        self.automaticallyAdjustsScrollViewInsets = false

        App.app = self

        initClient()
        initRenderer()

        // animation frame
        let updater = CADisplayLink(target: self, selector: #selector(GameViewController.animationFrame))
        updater.frameInterval = 1
        updater.add(to: RunLoop.current, forMode: RunLoop.Mode.common)

        super.viewDidLoad()

        // init custom
        self.customApp = CustomApp()
        initExtensions()

        // run
        self.renderer.load()
        self.client.js.runScript("neft")

        // watch on js bundle file change
        {{#buildServerUrl}}
        watchOnBundleChange("{{&buildServerUrl}}/onNewBundle/ios", "{{&buildServerUrl}}/bundle/ios")
        {{/buildServerUrl}}
    }

    private func watchOnBundleChange(_ onChangeUrl: String, _ bundleUrl: String) {
        var req = URLRequest(url: URL(string: onChangeUrl)!)
        let session = URLSession.shared
        req.timeoutInterval = 0

        let task = session.dataTask(with: req, completionHandler: {
            (data, response, error) in
            // try again
            if data == nil {
                DispatchQueue.main.asyncAfter(deadline: .now() + .milliseconds(Int(1000))) {
                    self.watchOnBundleChange(onChangeUrl, bundleUrl)
                }
                return
            }

            // reload app
            let resp = NSString(data: data!, encoding: String.Encoding.utf8.rawValue)!
            if resp == "" {
                let subtask = session.dataTask(with: URLRequest(url: URL(string: bundleUrl)!)) {
                    (data, response, error) in
                    let js = NSString(data: data!, encoding: String.Encoding.utf8.rawValue)!
                    DispatchQueue.main.async {
                        self.runJsBundle(code: js as String)
                        self.watchOnBundleChange(onChangeUrl, bundleUrl)
                    }
                }
                subtask.resume()
                return
            }

            // hotReloads
            self.client.pushEvent("__neftHotReload", args: [resp])
            self.watchOnBundleChange(onChangeUrl, bundleUrl)
        })

        task.resume()
    }

    private func initExtensions() {
        {{#extensions}}
        Extension.{{&name}}.register()
        {{/extensions}}
    }

    private func runJsBundle(code: String) {
        // clear
        client.destroy()
        view.subviews.forEach({ $0.removeFromSuperview() })

        // init classes
        client = Client()
        initClient()
        renderer = Renderer()
        initRenderer()
        initExtensions()

        // run
        renderer.load()
        client.js.runCode(code)
    }

    override var shouldAutorotate : Bool {
        return false
    }

    override var supportedInterfaceOrientations : UIInterfaceOrientationMask {
        if UIDevice.current.userInterfaceIdiom == .phone {
            return .allButUpsideDown
        } else {
            return .all
        }
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
    }

    override var prefersStatusBarHidden : Bool {
        return false
    }
}
