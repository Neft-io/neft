<meta
  name="DeepLinking"
  category="Modules"
  description="Custom URL schema redirection"
/>

<article title="Introduction">
  <p>Your app can be open by using custom registered schema URL.</p>
  <p>It's heplful to e.g. redirect links from emails sent to your users directly to the app.</p>

  <p>Install it by typing <code>npm i @neftio/deep-linking</code> and later use it by <code>const deepLinking = require('@neftio/deep-linking')</code>.</p>
</article>

<article title="Configure iOS">
  <p>Provide your custom schema in <code>manifest/ios.yaml</code> file.</p>

  <script lang="yaml">
    infoPlist: |
      <key>CFBundleURLTypes</key>
      <array>
        <dict>
          <key>CFBundleURLSchemes</key>
          <array>
            <string>YOUR_SCHEMA</string>
          </array>
          <key>CFBundleURLName</key>
          <string>YOUR_PACKAGE</string>
        </dict>
      </array>
  </script>
</article>

<article title="Configure Android">
  <p>Provide your custom schema in <code>manifest/android.yaml</code> file.</p>

  <script lang="yaml">
    activityXmlManifest: |
      <intent-filter>
        <action android:name="android.intent.action.VIEW"></action>

        <category android:name="android.intent.category.DEFAULT"></category>
        <category android:name="android.intent.category.BROWSABLE"></category>

        <data android:scheme="YOUR_SCHEMA"></data>
      </intent-filter>
  </script>
</article>

<property name=openUrl type=string>
  <script type="html">
    <script->
      const deepLinking = require('@neftio/deep-linking')

      exports.default = () => ({
        handleOpenUrlChange() {
          const { openUrl } = deepLinking
          const match = /login\/(.+)$/.exec(openUrl)
          if (!match || !match[1]) return
          const token = match[1]
          // handle token provided in the url e.g. yourapp://login/xyz
        },
        onRender() {
          this.handleOpenUrlChange()
          deepLinking.onOpenUrlChange.connect(this.handleOpenUrlChange)
        },
        onRevert() {
          deepLinking.onOpenUrlChange.disconnect(this.handleOpenUrlChange)
        },
      })
    </script->
  </script>
</property>

<signal name=onOpenUrlChange />
