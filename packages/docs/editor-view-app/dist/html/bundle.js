// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"../../../node_modules/core-js/internals/global.js":[function(require,module,exports) {
var global = arguments[3];
var O = 'object';
var check = function (it) {
  return it && it.Math == Math && it;
};

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
module.exports =
  // eslint-disable-next-line no-undef
  check(typeof globalThis == O && globalThis) ||
  check(typeof window == O && window) ||
  check(typeof self == O && self) ||
  check(typeof global == O && global) ||
  // eslint-disable-next-line no-new-func
  Function('return this')();

},{}],"../../../node_modules/core-js/internals/fails.js":[function(require,module,exports) {
module.exports = function (exec) {
  try {
    return !!exec();
  } catch (error) {
    return true;
  }
};

},{}],"../../../node_modules/core-js/internals/descriptors.js":[function(require,module,exports) {
var fails = require('../internals/fails');

// Thank's IE8 for his funny defineProperty
module.exports = !fails(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});

},{"../internals/fails":"../../../node_modules/core-js/internals/fails.js"}],"../../../node_modules/core-js/internals/object-property-is-enumerable.js":[function(require,module,exports) {
'use strict';
var nativePropertyIsEnumerable = {}.propertyIsEnumerable;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// Nashorn ~ JDK8 bug
var NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({ 1: 2 }, 1);

// `Object.prototype.propertyIsEnumerable` method implementation
// https://tc39.github.io/ecma262/#sec-object.prototype.propertyisenumerable
exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
  var descriptor = getOwnPropertyDescriptor(this, V);
  return !!descriptor && descriptor.enumerable;
} : nativePropertyIsEnumerable;

},{}],"../../../node_modules/core-js/internals/create-property-descriptor.js":[function(require,module,exports) {
module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};

},{}],"../../../node_modules/core-js/internals/classof-raw.js":[function(require,module,exports) {
var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};

},{}],"../../../node_modules/core-js/internals/indexed-object.js":[function(require,module,exports) {
var fails = require('../internals/fails');
var classof = require('../internals/classof-raw');

var split = ''.split;

// fallback for non-array-like ES3 and non-enumerable old V8 strings
module.exports = fails(function () {
  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
  // eslint-disable-next-line no-prototype-builtins
  return !Object('z').propertyIsEnumerable(0);
}) ? function (it) {
  return classof(it) == 'String' ? split.call(it, '') : Object(it);
} : Object;

},{"../internals/fails":"../../../node_modules/core-js/internals/fails.js","../internals/classof-raw":"../../../node_modules/core-js/internals/classof-raw.js"}],"../../../node_modules/core-js/internals/require-object-coercible.js":[function(require,module,exports) {
// `RequireObjectCoercible` abstract operation
// https://tc39.github.io/ecma262/#sec-requireobjectcoercible
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on " + it);
  return it;
};

},{}],"../../../node_modules/core-js/internals/to-indexed-object.js":[function(require,module,exports) {
// toObject with fallback for non-array-like ES3 strings
var IndexedObject = require('../internals/indexed-object');
var requireObjectCoercible = require('../internals/require-object-coercible');

module.exports = function (it) {
  return IndexedObject(requireObjectCoercible(it));
};

},{"../internals/indexed-object":"../../../node_modules/core-js/internals/indexed-object.js","../internals/require-object-coercible":"../../../node_modules/core-js/internals/require-object-coercible.js"}],"../../../node_modules/core-js/internals/is-object.js":[function(require,module,exports) {
module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};

},{}],"../../../node_modules/core-js/internals/to-primitive.js":[function(require,module,exports) {
var isObject = require('../internals/is-object');

// `ToPrimitive` abstract operation
// https://tc39.github.io/ecma262/#sec-toprimitive
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (input, PREFERRED_STRING) {
  if (!isObject(input)) return input;
  var fn, val;
  if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
  if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;
  if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
  throw TypeError("Can't convert object to primitive value");
};

},{"../internals/is-object":"../../../node_modules/core-js/internals/is-object.js"}],"../../../node_modules/core-js/internals/has.js":[function(require,module,exports) {
var hasOwnProperty = {}.hasOwnProperty;

module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};

},{}],"../../../node_modules/core-js/internals/document-create-element.js":[function(require,module,exports) {

var global = require('../internals/global');
var isObject = require('../internals/is-object');

var document = global.document;
// typeof document.createElement is 'object' in old IE
var EXISTS = isObject(document) && isObject(document.createElement);

module.exports = function (it) {
  return EXISTS ? document.createElement(it) : {};
};

},{"../internals/global":"../../../node_modules/core-js/internals/global.js","../internals/is-object":"../../../node_modules/core-js/internals/is-object.js"}],"../../../node_modules/core-js/internals/ie8-dom-define.js":[function(require,module,exports) {
var DESCRIPTORS = require('../internals/descriptors');
var fails = require('../internals/fails');
var createElement = require('../internals/document-create-element');

// Thank's IE8 for his funny defineProperty
module.exports = !DESCRIPTORS && !fails(function () {
  return Object.defineProperty(createElement('div'), 'a', {
    get: function () { return 7; }
  }).a != 7;
});

},{"../internals/descriptors":"../../../node_modules/core-js/internals/descriptors.js","../internals/fails":"../../../node_modules/core-js/internals/fails.js","../internals/document-create-element":"../../../node_modules/core-js/internals/document-create-element.js"}],"../../../node_modules/core-js/internals/object-get-own-property-descriptor.js":[function(require,module,exports) {
var DESCRIPTORS = require('../internals/descriptors');
var propertyIsEnumerableModule = require('../internals/object-property-is-enumerable');
var createPropertyDescriptor = require('../internals/create-property-descriptor');
var toIndexedObject = require('../internals/to-indexed-object');
var toPrimitive = require('../internals/to-primitive');
var has = require('../internals/has');
var IE8_DOM_DEFINE = require('../internals/ie8-dom-define');

var nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// `Object.getOwnPropertyDescriptor` method
// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor
exports.f = DESCRIPTORS ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
  O = toIndexedObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return nativeGetOwnPropertyDescriptor(O, P);
  } catch (error) { /* empty */ }
  if (has(O, P)) return createPropertyDescriptor(!propertyIsEnumerableModule.f.call(O, P), O[P]);
};

},{"../internals/descriptors":"../../../node_modules/core-js/internals/descriptors.js","../internals/object-property-is-enumerable":"../../../node_modules/core-js/internals/object-property-is-enumerable.js","../internals/create-property-descriptor":"../../../node_modules/core-js/internals/create-property-descriptor.js","../internals/to-indexed-object":"../../../node_modules/core-js/internals/to-indexed-object.js","../internals/to-primitive":"../../../node_modules/core-js/internals/to-primitive.js","../internals/has":"../../../node_modules/core-js/internals/has.js","../internals/ie8-dom-define":"../../../node_modules/core-js/internals/ie8-dom-define.js"}],"../../../node_modules/core-js/internals/an-object.js":[function(require,module,exports) {
var isObject = require('../internals/is-object');

module.exports = function (it) {
  if (!isObject(it)) {
    throw TypeError(String(it) + ' is not an object');
  } return it;
};

},{"../internals/is-object":"../../../node_modules/core-js/internals/is-object.js"}],"../../../node_modules/core-js/internals/object-define-property.js":[function(require,module,exports) {
var DESCRIPTORS = require('../internals/descriptors');
var IE8_DOM_DEFINE = require('../internals/ie8-dom-define');
var anObject = require('../internals/an-object');
var toPrimitive = require('../internals/to-primitive');

var nativeDefineProperty = Object.defineProperty;

// `Object.defineProperty` method
// https://tc39.github.io/ecma262/#sec-object.defineproperty
exports.f = DESCRIPTORS ? nativeDefineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return nativeDefineProperty(O, P, Attributes);
  } catch (error) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};

},{"../internals/descriptors":"../../../node_modules/core-js/internals/descriptors.js","../internals/ie8-dom-define":"../../../node_modules/core-js/internals/ie8-dom-define.js","../internals/an-object":"../../../node_modules/core-js/internals/an-object.js","../internals/to-primitive":"../../../node_modules/core-js/internals/to-primitive.js"}],"../../../node_modules/core-js/internals/hide.js":[function(require,module,exports) {
var DESCRIPTORS = require('../internals/descriptors');
var definePropertyModule = require('../internals/object-define-property');
var createPropertyDescriptor = require('../internals/create-property-descriptor');

module.exports = DESCRIPTORS ? function (object, key, value) {
  return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};

},{"../internals/descriptors":"../../../node_modules/core-js/internals/descriptors.js","../internals/object-define-property":"../../../node_modules/core-js/internals/object-define-property.js","../internals/create-property-descriptor":"../../../node_modules/core-js/internals/create-property-descriptor.js"}],"../../../node_modules/core-js/internals/set-global.js":[function(require,module,exports) {

var global = require('../internals/global');
var hide = require('../internals/hide');

module.exports = function (key, value) {
  try {
    hide(global, key, value);
  } catch (error) {
    global[key] = value;
  } return value;
};

},{"../internals/global":"../../../node_modules/core-js/internals/global.js","../internals/hide":"../../../node_modules/core-js/internals/hide.js"}],"../../../node_modules/core-js/internals/is-pure.js":[function(require,module,exports) {
module.exports = false;

},{}],"../../../node_modules/core-js/internals/shared.js":[function(require,module,exports) {

var global = require('../internals/global');
var setGlobal = require('../internals/set-global');
var IS_PURE = require('../internals/is-pure');

var SHARED = '__core-js_shared__';
var store = global[SHARED] || setGlobal(SHARED, {});

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: '3.1.3',
  mode: IS_PURE ? 'pure' : 'global',
  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'
});

},{"../internals/global":"../../../node_modules/core-js/internals/global.js","../internals/set-global":"../../../node_modules/core-js/internals/set-global.js","../internals/is-pure":"../../../node_modules/core-js/internals/is-pure.js"}],"../../../node_modules/core-js/internals/function-to-string.js":[function(require,module,exports) {
var shared = require('../internals/shared');

module.exports = shared('native-function-to-string', Function.toString);

},{"../internals/shared":"../../../node_modules/core-js/internals/shared.js"}],"../../../node_modules/core-js/internals/native-weak-map.js":[function(require,module,exports) {

var global = require('../internals/global');
var nativeFunctionToString = require('../internals/function-to-string');

var WeakMap = global.WeakMap;

module.exports = typeof WeakMap === 'function' && /native code/.test(nativeFunctionToString.call(WeakMap));

},{"../internals/global":"../../../node_modules/core-js/internals/global.js","../internals/function-to-string":"../../../node_modules/core-js/internals/function-to-string.js"}],"../../../node_modules/core-js/internals/uid.js":[function(require,module,exports) {
var id = 0;
var postfix = Math.random();

module.exports = function (key) {
  return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);
};

},{}],"../../../node_modules/core-js/internals/shared-key.js":[function(require,module,exports) {
var shared = require('../internals/shared');
var uid = require('../internals/uid');

var keys = shared('keys');

module.exports = function (key) {
  return keys[key] || (keys[key] = uid(key));
};

},{"../internals/shared":"../../../node_modules/core-js/internals/shared.js","../internals/uid":"../../../node_modules/core-js/internals/uid.js"}],"../../../node_modules/core-js/internals/hidden-keys.js":[function(require,module,exports) {
module.exports = {};

},{}],"../../../node_modules/core-js/internals/internal-state.js":[function(require,module,exports) {

var NATIVE_WEAK_MAP = require('../internals/native-weak-map');
var global = require('../internals/global');
var isObject = require('../internals/is-object');
var hide = require('../internals/hide');
var objectHas = require('../internals/has');
var sharedKey = require('../internals/shared-key');
var hiddenKeys = require('../internals/hidden-keys');

var WeakMap = global.WeakMap;
var set, get, has;

var enforce = function (it) {
  return has(it) ? get(it) : set(it, {});
};

var getterFor = function (TYPE) {
  return function (it) {
    var state;
    if (!isObject(it) || (state = get(it)).type !== TYPE) {
      throw TypeError('Incompatible receiver, ' + TYPE + ' required');
    } return state;
  };
};

if (NATIVE_WEAK_MAP) {
  var store = new WeakMap();
  var wmget = store.get;
  var wmhas = store.has;
  var wmset = store.set;
  set = function (it, metadata) {
    wmset.call(store, it, metadata);
    return metadata;
  };
  get = function (it) {
    return wmget.call(store, it) || {};
  };
  has = function (it) {
    return wmhas.call(store, it);
  };
} else {
  var STATE = sharedKey('state');
  hiddenKeys[STATE] = true;
  set = function (it, metadata) {
    hide(it, STATE, metadata);
    return metadata;
  };
  get = function (it) {
    return objectHas(it, STATE) ? it[STATE] : {};
  };
  has = function (it) {
    return objectHas(it, STATE);
  };
}

module.exports = {
  set: set,
  get: get,
  has: has,
  enforce: enforce,
  getterFor: getterFor
};

},{"../internals/native-weak-map":"../../../node_modules/core-js/internals/native-weak-map.js","../internals/global":"../../../node_modules/core-js/internals/global.js","../internals/is-object":"../../../node_modules/core-js/internals/is-object.js","../internals/hide":"../../../node_modules/core-js/internals/hide.js","../internals/has":"../../../node_modules/core-js/internals/has.js","../internals/shared-key":"../../../node_modules/core-js/internals/shared-key.js","../internals/hidden-keys":"../../../node_modules/core-js/internals/hidden-keys.js"}],"../../../node_modules/core-js/internals/redefine.js":[function(require,module,exports) {

var global = require('../internals/global');
var shared = require('../internals/shared');
var hide = require('../internals/hide');
var has = require('../internals/has');
var setGlobal = require('../internals/set-global');
var nativeFunctionToString = require('../internals/function-to-string');
var InternalStateModule = require('../internals/internal-state');

var getInternalState = InternalStateModule.get;
var enforceInternalState = InternalStateModule.enforce;
var TEMPLATE = String(nativeFunctionToString).split('toString');

shared('inspectSource', function (it) {
  return nativeFunctionToString.call(it);
});

(module.exports = function (O, key, value, options) {
  var unsafe = options ? !!options.unsafe : false;
  var simple = options ? !!options.enumerable : false;
  var noTargetGet = options ? !!options.noTargetGet : false;
  if (typeof value == 'function') {
    if (typeof key == 'string' && !has(value, 'name')) hide(value, 'name', key);
    enforceInternalState(value).source = TEMPLATE.join(typeof key == 'string' ? key : '');
  }
  if (O === global) {
    if (simple) O[key] = value;
    else setGlobal(key, value);
    return;
  } else if (!unsafe) {
    delete O[key];
  } else if (!noTargetGet && O[key]) {
    simple = true;
  }
  if (simple) O[key] = value;
  else hide(O, key, value);
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, 'toString', function toString() {
  return typeof this == 'function' && getInternalState(this).source || nativeFunctionToString.call(this);
});

},{"../internals/global":"../../../node_modules/core-js/internals/global.js","../internals/shared":"../../../node_modules/core-js/internals/shared.js","../internals/hide":"../../../node_modules/core-js/internals/hide.js","../internals/has":"../../../node_modules/core-js/internals/has.js","../internals/set-global":"../../../node_modules/core-js/internals/set-global.js","../internals/function-to-string":"../../../node_modules/core-js/internals/function-to-string.js","../internals/internal-state":"../../../node_modules/core-js/internals/internal-state.js"}],"../../../node_modules/core-js/internals/path.js":[function(require,module,exports) {
module.exports = require('../internals/global');

},{"../internals/global":"../../../node_modules/core-js/internals/global.js"}],"../../../node_modules/core-js/internals/get-built-in.js":[function(require,module,exports) {

var path = require('../internals/path');
var global = require('../internals/global');

var aFunction = function (variable) {
  return typeof variable == 'function' ? variable : undefined;
};

module.exports = function (namespace, method) {
  return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global[namespace])
    : path[namespace] && path[namespace][method] || global[namespace] && global[namespace][method];
};

},{"../internals/path":"../../../node_modules/core-js/internals/path.js","../internals/global":"../../../node_modules/core-js/internals/global.js"}],"../../../node_modules/core-js/internals/to-integer.js":[function(require,module,exports) {
var ceil = Math.ceil;
var floor = Math.floor;

// `ToInteger` abstract operation
// https://tc39.github.io/ecma262/#sec-tointeger
module.exports = function (argument) {
  return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
};

},{}],"../../../node_modules/core-js/internals/to-length.js":[function(require,module,exports) {
var toInteger = require('../internals/to-integer');

var min = Math.min;

// `ToLength` abstract operation
// https://tc39.github.io/ecma262/#sec-tolength
module.exports = function (argument) {
  return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
};

},{"../internals/to-integer":"../../../node_modules/core-js/internals/to-integer.js"}],"../../../node_modules/core-js/internals/to-absolute-index.js":[function(require,module,exports) {
var toInteger = require('../internals/to-integer');

var max = Math.max;
var min = Math.min;

// Helper for a popular repeating case of the spec:
// Let integer be ? ToInteger(index).
// If integer < 0, let result be max((length + integer), 0); else let result be min(length, length).
module.exports = function (index, length) {
  var integer = toInteger(index);
  return integer < 0 ? max(integer + length, 0) : min(integer, length);
};

},{"../internals/to-integer":"../../../node_modules/core-js/internals/to-integer.js"}],"../../../node_modules/core-js/internals/array-includes.js":[function(require,module,exports) {
var toIndexedObject = require('../internals/to-indexed-object');
var toLength = require('../internals/to-length');
var toAbsoluteIndex = require('../internals/to-absolute-index');

// `Array.prototype.{ indexOf, includes }` methods implementation
var createMethod = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIndexedObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) {
      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

module.exports = {
  // `Array.prototype.includes` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.includes
  includes: createMethod(true),
  // `Array.prototype.indexOf` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.indexof
  indexOf: createMethod(false)
};

},{"../internals/to-indexed-object":"../../../node_modules/core-js/internals/to-indexed-object.js","../internals/to-length":"../../../node_modules/core-js/internals/to-length.js","../internals/to-absolute-index":"../../../node_modules/core-js/internals/to-absolute-index.js"}],"../../../node_modules/core-js/internals/object-keys-internal.js":[function(require,module,exports) {
var has = require('../internals/has');
var toIndexedObject = require('../internals/to-indexed-object');
var indexOf = require('../internals/array-includes').indexOf;
var hiddenKeys = require('../internals/hidden-keys');

module.exports = function (object, names) {
  var O = toIndexedObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) !has(hiddenKeys, key) && has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~indexOf(result, key) || result.push(key);
  }
  return result;
};

},{"../internals/has":"../../../node_modules/core-js/internals/has.js","../internals/to-indexed-object":"../../../node_modules/core-js/internals/to-indexed-object.js","../internals/array-includes":"../../../node_modules/core-js/internals/array-includes.js","../internals/hidden-keys":"../../../node_modules/core-js/internals/hidden-keys.js"}],"../../../node_modules/core-js/internals/enum-bug-keys.js":[function(require,module,exports) {
// IE8- don't enum bug keys
module.exports = [
  'constructor',
  'hasOwnProperty',
  'isPrototypeOf',
  'propertyIsEnumerable',
  'toLocaleString',
  'toString',
  'valueOf'
];

},{}],"../../../node_modules/core-js/internals/object-get-own-property-names.js":[function(require,module,exports) {
var internalObjectKeys = require('../internals/object-keys-internal');
var enumBugKeys = require('../internals/enum-bug-keys');

var hiddenKeys = enumBugKeys.concat('length', 'prototype');

// `Object.getOwnPropertyNames` method
// https://tc39.github.io/ecma262/#sec-object.getownpropertynames
exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return internalObjectKeys(O, hiddenKeys);
};

},{"../internals/object-keys-internal":"../../../node_modules/core-js/internals/object-keys-internal.js","../internals/enum-bug-keys":"../../../node_modules/core-js/internals/enum-bug-keys.js"}],"../../../node_modules/core-js/internals/object-get-own-property-symbols.js":[function(require,module,exports) {
exports.f = Object.getOwnPropertySymbols;

},{}],"../../../node_modules/core-js/internals/own-keys.js":[function(require,module,exports) {
var getBuiltIn = require('../internals/get-built-in');
var getOwnPropertyNamesModule = require('../internals/object-get-own-property-names');
var getOwnPropertySymbolsModule = require('../internals/object-get-own-property-symbols');
var anObject = require('../internals/an-object');

// all object keys, includes non-enumerable and symbols
module.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
  var keys = getOwnPropertyNamesModule.f(anObject(it));
  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
  return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;
};

},{"../internals/get-built-in":"../../../node_modules/core-js/internals/get-built-in.js","../internals/object-get-own-property-names":"../../../node_modules/core-js/internals/object-get-own-property-names.js","../internals/object-get-own-property-symbols":"../../../node_modules/core-js/internals/object-get-own-property-symbols.js","../internals/an-object":"../../../node_modules/core-js/internals/an-object.js"}],"../../../node_modules/core-js/internals/copy-constructor-properties.js":[function(require,module,exports) {
var has = require('../internals/has');
var ownKeys = require('../internals/own-keys');
var getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');
var definePropertyModule = require('../internals/object-define-property');

module.exports = function (target, source) {
  var keys = ownKeys(source);
  var defineProperty = definePropertyModule.f;
  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));
  }
};

},{"../internals/has":"../../../node_modules/core-js/internals/has.js","../internals/own-keys":"../../../node_modules/core-js/internals/own-keys.js","../internals/object-get-own-property-descriptor":"../../../node_modules/core-js/internals/object-get-own-property-descriptor.js","../internals/object-define-property":"../../../node_modules/core-js/internals/object-define-property.js"}],"../../../node_modules/core-js/internals/is-forced.js":[function(require,module,exports) {
var fails = require('../internals/fails');

var replacement = /#|\.prototype\./;

var isForced = function (feature, detection) {
  var value = data[normalize(feature)];
  return value == POLYFILL ? true
    : value == NATIVE ? false
    : typeof detection == 'function' ? fails(detection)
    : !!detection;
};

var normalize = isForced.normalize = function (string) {
  return String(string).replace(replacement, '.').toLowerCase();
};

var data = isForced.data = {};
var NATIVE = isForced.NATIVE = 'N';
var POLYFILL = isForced.POLYFILL = 'P';

module.exports = isForced;

},{"../internals/fails":"../../../node_modules/core-js/internals/fails.js"}],"../../../node_modules/core-js/internals/export.js":[function(require,module,exports) {

var global = require('../internals/global');
var getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;
var hide = require('../internals/hide');
var redefine = require('../internals/redefine');
var setGlobal = require('../internals/set-global');
var copyConstructorProperties = require('../internals/copy-constructor-properties');
var isForced = require('../internals/is-forced');

/*
  options.target      - name of the target object
  options.global      - target is the global object
  options.stat        - export as static methods of target
  options.proto       - export as prototype methods of target
  options.real        - real prototype method for the `pure` version
  options.forced      - export even if the native feature is available
  options.bind        - bind methods to the target, required for the `pure` version
  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
  options.sham        - add a flag to not completely full polyfills
  options.enumerable  - export as enumerable property
  options.noTargetGet - prevent calling a getter on target
*/
module.exports = function (options, source) {
  var TARGET = options.target;
  var GLOBAL = options.global;
  var STATIC = options.stat;
  var FORCED, target, key, targetProperty, sourceProperty, descriptor;
  if (GLOBAL) {
    target = global;
  } else if (STATIC) {
    target = global[TARGET] || setGlobal(TARGET, {});
  } else {
    target = (global[TARGET] || {}).prototype;
  }
  if (target) for (key in source) {
    sourceProperty = source[key];
    if (options.noTargetGet) {
      descriptor = getOwnPropertyDescriptor(target, key);
      targetProperty = descriptor && descriptor.value;
    } else targetProperty = target[key];
    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
    // contained in target
    if (!FORCED && targetProperty !== undefined) {
      if (typeof sourceProperty === typeof targetProperty) continue;
      copyConstructorProperties(sourceProperty, targetProperty);
    }
    // add a flag to not completely full polyfills
    if (options.sham || (targetProperty && targetProperty.sham)) {
      hide(sourceProperty, 'sham', true);
    }
    // extend global
    redefine(target, key, sourceProperty, options);
  }
};

},{"../internals/global":"../../../node_modules/core-js/internals/global.js","../internals/object-get-own-property-descriptor":"../../../node_modules/core-js/internals/object-get-own-property-descriptor.js","../internals/hide":"../../../node_modules/core-js/internals/hide.js","../internals/redefine":"../../../node_modules/core-js/internals/redefine.js","../internals/set-global":"../../../node_modules/core-js/internals/set-global.js","../internals/copy-constructor-properties":"../../../node_modules/core-js/internals/copy-constructor-properties.js","../internals/is-forced":"../../../node_modules/core-js/internals/is-forced.js"}],"../../../node_modules/core-js/internals/native-symbol.js":[function(require,module,exports) {
var fails = require('../internals/fails');

module.exports = !!Object.getOwnPropertySymbols && !fails(function () {
  // Chrome 38 Symbol has incorrect toString conversion
  // eslint-disable-next-line no-undef
  return !String(Symbol());
});

},{"../internals/fails":"../../../node_modules/core-js/internals/fails.js"}],"../../../node_modules/core-js/internals/is-array.js":[function(require,module,exports) {
var classof = require('../internals/classof-raw');

// `IsArray` abstract operation
// https://tc39.github.io/ecma262/#sec-isarray
module.exports = Array.isArray || function isArray(arg) {
  return classof(arg) == 'Array';
};

},{"../internals/classof-raw":"../../../node_modules/core-js/internals/classof-raw.js"}],"../../../node_modules/core-js/internals/to-object.js":[function(require,module,exports) {
var requireObjectCoercible = require('../internals/require-object-coercible');

// `ToObject` abstract operation
// https://tc39.github.io/ecma262/#sec-toobject
module.exports = function (argument) {
  return Object(requireObjectCoercible(argument));
};

},{"../internals/require-object-coercible":"../../../node_modules/core-js/internals/require-object-coercible.js"}],"../../../node_modules/core-js/internals/object-keys.js":[function(require,module,exports) {
var internalObjectKeys = require('../internals/object-keys-internal');
var enumBugKeys = require('../internals/enum-bug-keys');

// `Object.keys` method
// https://tc39.github.io/ecma262/#sec-object.keys
module.exports = Object.keys || function keys(O) {
  return internalObjectKeys(O, enumBugKeys);
};

},{"../internals/object-keys-internal":"../../../node_modules/core-js/internals/object-keys-internal.js","../internals/enum-bug-keys":"../../../node_modules/core-js/internals/enum-bug-keys.js"}],"../../../node_modules/core-js/internals/object-define-properties.js":[function(require,module,exports) {
var DESCRIPTORS = require('../internals/descriptors');
var definePropertyModule = require('../internals/object-define-property');
var anObject = require('../internals/an-object');
var objectKeys = require('../internals/object-keys');

// `Object.defineProperties` method
// https://tc39.github.io/ecma262/#sec-object.defineproperties
module.exports = DESCRIPTORS ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = objectKeys(Properties);
  var length = keys.length;
  var index = 0;
  var key;
  while (length > index) definePropertyModule.f(O, key = keys[index++], Properties[key]);
  return O;
};

},{"../internals/descriptors":"../../../node_modules/core-js/internals/descriptors.js","../internals/object-define-property":"../../../node_modules/core-js/internals/object-define-property.js","../internals/an-object":"../../../node_modules/core-js/internals/an-object.js","../internals/object-keys":"../../../node_modules/core-js/internals/object-keys.js"}],"../../../node_modules/core-js/internals/html.js":[function(require,module,exports) {
var getBuiltIn = require('../internals/get-built-in');

module.exports = getBuiltIn('document', 'documentElement');

},{"../internals/get-built-in":"../../../node_modules/core-js/internals/get-built-in.js"}],"../../../node_modules/core-js/internals/object-create.js":[function(require,module,exports) {
var anObject = require('../internals/an-object');
var defineProperties = require('../internals/object-define-properties');
var enumBugKeys = require('../internals/enum-bug-keys');
var hiddenKeys = require('../internals/hidden-keys');
var html = require('../internals/html');
var documentCreateElement = require('../internals/document-create-element');
var sharedKey = require('../internals/shared-key');
var IE_PROTO = sharedKey('IE_PROTO');

var PROTOTYPE = 'prototype';
var Empty = function () { /* empty */ };

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = documentCreateElement('iframe');
  var length = enumBugKeys.length;
  var lt = '<';
  var script = 'script';
  var gt = '>';
  var js = 'java' + script + ':';
  var iframeDocument;
  iframe.style.display = 'none';
  html.appendChild(iframe);
  iframe.src = String(js);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + script + gt + 'document.F=Object' + lt + '/' + script + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (length--) delete createDict[PROTOTYPE][enumBugKeys[length]];
  return createDict();
};

// `Object.create` method
// https://tc39.github.io/ecma262/#sec-object.create
module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : defineProperties(result, Properties);
};

hiddenKeys[IE_PROTO] = true;

},{"../internals/an-object":"../../../node_modules/core-js/internals/an-object.js","../internals/object-define-properties":"../../../node_modules/core-js/internals/object-define-properties.js","../internals/enum-bug-keys":"../../../node_modules/core-js/internals/enum-bug-keys.js","../internals/hidden-keys":"../../../node_modules/core-js/internals/hidden-keys.js","../internals/html":"../../../node_modules/core-js/internals/html.js","../internals/document-create-element":"../../../node_modules/core-js/internals/document-create-element.js","../internals/shared-key":"../../../node_modules/core-js/internals/shared-key.js"}],"../../../node_modules/core-js/internals/object-get-own-property-names-external.js":[function(require,module,exports) {
var toIndexedObject = require('../internals/to-indexed-object');
var nativeGetOwnPropertyNames = require('../internals/object-get-own-property-names').f;

var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return nativeGetOwnPropertyNames(it);
  } catch (error) {
    return windowNames.slice();
  }
};

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]'
    ? getWindowNames(it)
    : nativeGetOwnPropertyNames(toIndexedObject(it));
};

},{"../internals/to-indexed-object":"../../../node_modules/core-js/internals/to-indexed-object.js","../internals/object-get-own-property-names":"../../../node_modules/core-js/internals/object-get-own-property-names.js"}],"../../../node_modules/core-js/internals/well-known-symbol.js":[function(require,module,exports) {

var global = require('../internals/global');
var shared = require('../internals/shared');
var uid = require('../internals/uid');
var NATIVE_SYMBOL = require('../internals/native-symbol');

var Symbol = global.Symbol;
var store = shared('wks');

module.exports = function (name) {
  return store[name] || (store[name] = NATIVE_SYMBOL && Symbol[name]
    || (NATIVE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

},{"../internals/global":"../../../node_modules/core-js/internals/global.js","../internals/shared":"../../../node_modules/core-js/internals/shared.js","../internals/uid":"../../../node_modules/core-js/internals/uid.js","../internals/native-symbol":"../../../node_modules/core-js/internals/native-symbol.js"}],"../../../node_modules/core-js/internals/wrapped-well-known-symbol.js":[function(require,module,exports) {
exports.f = require('../internals/well-known-symbol');

},{"../internals/well-known-symbol":"../../../node_modules/core-js/internals/well-known-symbol.js"}],"../../../node_modules/core-js/internals/define-well-known-symbol.js":[function(require,module,exports) {
var path = require('../internals/path');
var has = require('../internals/has');
var wrappedWellKnownSymbolModule = require('../internals/wrapped-well-known-symbol');
var defineProperty = require('../internals/object-define-property').f;

module.exports = function (NAME) {
  var Symbol = path.Symbol || (path.Symbol = {});
  if (!has(Symbol, NAME)) defineProperty(Symbol, NAME, {
    value: wrappedWellKnownSymbolModule.f(NAME)
  });
};

},{"../internals/path":"../../../node_modules/core-js/internals/path.js","../internals/has":"../../../node_modules/core-js/internals/has.js","../internals/wrapped-well-known-symbol":"../../../node_modules/core-js/internals/wrapped-well-known-symbol.js","../internals/object-define-property":"../../../node_modules/core-js/internals/object-define-property.js"}],"../../../node_modules/core-js/internals/set-to-string-tag.js":[function(require,module,exports) {
var defineProperty = require('../internals/object-define-property').f;
var has = require('../internals/has');
var wellKnownSymbol = require('../internals/well-known-symbol');

var TO_STRING_TAG = wellKnownSymbol('toStringTag');

module.exports = function (it, TAG, STATIC) {
  if (it && !has(it = STATIC ? it : it.prototype, TO_STRING_TAG)) {
    defineProperty(it, TO_STRING_TAG, { configurable: true, value: TAG });
  }
};

},{"../internals/object-define-property":"../../../node_modules/core-js/internals/object-define-property.js","../internals/has":"../../../node_modules/core-js/internals/has.js","../internals/well-known-symbol":"../../../node_modules/core-js/internals/well-known-symbol.js"}],"../../../node_modules/core-js/internals/a-function.js":[function(require,module,exports) {
module.exports = function (it) {
  if (typeof it != 'function') {
    throw TypeError(String(it) + ' is not a function');
  } return it;
};

},{}],"../../../node_modules/core-js/internals/bind-context.js":[function(require,module,exports) {
var aFunction = require('../internals/a-function');

// optional / simple context binding
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 0: return function () {
      return fn.call(that);
    };
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};

},{"../internals/a-function":"../../../node_modules/core-js/internals/a-function.js"}],"../../../node_modules/core-js/internals/array-species-create.js":[function(require,module,exports) {
var isObject = require('../internals/is-object');
var isArray = require('../internals/is-array');
var wellKnownSymbol = require('../internals/well-known-symbol');

var SPECIES = wellKnownSymbol('species');

// `ArraySpeciesCreate` abstract operation
// https://tc39.github.io/ecma262/#sec-arrayspeciescreate
module.exports = function (originalArray, length) {
  var C;
  if (isArray(originalArray)) {
    C = originalArray.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
    else if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return new (C === undefined ? Array : C)(length === 0 ? 0 : length);
};

},{"../internals/is-object":"../../../node_modules/core-js/internals/is-object.js","../internals/is-array":"../../../node_modules/core-js/internals/is-array.js","../internals/well-known-symbol":"../../../node_modules/core-js/internals/well-known-symbol.js"}],"../../../node_modules/core-js/internals/array-iteration.js":[function(require,module,exports) {
var bind = require('../internals/bind-context');
var IndexedObject = require('../internals/indexed-object');
var toObject = require('../internals/to-object');
var toLength = require('../internals/to-length');
var arraySpeciesCreate = require('../internals/array-species-create');

var push = [].push;

// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex }` methods implementation
var createMethod = function (TYPE) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  return function ($this, callbackfn, that, specificCreate) {
    var O = toObject($this);
    var self = IndexedObject(O);
    var boundFunction = bind(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var create = specificCreate || arraySpeciesCreate;
    var target = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var value, result;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      value = self[index];
      result = boundFunction(value, index, O);
      if (TYPE) {
        if (IS_MAP) target[index] = result; // map
        else if (result) switch (TYPE) {
          case 3: return true;              // some
          case 5: return value;             // find
          case 6: return index;             // findIndex
          case 2: push.call(target, value); // filter
        } else if (IS_EVERY) return false;  // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
  };
};

module.exports = {
  // `Array.prototype.forEach` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.foreach
  forEach: createMethod(0),
  // `Array.prototype.map` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.map
  map: createMethod(1),
  // `Array.prototype.filter` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.filter
  filter: createMethod(2),
  // `Array.prototype.some` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.some
  some: createMethod(3),
  // `Array.prototype.every` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.every
  every: createMethod(4),
  // `Array.prototype.find` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.find
  find: createMethod(5),
  // `Array.prototype.findIndex` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.findIndex
  findIndex: createMethod(6)
};

},{"../internals/bind-context":"../../../node_modules/core-js/internals/bind-context.js","../internals/indexed-object":"../../../node_modules/core-js/internals/indexed-object.js","../internals/to-object":"../../../node_modules/core-js/internals/to-object.js","../internals/to-length":"../../../node_modules/core-js/internals/to-length.js","../internals/array-species-create":"../../../node_modules/core-js/internals/array-species-create.js"}],"../../../node_modules/core-js/modules/es.symbol.js":[function(require,module,exports) {

'use strict';
var $ = require('../internals/export');
var global = require('../internals/global');
var IS_PURE = require('../internals/is-pure');
var DESCRIPTORS = require('../internals/descriptors');
var NATIVE_SYMBOL = require('../internals/native-symbol');
var fails = require('../internals/fails');
var has = require('../internals/has');
var isArray = require('../internals/is-array');
var isObject = require('../internals/is-object');
var anObject = require('../internals/an-object');
var toObject = require('../internals/to-object');
var toIndexedObject = require('../internals/to-indexed-object');
var toPrimitive = require('../internals/to-primitive');
var createPropertyDescriptor = require('../internals/create-property-descriptor');
var nativeObjectCreate = require('../internals/object-create');
var objectKeys = require('../internals/object-keys');
var getOwnPropertyNamesModule = require('../internals/object-get-own-property-names');
var getOwnPropertyNamesExternal = require('../internals/object-get-own-property-names-external');
var getOwnPropertySymbolsModule = require('../internals/object-get-own-property-symbols');
var getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');
var definePropertyModule = require('../internals/object-define-property');
var propertyIsEnumerableModule = require('../internals/object-property-is-enumerable');
var hide = require('../internals/hide');
var redefine = require('../internals/redefine');
var shared = require('../internals/shared');
var sharedKey = require('../internals/shared-key');
var hiddenKeys = require('../internals/hidden-keys');
var uid = require('../internals/uid');
var wellKnownSymbol = require('../internals/well-known-symbol');
var wrappedWellKnownSymbolModule = require('../internals/wrapped-well-known-symbol');
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');
var setToStringTag = require('../internals/set-to-string-tag');
var InternalStateModule = require('../internals/internal-state');
var $forEach = require('../internals/array-iteration').forEach;

var HIDDEN = sharedKey('hidden');
var SYMBOL = 'Symbol';
var PROTOTYPE = 'prototype';
var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(SYMBOL);
var ObjectPrototype = Object[PROTOTYPE];
var $Symbol = global.Symbol;
var JSON = global.JSON;
var nativeJSONStringify = JSON && JSON.stringify;
var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
var nativeDefineProperty = definePropertyModule.f;
var nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;
var nativePropertyIsEnumerable = propertyIsEnumerableModule.f;
var AllSymbols = shared('symbols');
var ObjectPrototypeSymbols = shared('op-symbols');
var StringToSymbolRegistry = shared('string-to-symbol-registry');
var SymbolToStringRegistry = shared('symbol-to-string-registry');
var WellKnownSymbolsStore = shared('wks');
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDescriptor = DESCRIPTORS && fails(function () {
  return nativeObjectCreate(nativeDefineProperty({}, 'a', {
    get: function () { return nativeDefineProperty(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (O, P, Attributes) {
  var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor(ObjectPrototype, P);
  if (ObjectPrototypeDescriptor) delete ObjectPrototype[P];
  nativeDefineProperty(O, P, Attributes);
  if (ObjectPrototypeDescriptor && O !== ObjectPrototype) {
    nativeDefineProperty(ObjectPrototype, P, ObjectPrototypeDescriptor);
  }
} : nativeDefineProperty;

var wrap = function (tag, description) {
  var symbol = AllSymbols[tag] = nativeObjectCreate($Symbol[PROTOTYPE]);
  setInternalState(symbol, {
    type: SYMBOL,
    tag: tag,
    description: description
  });
  if (!DESCRIPTORS) symbol.description = description;
  return symbol;
};

var isSymbol = NATIVE_SYMBOL && typeof $Symbol.iterator == 'symbol' ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return Object(it) instanceof $Symbol;
};

var $defineProperty = function defineProperty(O, P, Attributes) {
  if (O === ObjectPrototype) $defineProperty(ObjectPrototypeSymbols, P, Attributes);
  anObject(O);
  var key = toPrimitive(P, true);
  anObject(Attributes);
  if (has(AllSymbols, key)) {
    if (!Attributes.enumerable) {
      if (!has(O, HIDDEN)) nativeDefineProperty(O, HIDDEN, createPropertyDescriptor(1, {}));
      O[HIDDEN][key] = true;
    } else {
      if (has(O, HIDDEN) && O[HIDDEN][key]) O[HIDDEN][key] = false;
      Attributes = nativeObjectCreate(Attributes, { enumerable: createPropertyDescriptor(0, false) });
    } return setSymbolDescriptor(O, key, Attributes);
  } return nativeDefineProperty(O, key, Attributes);
};

var $defineProperties = function defineProperties(O, Properties) {
  anObject(O);
  var properties = toIndexedObject(Properties);
  var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));
  $forEach(keys, function (key) {
    if (!DESCRIPTORS || $propertyIsEnumerable.call(properties, key)) $defineProperty(O, key, properties[key]);
  });
  return O;
};

var $create = function create(O, Properties) {
  return Properties === undefined ? nativeObjectCreate(O) : $defineProperties(nativeObjectCreate(O), Properties);
};

var $propertyIsEnumerable = function propertyIsEnumerable(V) {
  var P = toPrimitive(V, true);
  var enumerable = nativePropertyIsEnumerable.call(this, P);
  if (this === ObjectPrototype && has(AllSymbols, P) && !has(ObjectPrototypeSymbols, P)) return false;
  return enumerable || !has(this, P) || !has(AllSymbols, P) || has(this, HIDDEN) && this[HIDDEN][P] ? enumerable : true;
};

var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {
  var it = toIndexedObject(O);
  var key = toPrimitive(P, true);
  if (it === ObjectPrototype && has(AllSymbols, key) && !has(ObjectPrototypeSymbols, key)) return;
  var descriptor = nativeGetOwnPropertyDescriptor(it, key);
  if (descriptor && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) {
    descriptor.enumerable = true;
  }
  return descriptor;
};

var $getOwnPropertyNames = function getOwnPropertyNames(O) {
  var names = nativeGetOwnPropertyNames(toIndexedObject(O));
  var result = [];
  $forEach(names, function (key) {
    if (!has(AllSymbols, key) && !has(hiddenKeys, key)) result.push(key);
  });
  return result;
};

var $getOwnPropertySymbols = function getOwnPropertySymbols(O) {
  var IS_OBJECT_PROTOTYPE = O === ObjectPrototype;
  var names = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O));
  var result = [];
  $forEach(names, function (key) {
    if (has(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || has(ObjectPrototype, key))) {
      result.push(AllSymbols[key]);
    }
  });
  return result;
};

// `Symbol` constructor
// https://tc39.github.io/ecma262/#sec-symbol-constructor
if (!NATIVE_SYMBOL) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor');
    var description = !arguments.length || arguments[0] === undefined ? undefined : String(arguments[0]);
    var tag = uid(description);
    var setter = function (value) {
      if (this === ObjectPrototype) setter.call(ObjectPrototypeSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
    };
    if (DESCRIPTORS && USE_SETTER) setSymbolDescriptor(ObjectPrototype, tag, { configurable: true, set: setter });
    return wrap(tag, description);
  };

  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return getInternalState(this).tag;
  });

  propertyIsEnumerableModule.f = $propertyIsEnumerable;
  definePropertyModule.f = $defineProperty;
  getOwnPropertyDescriptorModule.f = $getOwnPropertyDescriptor;
  getOwnPropertyNamesModule.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;
  getOwnPropertySymbolsModule.f = $getOwnPropertySymbols;

  if (DESCRIPTORS) {
    // https://github.com/tc39/proposal-Symbol-description
    nativeDefineProperty($Symbol[PROTOTYPE], 'description', {
      configurable: true,
      get: function description() {
        return getInternalState(this).description;
      }
    });
    if (!IS_PURE) {
      redefine(ObjectPrototype, 'propertyIsEnumerable', $propertyIsEnumerable, { unsafe: true });
    }
  }

  wrappedWellKnownSymbolModule.f = function (name) {
    return wrap(wellKnownSymbol(name), name);
  };
}

$({ global: true, wrap: true, forced: !NATIVE_SYMBOL, sham: !NATIVE_SYMBOL }, {
  Symbol: $Symbol
});

$forEach(objectKeys(WellKnownSymbolsStore), function (name) {
  defineWellKnownSymbol(name);
});

$({ target: SYMBOL, stat: true, forced: !NATIVE_SYMBOL }, {
  // `Symbol.for` method
  // https://tc39.github.io/ecma262/#sec-symbol.for
  'for': function (key) {
    var string = String(key);
    if (has(StringToSymbolRegistry, string)) return StringToSymbolRegistry[string];
    var symbol = $Symbol(string);
    StringToSymbolRegistry[string] = symbol;
    SymbolToStringRegistry[symbol] = string;
    return symbol;
  },
  // `Symbol.keyFor` method
  // https://tc39.github.io/ecma262/#sec-symbol.keyfor
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol');
    if (has(SymbolToStringRegistry, sym)) return SymbolToStringRegistry[sym];
  },
  useSetter: function () { USE_SETTER = true; },
  useSimple: function () { USE_SETTER = false; }
});

$({ target: 'Object', stat: true, forced: !NATIVE_SYMBOL, sham: !DESCRIPTORS }, {
  // `Object.create` method
  // https://tc39.github.io/ecma262/#sec-object.create
  create: $create,
  // `Object.defineProperty` method
  // https://tc39.github.io/ecma262/#sec-object.defineproperty
  defineProperty: $defineProperty,
  // `Object.defineProperties` method
  // https://tc39.github.io/ecma262/#sec-object.defineproperties
  defineProperties: $defineProperties,
  // `Object.getOwnPropertyDescriptor` method
  // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptors
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor
});

$({ target: 'Object', stat: true, forced: !NATIVE_SYMBOL }, {
  // `Object.getOwnPropertyNames` method
  // https://tc39.github.io/ecma262/#sec-object.getownpropertynames
  getOwnPropertyNames: $getOwnPropertyNames,
  // `Object.getOwnPropertySymbols` method
  // https://tc39.github.io/ecma262/#sec-object.getownpropertysymbols
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
// https://bugs.chromium.org/p/v8/issues/detail?id=3443
$({ target: 'Object', stat: true, forced: fails(function () { getOwnPropertySymbolsModule.f(1); }) }, {
  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
    return getOwnPropertySymbolsModule.f(toObject(it));
  }
});

// `JSON.stringify` method behavior with symbols
// https://tc39.github.io/ecma262/#sec-json.stringify
JSON && $({ target: 'JSON', stat: true, forced: !NATIVE_SYMBOL || fails(function () {
  var symbol = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  return nativeJSONStringify([symbol]) != '[null]'
    // WebKit converts symbol values to JSON as null
    || nativeJSONStringify({ a: symbol }) != '{}'
    // V8 throws on boxed symbols
    || nativeJSONStringify(Object(symbol)) != '{}';
}) }, {
  stringify: function stringify(it) {
    var args = [it];
    var index = 1;
    var replacer, $replacer;
    while (arguments.length > index) args.push(arguments[index++]);
    $replacer = replacer = args[1];
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    if (!isArray(replacer)) replacer = function (key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return nativeJSONStringify.apply(JSON, args);
  }
});

// `Symbol.prototype[@@toPrimitive]` method
// https://tc39.github.io/ecma262/#sec-symbol.prototype-@@toprimitive
if (!$Symbol[PROTOTYPE][TO_PRIMITIVE]) hide($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// `Symbol.prototype[@@toStringTag]` property
// https://tc39.github.io/ecma262/#sec-symbol.prototype-@@tostringtag
setToStringTag($Symbol, SYMBOL);

hiddenKeys[HIDDEN] = true;

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/global":"../../../node_modules/core-js/internals/global.js","../internals/is-pure":"../../../node_modules/core-js/internals/is-pure.js","../internals/descriptors":"../../../node_modules/core-js/internals/descriptors.js","../internals/native-symbol":"../../../node_modules/core-js/internals/native-symbol.js","../internals/fails":"../../../node_modules/core-js/internals/fails.js","../internals/has":"../../../node_modules/core-js/internals/has.js","../internals/is-array":"../../../node_modules/core-js/internals/is-array.js","../internals/is-object":"../../../node_modules/core-js/internals/is-object.js","../internals/an-object":"../../../node_modules/core-js/internals/an-object.js","../internals/to-object":"../../../node_modules/core-js/internals/to-object.js","../internals/to-indexed-object":"../../../node_modules/core-js/internals/to-indexed-object.js","../internals/to-primitive":"../../../node_modules/core-js/internals/to-primitive.js","../internals/create-property-descriptor":"../../../node_modules/core-js/internals/create-property-descriptor.js","../internals/object-create":"../../../node_modules/core-js/internals/object-create.js","../internals/object-keys":"../../../node_modules/core-js/internals/object-keys.js","../internals/object-get-own-property-names":"../../../node_modules/core-js/internals/object-get-own-property-names.js","../internals/object-get-own-property-names-external":"../../../node_modules/core-js/internals/object-get-own-property-names-external.js","../internals/object-get-own-property-symbols":"../../../node_modules/core-js/internals/object-get-own-property-symbols.js","../internals/object-get-own-property-descriptor":"../../../node_modules/core-js/internals/object-get-own-property-descriptor.js","../internals/object-define-property":"../../../node_modules/core-js/internals/object-define-property.js","../internals/object-property-is-enumerable":"../../../node_modules/core-js/internals/object-property-is-enumerable.js","../internals/hide":"../../../node_modules/core-js/internals/hide.js","../internals/redefine":"../../../node_modules/core-js/internals/redefine.js","../internals/shared":"../../../node_modules/core-js/internals/shared.js","../internals/shared-key":"../../../node_modules/core-js/internals/shared-key.js","../internals/hidden-keys":"../../../node_modules/core-js/internals/hidden-keys.js","../internals/uid":"../../../node_modules/core-js/internals/uid.js","../internals/well-known-symbol":"../../../node_modules/core-js/internals/well-known-symbol.js","../internals/wrapped-well-known-symbol":"../../../node_modules/core-js/internals/wrapped-well-known-symbol.js","../internals/define-well-known-symbol":"../../../node_modules/core-js/internals/define-well-known-symbol.js","../internals/set-to-string-tag":"../../../node_modules/core-js/internals/set-to-string-tag.js","../internals/internal-state":"../../../node_modules/core-js/internals/internal-state.js","../internals/array-iteration":"../../../node_modules/core-js/internals/array-iteration.js"}],"../../../node_modules/core-js/modules/es.symbol.async-iterator.js":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.asyncIterator` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.asynciterator
defineWellKnownSymbol('asyncIterator');

},{"../internals/define-well-known-symbol":"../../../node_modules/core-js/internals/define-well-known-symbol.js"}],"../../../node_modules/core-js/modules/es.symbol.description.js":[function(require,module,exports) {

// `Symbol.prototype.description` getter
// https://tc39.github.io/ecma262/#sec-symbol.prototype.description
'use strict';
var $ = require('../internals/export');
var DESCRIPTORS = require('../internals/descriptors');
var global = require('../internals/global');
var has = require('../internals/has');
var isObject = require('../internals/is-object');
var defineProperty = require('../internals/object-define-property').f;
var copyConstructorProperties = require('../internals/copy-constructor-properties');

var NativeSymbol = global.Symbol;

if (DESCRIPTORS && typeof NativeSymbol == 'function' && (!('description' in NativeSymbol.prototype) ||
  // Safari 12 bug
  NativeSymbol().description !== undefined
)) {
  var EmptyStringDescriptionStore = {};
  // wrap Symbol constructor for correct work with undefined description
  var SymbolWrapper = function Symbol() {
    var description = arguments.length < 1 || arguments[0] === undefined ? undefined : String(arguments[0]);
    var result = this instanceof SymbolWrapper
      ? new NativeSymbol(description)
      // in Edge 13, String(Symbol(undefined)) === 'Symbol(undefined)'
      : description === undefined ? NativeSymbol() : NativeSymbol(description);
    if (description === '') EmptyStringDescriptionStore[result] = true;
    return result;
  };
  copyConstructorProperties(SymbolWrapper, NativeSymbol);
  var symbolPrototype = SymbolWrapper.prototype = NativeSymbol.prototype;
  symbolPrototype.constructor = SymbolWrapper;

  var symbolToString = symbolPrototype.toString;
  var native = String(NativeSymbol('test')) == 'Symbol(test)';
  var regexp = /^Symbol\((.*)\)[^)]+$/;
  defineProperty(symbolPrototype, 'description', {
    configurable: true,
    get: function description() {
      var symbol = isObject(this) ? this.valueOf() : this;
      var string = symbolToString.call(symbol);
      if (has(EmptyStringDescriptionStore, symbol)) return '';
      var desc = native ? string.slice(7, -1) : string.replace(regexp, '$1');
      return desc === '' ? undefined : desc;
    }
  });

  $({ global: true, forced: true }, {
    Symbol: SymbolWrapper
  });
}

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/descriptors":"../../../node_modules/core-js/internals/descriptors.js","../internals/global":"../../../node_modules/core-js/internals/global.js","../internals/has":"../../../node_modules/core-js/internals/has.js","../internals/is-object":"../../../node_modules/core-js/internals/is-object.js","../internals/object-define-property":"../../../node_modules/core-js/internals/object-define-property.js","../internals/copy-constructor-properties":"../../../node_modules/core-js/internals/copy-constructor-properties.js"}],"../../../node_modules/core-js/modules/es.symbol.has-instance.js":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.hasInstance` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.hasinstance
defineWellKnownSymbol('hasInstance');

},{"../internals/define-well-known-symbol":"../../../node_modules/core-js/internals/define-well-known-symbol.js"}],"../../../node_modules/core-js/modules/es.symbol.is-concat-spreadable.js":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.isConcatSpreadable` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.isconcatspreadable
defineWellKnownSymbol('isConcatSpreadable');

},{"../internals/define-well-known-symbol":"../../../node_modules/core-js/internals/define-well-known-symbol.js"}],"../../../node_modules/core-js/modules/es.symbol.iterator.js":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.iterator` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.iterator
defineWellKnownSymbol('iterator');

},{"../internals/define-well-known-symbol":"../../../node_modules/core-js/internals/define-well-known-symbol.js"}],"../../../node_modules/core-js/modules/es.symbol.match.js":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.match` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.match
defineWellKnownSymbol('match');

},{"../internals/define-well-known-symbol":"../../../node_modules/core-js/internals/define-well-known-symbol.js"}],"../../../node_modules/core-js/modules/es.symbol.match-all.js":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.matchAll` well-known symbol
defineWellKnownSymbol('matchAll');

},{"../internals/define-well-known-symbol":"../../../node_modules/core-js/internals/define-well-known-symbol.js"}],"../../../node_modules/core-js/modules/es.symbol.replace.js":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.replace` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.replace
defineWellKnownSymbol('replace');

},{"../internals/define-well-known-symbol":"../../../node_modules/core-js/internals/define-well-known-symbol.js"}],"../../../node_modules/core-js/modules/es.symbol.search.js":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.search` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.search
defineWellKnownSymbol('search');

},{"../internals/define-well-known-symbol":"../../../node_modules/core-js/internals/define-well-known-symbol.js"}],"../../../node_modules/core-js/modules/es.symbol.species.js":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.species` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.species
defineWellKnownSymbol('species');

},{"../internals/define-well-known-symbol":"../../../node_modules/core-js/internals/define-well-known-symbol.js"}],"../../../node_modules/core-js/modules/es.symbol.split.js":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.split` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.split
defineWellKnownSymbol('split');

},{"../internals/define-well-known-symbol":"../../../node_modules/core-js/internals/define-well-known-symbol.js"}],"../../../node_modules/core-js/modules/es.symbol.to-primitive.js":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.toPrimitive` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.toprimitive
defineWellKnownSymbol('toPrimitive');

},{"../internals/define-well-known-symbol":"../../../node_modules/core-js/internals/define-well-known-symbol.js"}],"../../../node_modules/core-js/modules/es.symbol.to-string-tag.js":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.toStringTag` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.tostringtag
defineWellKnownSymbol('toStringTag');

},{"../internals/define-well-known-symbol":"../../../node_modules/core-js/internals/define-well-known-symbol.js"}],"../../../node_modules/core-js/modules/es.symbol.unscopables.js":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.unscopables` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.unscopables
defineWellKnownSymbol('unscopables');

},{"../internals/define-well-known-symbol":"../../../node_modules/core-js/internals/define-well-known-symbol.js"}],"../../../node_modules/core-js/internals/object-assign.js":[function(require,module,exports) {
'use strict';
var DESCRIPTORS = require('../internals/descriptors');
var fails = require('../internals/fails');
var objectKeys = require('../internals/object-keys');
var getOwnPropertySymbolsModule = require('../internals/object-get-own-property-symbols');
var propertyIsEnumerableModule = require('../internals/object-property-is-enumerable');
var toObject = require('../internals/to-object');
var IndexedObject = require('../internals/indexed-object');

var nativeAssign = Object.assign;

// `Object.assign` method
// https://tc39.github.io/ecma262/#sec-object.assign
// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !nativeAssign || fails(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var symbol = Symbol();
  var alphabet = 'abcdefghijklmnopqrst';
  A[symbol] = 7;
  alphabet.split('').forEach(function (chr) { B[chr] = chr; });
  return nativeAssign({}, A)[symbol] != 7 || objectKeys(nativeAssign({}, B)).join('') != alphabet;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var argumentsLength = arguments.length;
  var index = 1;
  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
  var propertyIsEnumerable = propertyIsEnumerableModule.f;
  while (argumentsLength > index) {
    var S = IndexedObject(arguments[index++]);
    var keys = getOwnPropertySymbols ? objectKeys(S).concat(getOwnPropertySymbols(S)) : objectKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) {
      key = keys[j++];
      if (!DESCRIPTORS || propertyIsEnumerable.call(S, key)) T[key] = S[key];
    }
  } return T;
} : nativeAssign;

},{"../internals/descriptors":"../../../node_modules/core-js/internals/descriptors.js","../internals/fails":"../../../node_modules/core-js/internals/fails.js","../internals/object-keys":"../../../node_modules/core-js/internals/object-keys.js","../internals/object-get-own-property-symbols":"../../../node_modules/core-js/internals/object-get-own-property-symbols.js","../internals/object-property-is-enumerable":"../../../node_modules/core-js/internals/object-property-is-enumerable.js","../internals/to-object":"../../../node_modules/core-js/internals/to-object.js","../internals/indexed-object":"../../../node_modules/core-js/internals/indexed-object.js"}],"../../../node_modules/core-js/modules/es.object.assign.js":[function(require,module,exports) {
var $ = require('../internals/export');
var assign = require('../internals/object-assign');

// `Object.assign` method
// https://tc39.github.io/ecma262/#sec-object.assign
$({ target: 'Object', stat: true, forced: Object.assign !== assign }, {
  assign: assign
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/object-assign":"../../../node_modules/core-js/internals/object-assign.js"}],"../../../node_modules/core-js/modules/es.object.create.js":[function(require,module,exports) {
var $ = require('../internals/export');
var DESCRIPTORS = require('../internals/descriptors');
var create = require('../internals/object-create');

// `Object.create` method
// https://tc39.github.io/ecma262/#sec-object.create
$({ target: 'Object', stat: true, sham: !DESCRIPTORS }, {
  create: create
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/descriptors":"../../../node_modules/core-js/internals/descriptors.js","../internals/object-create":"../../../node_modules/core-js/internals/object-create.js"}],"../../../node_modules/core-js/modules/es.object.define-property.js":[function(require,module,exports) {
var $ = require('../internals/export');
var DESCRIPTORS = require('../internals/descriptors');
var objectDefinePropertyModile = require('../internals/object-define-property');

// `Object.defineProperty` method
// https://tc39.github.io/ecma262/#sec-object.defineproperty
$({ target: 'Object', stat: true, forced: !DESCRIPTORS, sham: !DESCRIPTORS }, {
  defineProperty: objectDefinePropertyModile.f
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/descriptors":"../../../node_modules/core-js/internals/descriptors.js","../internals/object-define-property":"../../../node_modules/core-js/internals/object-define-property.js"}],"../../../node_modules/core-js/modules/es.object.define-properties.js":[function(require,module,exports) {
var $ = require('../internals/export');
var DESCRIPTORS = require('../internals/descriptors');
var defineProperties = require('../internals/object-define-properties');

// `Object.defineProperties` method
// https://tc39.github.io/ecma262/#sec-object.defineproperties
$({ target: 'Object', stat: true, forced: !DESCRIPTORS, sham: !DESCRIPTORS }, {
  defineProperties: defineProperties
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/descriptors":"../../../node_modules/core-js/internals/descriptors.js","../internals/object-define-properties":"../../../node_modules/core-js/internals/object-define-properties.js"}],"../../../node_modules/core-js/internals/object-to-array.js":[function(require,module,exports) {
var DESCRIPTORS = require('../internals/descriptors');
var objectKeys = require('../internals/object-keys');
var toIndexedObject = require('../internals/to-indexed-object');
var propertyIsEnumerable = require('../internals/object-property-is-enumerable').f;

// `Object.{ entries, values }` methods implementation
var createMethod = function (TO_ENTRIES) {
  return function (it) {
    var O = toIndexedObject(it);
    var keys = objectKeys(O);
    var length = keys.length;
    var i = 0;
    var result = [];
    var key;
    while (length > i) {
      key = keys[i++];
      if (!DESCRIPTORS || propertyIsEnumerable.call(O, key)) {
        result.push(TO_ENTRIES ? [key, O[key]] : O[key]);
      }
    }
    return result;
  };
};

module.exports = {
  // `Object.entries` method
  // https://tc39.github.io/ecma262/#sec-object.entries
  entries: createMethod(true),
  // `Object.values` method
  // https://tc39.github.io/ecma262/#sec-object.values
  values: createMethod(false)
};

},{"../internals/descriptors":"../../../node_modules/core-js/internals/descriptors.js","../internals/object-keys":"../../../node_modules/core-js/internals/object-keys.js","../internals/to-indexed-object":"../../../node_modules/core-js/internals/to-indexed-object.js","../internals/object-property-is-enumerable":"../../../node_modules/core-js/internals/object-property-is-enumerable.js"}],"../../../node_modules/core-js/modules/es.object.entries.js":[function(require,module,exports) {
var $ = require('../internals/export');
var $entries = require('../internals/object-to-array').entries;

// `Object.entries` method
// https://tc39.github.io/ecma262/#sec-object.entries
$({ target: 'Object', stat: true }, {
  entries: function entries(O) {
    return $entries(O);
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/object-to-array":"../../../node_modules/core-js/internals/object-to-array.js"}],"../../../node_modules/core-js/internals/freezing.js":[function(require,module,exports) {
var fails = require('../internals/fails');

module.exports = !fails(function () {
  return Object.isExtensible(Object.preventExtensions({}));
});

},{"../internals/fails":"../../../node_modules/core-js/internals/fails.js"}],"../../../node_modules/core-js/internals/internal-metadata.js":[function(require,module,exports) {
var hiddenKeys = require('../internals/hidden-keys');
var isObject = require('../internals/is-object');
var has = require('../internals/has');
var defineProperty = require('../internals/object-define-property').f;
var uid = require('../internals/uid');
var FREEZING = require('../internals/freezing');

var METADATA = uid('meta');
var id = 0;

var isExtensible = Object.isExtensible || function () {
  return true;
};

var setMetadata = function (it) {
  defineProperty(it, METADATA, { value: {
    objectID: 'O' + ++id, // object ID
    weakData: {}          // weak collections IDs
  } });
};

var fastKey = function (it, create) {
  // return a primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, METADATA)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMetadata(it);
  // return object ID
  } return it[METADATA].objectID;
};

var getWeakData = function (it, create) {
  if (!has(it, METADATA)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMetadata(it);
  // return the store of weak collections IDs
  } return it[METADATA].weakData;
};

// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZING && meta.REQUIRED && isExtensible(it) && !has(it, METADATA)) setMetadata(it);
  return it;
};

var meta = module.exports = {
  REQUIRED: false,
  fastKey: fastKey,
  getWeakData: getWeakData,
  onFreeze: onFreeze
};

hiddenKeys[METADATA] = true;

},{"../internals/hidden-keys":"../../../node_modules/core-js/internals/hidden-keys.js","../internals/is-object":"../../../node_modules/core-js/internals/is-object.js","../internals/has":"../../../node_modules/core-js/internals/has.js","../internals/object-define-property":"../../../node_modules/core-js/internals/object-define-property.js","../internals/uid":"../../../node_modules/core-js/internals/uid.js","../internals/freezing":"../../../node_modules/core-js/internals/freezing.js"}],"../../../node_modules/core-js/modules/es.object.freeze.js":[function(require,module,exports) {
var $ = require('../internals/export');
var FREEZING = require('../internals/freezing');
var fails = require('../internals/fails');
var isObject = require('../internals/is-object');
var onFreeze = require('../internals/internal-metadata').onFreeze;

var nativeFreeze = Object.freeze;
var FAILS_ON_PRIMITIVES = fails(function () { nativeFreeze(1); });

// `Object.freeze` method
// https://tc39.github.io/ecma262/#sec-object.freeze
$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES, sham: !FREEZING }, {
  freeze: function freeze(it) {
    return nativeFreeze && isObject(it) ? nativeFreeze(onFreeze(it)) : it;
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/freezing":"../../../node_modules/core-js/internals/freezing.js","../internals/fails":"../../../node_modules/core-js/internals/fails.js","../internals/is-object":"../../../node_modules/core-js/internals/is-object.js","../internals/internal-metadata":"../../../node_modules/core-js/internals/internal-metadata.js"}],"../../../node_modules/core-js/internals/is-array-iterator-method.js":[function(require,module,exports) {
var wellKnownSymbol = require('../internals/well-known-symbol');
var Iterators = require('../internals/iterators');

var ITERATOR = wellKnownSymbol('iterator');
var ArrayPrototype = Array.prototype;

// check on default Array iterator
module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
};

},{"../internals/well-known-symbol":"../../../node_modules/core-js/internals/well-known-symbol.js","../internals/iterators":"../../../node_modules/core-js/internals/hidden-keys.js"}],"../../../node_modules/core-js/internals/classof.js":[function(require,module,exports) {
var classofRaw = require('../internals/classof-raw');
var wellKnownSymbol = require('../internals/well-known-symbol');

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
// ES3 wrong here
var CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (error) { /* empty */ }
};

// getting tag from ES6+ `Object.prototype.toString`
module.exports = function (it) {
  var O, tag, result;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG)) == 'string' ? tag
    // builtinTag case
    : CORRECT_ARGUMENTS ? classofRaw(O)
    // ES3 arguments fallback
    : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;
};

},{"../internals/classof-raw":"../../../node_modules/core-js/internals/classof-raw.js","../internals/well-known-symbol":"../../../node_modules/core-js/internals/well-known-symbol.js"}],"../../../node_modules/core-js/internals/get-iterator-method.js":[function(require,module,exports) {
var classof = require('../internals/classof');
var Iterators = require('../internals/iterators');
var wellKnownSymbol = require('../internals/well-known-symbol');

var ITERATOR = wellKnownSymbol('iterator');

module.exports = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};

},{"../internals/classof":"../../../node_modules/core-js/internals/classof.js","../internals/iterators":"../../../node_modules/core-js/internals/hidden-keys.js","../internals/well-known-symbol":"../../../node_modules/core-js/internals/well-known-symbol.js"}],"../../../node_modules/core-js/internals/call-with-safe-iteration-closing.js":[function(require,module,exports) {
var anObject = require('../internals/an-object');

// call something on iterator step with safe closing on error
module.exports = function (iterator, fn, value, ENTRIES) {
  try {
    return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (error) {
    var returnMethod = iterator['return'];
    if (returnMethod !== undefined) anObject(returnMethod.call(iterator));
    throw error;
  }
};

},{"../internals/an-object":"../../../node_modules/core-js/internals/an-object.js"}],"../../../node_modules/core-js/internals/iterate.js":[function(require,module,exports) {
var anObject = require('../internals/an-object');
var isArrayIteratorMethod = require('../internals/is-array-iterator-method');
var toLength = require('../internals/to-length');
var bind = require('../internals/bind-context');
var getIteratorMethod = require('../internals/get-iterator-method');
var callWithSafeIterationClosing = require('../internals/call-with-safe-iteration-closing');

var Result = function (stopped, result) {
  this.stopped = stopped;
  this.result = result;
};

var iterate = module.exports = function (iterable, fn, that, AS_ENTRIES, IS_ITERATOR) {
  var boundFunction = bind(fn, that, AS_ENTRIES ? 2 : 1);
  var iterator, iterFn, index, length, result, step;

  if (IS_ITERATOR) {
    iterator = iterable;
  } else {
    iterFn = getIteratorMethod(iterable);
    if (typeof iterFn != 'function') throw TypeError('Target is not iterable');
    // optimisation for array iterators
    if (isArrayIteratorMethod(iterFn)) {
      for (index = 0, length = toLength(iterable.length); length > index; index++) {
        result = AS_ENTRIES
          ? boundFunction(anObject(step = iterable[index])[0], step[1])
          : boundFunction(iterable[index]);
        if (result && result instanceof Result) return result;
      } return new Result(false);
    }
    iterator = iterFn.call(iterable);
  }

  while (!(step = iterator.next()).done) {
    result = callWithSafeIterationClosing(iterator, boundFunction, step.value, AS_ENTRIES);
    if (result && result instanceof Result) return result;
  } return new Result(false);
};

iterate.stop = function (result) {
  return new Result(true, result);
};

},{"../internals/an-object":"../../../node_modules/core-js/internals/an-object.js","../internals/is-array-iterator-method":"../../../node_modules/core-js/internals/is-array-iterator-method.js","../internals/to-length":"../../../node_modules/core-js/internals/to-length.js","../internals/bind-context":"../../../node_modules/core-js/internals/bind-context.js","../internals/get-iterator-method":"../../../node_modules/core-js/internals/get-iterator-method.js","../internals/call-with-safe-iteration-closing":"../../../node_modules/core-js/internals/call-with-safe-iteration-closing.js"}],"../../../node_modules/core-js/internals/create-property.js":[function(require,module,exports) {
'use strict';
var toPrimitive = require('../internals/to-primitive');
var definePropertyModule = require('../internals/object-define-property');
var createPropertyDescriptor = require('../internals/create-property-descriptor');

module.exports = function (object, key, value) {
  var propertyKey = toPrimitive(key);
  if (propertyKey in object) definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));
  else object[propertyKey] = value;
};

},{"../internals/to-primitive":"../../../node_modules/core-js/internals/to-primitive.js","../internals/object-define-property":"../../../node_modules/core-js/internals/object-define-property.js","../internals/create-property-descriptor":"../../../node_modules/core-js/internals/create-property-descriptor.js"}],"../../../node_modules/core-js/modules/es.object.from-entries.js":[function(require,module,exports) {
var $ = require('../internals/export');
var iterate = require('../internals/iterate');
var createProperty = require('../internals/create-property');

// `Object.fromEntries` method
// https://github.com/tc39/proposal-object-from-entries
$({ target: 'Object', stat: true }, {
  fromEntries: function fromEntries(iterable) {
    var obj = {};
    iterate(iterable, function (k, v) {
      createProperty(obj, k, v);
    }, undefined, true);
    return obj;
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/iterate":"../../../node_modules/core-js/internals/iterate.js","../internals/create-property":"../../../node_modules/core-js/internals/create-property.js"}],"../../../node_modules/core-js/modules/es.object.get-own-property-descriptor.js":[function(require,module,exports) {
var $ = require('../internals/export');
var fails = require('../internals/fails');
var toIndexedObject = require('../internals/to-indexed-object');
var nativeGetOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;
var DESCRIPTORS = require('../internals/descriptors');

var FAILS_ON_PRIMITIVES = fails(function () { nativeGetOwnPropertyDescriptor(1); });
var FORCED = !DESCRIPTORS || FAILS_ON_PRIMITIVES;

// `Object.getOwnPropertyDescriptor` method
// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor
$({ target: 'Object', stat: true, forced: FORCED, sham: !DESCRIPTORS }, {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(it, key) {
    return nativeGetOwnPropertyDescriptor(toIndexedObject(it), key);
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/fails":"../../../node_modules/core-js/internals/fails.js","../internals/to-indexed-object":"../../../node_modules/core-js/internals/to-indexed-object.js","../internals/object-get-own-property-descriptor":"../../../node_modules/core-js/internals/object-get-own-property-descriptor.js","../internals/descriptors":"../../../node_modules/core-js/internals/descriptors.js"}],"../../../node_modules/core-js/modules/es.object.get-own-property-descriptors.js":[function(require,module,exports) {
var $ = require('../internals/export');
var DESCRIPTORS = require('../internals/descriptors');
var ownKeys = require('../internals/own-keys');
var toIndexedObject = require('../internals/to-indexed-object');
var getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');
var createProperty = require('../internals/create-property');

// `Object.getOwnPropertyDescriptors` method
// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptors
$({ target: 'Object', stat: true, sham: !DESCRIPTORS }, {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
    var O = toIndexedObject(object);
    var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
    var keys = ownKeys(O);
    var result = {};
    var index = 0;
    var key, descriptor;
    while (keys.length > index) {
      descriptor = getOwnPropertyDescriptor(O, key = keys[index++]);
      if (descriptor !== undefined) createProperty(result, key, descriptor);
    }
    return result;
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/descriptors":"../../../node_modules/core-js/internals/descriptors.js","../internals/own-keys":"../../../node_modules/core-js/internals/own-keys.js","../internals/to-indexed-object":"../../../node_modules/core-js/internals/to-indexed-object.js","../internals/object-get-own-property-descriptor":"../../../node_modules/core-js/internals/object-get-own-property-descriptor.js","../internals/create-property":"../../../node_modules/core-js/internals/create-property.js"}],"../../../node_modules/core-js/modules/es.object.get-own-property-names.js":[function(require,module,exports) {
var $ = require('../internals/export');
var fails = require('../internals/fails');
var nativeGetOwnPropertyNames = require('../internals/object-get-own-property-names-external').f;

var FAILS_ON_PRIMITIVES = fails(function () { return !Object.getOwnPropertyNames(1); });

// `Object.getOwnPropertyNames` method
// https://tc39.github.io/ecma262/#sec-object.getownpropertynames
$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES }, {
  getOwnPropertyNames: nativeGetOwnPropertyNames
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/fails":"../../../node_modules/core-js/internals/fails.js","../internals/object-get-own-property-names-external":"../../../node_modules/core-js/internals/object-get-own-property-names-external.js"}],"../../../node_modules/core-js/internals/correct-prototype-getter.js":[function(require,module,exports) {
var fails = require('../internals/fails');

module.exports = !fails(function () {
  function F() { /* empty */ }
  F.prototype.constructor = null;
  return Object.getPrototypeOf(new F()) !== F.prototype;
});

},{"../internals/fails":"../../../node_modules/core-js/internals/fails.js"}],"../../../node_modules/core-js/internals/object-get-prototype-of.js":[function(require,module,exports) {
var has = require('../internals/has');
var toObject = require('../internals/to-object');
var sharedKey = require('../internals/shared-key');
var CORRECT_PROTOTYPE_GETTER = require('../internals/correct-prototype-getter');

var IE_PROTO = sharedKey('IE_PROTO');
var ObjectPrototype = Object.prototype;

// `Object.getPrototypeOf` method
// https://tc39.github.io/ecma262/#sec-object.getprototypeof
module.exports = CORRECT_PROTOTYPE_GETTER ? Object.getPrototypeOf : function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectPrototype : null;
};

},{"../internals/has":"../../../node_modules/core-js/internals/has.js","../internals/to-object":"../../../node_modules/core-js/internals/to-object.js","../internals/shared-key":"../../../node_modules/core-js/internals/shared-key.js","../internals/correct-prototype-getter":"../../../node_modules/core-js/internals/correct-prototype-getter.js"}],"../../../node_modules/core-js/modules/es.object.get-prototype-of.js":[function(require,module,exports) {
var $ = require('../internals/export');
var fails = require('../internals/fails');
var toObject = require('../internals/to-object');
var nativeGetPrototypeOf = require('../internals/object-get-prototype-of');
var CORRECT_PROTOTYPE_GETTER = require('../internals/correct-prototype-getter');

var FAILS_ON_PRIMITIVES = fails(function () { nativeGetPrototypeOf(1); });

// `Object.getPrototypeOf` method
// https://tc39.github.io/ecma262/#sec-object.getprototypeof
$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES, sham: !CORRECT_PROTOTYPE_GETTER }, {
  getPrototypeOf: function getPrototypeOf(it) {
    return nativeGetPrototypeOf(toObject(it));
  }
});


},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/fails":"../../../node_modules/core-js/internals/fails.js","../internals/to-object":"../../../node_modules/core-js/internals/to-object.js","../internals/object-get-prototype-of":"../../../node_modules/core-js/internals/object-get-prototype-of.js","../internals/correct-prototype-getter":"../../../node_modules/core-js/internals/correct-prototype-getter.js"}],"../../../node_modules/core-js/internals/same-value.js":[function(require,module,exports) {
// `SameValue` abstract operation
// https://tc39.github.io/ecma262/#sec-samevalue
module.exports = Object.is || function is(x, y) {
  // eslint-disable-next-line no-self-compare
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};

},{}],"../../../node_modules/core-js/modules/es.object.is.js":[function(require,module,exports) {
var $ = require('../internals/export');
var is = require('../internals/same-value');

// `Object.is` method
// https://tc39.github.io/ecma262/#sec-object.is
$({ target: 'Object', stat: true }, {
  is: is
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/same-value":"../../../node_modules/core-js/internals/same-value.js"}],"../../../node_modules/core-js/modules/es.object.is-extensible.js":[function(require,module,exports) {
var $ = require('../internals/export');
var fails = require('../internals/fails');
var isObject = require('../internals/is-object');

var nativeIsExtensible = Object.isExtensible;
var FAILS_ON_PRIMITIVES = fails(function () { nativeIsExtensible(1); });

// `Object.isExtensible` method
// https://tc39.github.io/ecma262/#sec-object.isextensible
$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES }, {
  isExtensible: function isExtensible(it) {
    return isObject(it) ? nativeIsExtensible ? nativeIsExtensible(it) : true : false;
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/fails":"../../../node_modules/core-js/internals/fails.js","../internals/is-object":"../../../node_modules/core-js/internals/is-object.js"}],"../../../node_modules/core-js/modules/es.object.is-frozen.js":[function(require,module,exports) {
var $ = require('../internals/export');
var fails = require('../internals/fails');
var isObject = require('../internals/is-object');

var nativeIsFrozen = Object.isFrozen;
var FAILS_ON_PRIMITIVES = fails(function () { nativeIsFrozen(1); });

// `Object.isFrozen` method
// https://tc39.github.io/ecma262/#sec-object.isfrozen
$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES }, {
  isFrozen: function isFrozen(it) {
    return isObject(it) ? nativeIsFrozen ? nativeIsFrozen(it) : false : true;
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/fails":"../../../node_modules/core-js/internals/fails.js","../internals/is-object":"../../../node_modules/core-js/internals/is-object.js"}],"../../../node_modules/core-js/modules/es.object.is-sealed.js":[function(require,module,exports) {
var $ = require('../internals/export');
var fails = require('../internals/fails');
var isObject = require('../internals/is-object');

var nativeIsSealed = Object.isSealed;
var FAILS_ON_PRIMITIVES = fails(function () { nativeIsSealed(1); });

// `Object.isSealed` method
// https://tc39.github.io/ecma262/#sec-object.issealed
$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES }, {
  isSealed: function isSealed(it) {
    return isObject(it) ? nativeIsSealed ? nativeIsSealed(it) : false : true;
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/fails":"../../../node_modules/core-js/internals/fails.js","../internals/is-object":"../../../node_modules/core-js/internals/is-object.js"}],"../../../node_modules/core-js/modules/es.object.keys.js":[function(require,module,exports) {
var $ = require('../internals/export');
var toObject = require('../internals/to-object');
var nativeKeys = require('../internals/object-keys');
var fails = require('../internals/fails');

var FAILS_ON_PRIMITIVES = fails(function () { nativeKeys(1); });

// `Object.keys` method
// https://tc39.github.io/ecma262/#sec-object.keys
$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES }, {
  keys: function keys(it) {
    return nativeKeys(toObject(it));
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/to-object":"../../../node_modules/core-js/internals/to-object.js","../internals/object-keys":"../../../node_modules/core-js/internals/object-keys.js","../internals/fails":"../../../node_modules/core-js/internals/fails.js"}],"../../../node_modules/core-js/modules/es.object.prevent-extensions.js":[function(require,module,exports) {
var $ = require('../internals/export');
var isObject = require('../internals/is-object');
var onFreeze = require('../internals/internal-metadata').onFreeze;
var FREEZING = require('../internals/freezing');
var fails = require('../internals/fails');

var nativePreventExtensions = Object.preventExtensions;
var FAILS_ON_PRIMITIVES = fails(function () { nativePreventExtensions(1); });

// `Object.preventExtensions` method
// https://tc39.github.io/ecma262/#sec-object.preventextensions
$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES, sham: !FREEZING }, {
  preventExtensions: function preventExtensions(it) {
    return nativePreventExtensions && isObject(it) ? nativePreventExtensions(onFreeze(it)) : it;
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/is-object":"../../../node_modules/core-js/internals/is-object.js","../internals/internal-metadata":"../../../node_modules/core-js/internals/internal-metadata.js","../internals/freezing":"../../../node_modules/core-js/internals/freezing.js","../internals/fails":"../../../node_modules/core-js/internals/fails.js"}],"../../../node_modules/core-js/modules/es.object.seal.js":[function(require,module,exports) {
var $ = require('../internals/export');
var isObject = require('../internals/is-object');
var onFreeze = require('../internals/internal-metadata').onFreeze;
var FREEZING = require('../internals/freezing');
var fails = require('../internals/fails');

var nativeSeal = Object.seal;
var FAILS_ON_PRIMITIVES = fails(function () { nativeSeal(1); });

// `Object.seal` method
// https://tc39.github.io/ecma262/#sec-object.seal
$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES, sham: !FREEZING }, {
  seal: function seal(it) {
    return nativeSeal && isObject(it) ? nativeSeal(onFreeze(it)) : it;
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/is-object":"../../../node_modules/core-js/internals/is-object.js","../internals/internal-metadata":"../../../node_modules/core-js/internals/internal-metadata.js","../internals/freezing":"../../../node_modules/core-js/internals/freezing.js","../internals/fails":"../../../node_modules/core-js/internals/fails.js"}],"../../../node_modules/core-js/internals/a-possible-prototype.js":[function(require,module,exports) {
var isObject = require('../internals/is-object');

module.exports = function (it) {
  if (!isObject(it) && it !== null) {
    throw TypeError("Can't set " + String(it) + ' as a prototype');
  } return it;
};

},{"../internals/is-object":"../../../node_modules/core-js/internals/is-object.js"}],"../../../node_modules/core-js/internals/object-set-prototype-of.js":[function(require,module,exports) {
var anObject = require('../internals/an-object');
var aPossiblePrototype = require('../internals/a-possible-prototype');

// `Object.setPrototypeOf` method
// https://tc39.github.io/ecma262/#sec-object.setprototypeof
// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
module.exports = Object.setPrototypeOf || ('__proto__' in {} ? function () {
  var CORRECT_SETTER = false;
  var test = {};
  var setter;
  try {
    setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;
    setter.call(test, []);
    CORRECT_SETTER = test instanceof Array;
  } catch (error) { /* empty */ }
  return function setPrototypeOf(O, proto) {
    anObject(O);
    aPossiblePrototype(proto);
    if (CORRECT_SETTER) setter.call(O, proto);
    else O.__proto__ = proto;
    return O;
  };
}() : undefined);

},{"../internals/an-object":"../../../node_modules/core-js/internals/an-object.js","../internals/a-possible-prototype":"../../../node_modules/core-js/internals/a-possible-prototype.js"}],"../../../node_modules/core-js/modules/es.object.set-prototype-of.js":[function(require,module,exports) {
var $ = require('../internals/export');
var setPrototypeOf = require('../internals/object-set-prototype-of');

// `Object.setPrototypeOf` method
// https://tc39.github.io/ecma262/#sec-object.setprototypeof
$({ target: 'Object', stat: true }, {
  setPrototypeOf: setPrototypeOf
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/object-set-prototype-of":"../../../node_modules/core-js/internals/object-set-prototype-of.js"}],"../../../node_modules/core-js/modules/es.object.values.js":[function(require,module,exports) {
var $ = require('../internals/export');
var $values = require('../internals/object-to-array').values;

// `Object.values` method
// https://tc39.github.io/ecma262/#sec-object.values
$({ target: 'Object', stat: true }, {
  values: function values(O) {
    return $values(O);
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/object-to-array":"../../../node_modules/core-js/internals/object-to-array.js"}],"../../../node_modules/core-js/internals/object-to-string.js":[function(require,module,exports) {
'use strict';
var classof = require('../internals/classof');
var wellKnownSymbol = require('../internals/well-known-symbol');

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var test = {};

test[TO_STRING_TAG] = 'z';

// `Object.prototype.toString` method implementation
// https://tc39.github.io/ecma262/#sec-object.prototype.tostring
module.exports = String(test) !== '[object z]' ? function toString() {
  return '[object ' + classof(this) + ']';
} : test.toString;

},{"../internals/classof":"../../../node_modules/core-js/internals/classof.js","../internals/well-known-symbol":"../../../node_modules/core-js/internals/well-known-symbol.js"}],"../../../node_modules/core-js/modules/es.object.to-string.js":[function(require,module,exports) {
var redefine = require('../internals/redefine');
var toString = require('../internals/object-to-string');

var ObjectPrototype = Object.prototype;

// `Object.prototype.toString` method
// https://tc39.github.io/ecma262/#sec-object.prototype.tostring
if (toString !== ObjectPrototype.toString) {
  redefine(ObjectPrototype, 'toString', toString, { unsafe: true });
}

},{"../internals/redefine":"../../../node_modules/core-js/internals/redefine.js","../internals/object-to-string":"../../../node_modules/core-js/internals/object-to-string.js"}],"../../../node_modules/core-js/internals/forced-object-prototype-accessors-methods.js":[function(require,module,exports) {

'use strict';
var IS_PURE = require('../internals/is-pure');
var global = require('../internals/global');
var fails = require('../internals/fails');

// Forced replacement object prototype accessors methods
module.exports = IS_PURE || !fails(function () {
  var key = Math.random();
  // In FF throws only define methods
  // eslint-disable-next-line no-undef, no-useless-call
  __defineSetter__.call(null, key, function () { /* empty */ });
  delete global[key];
});

},{"../internals/is-pure":"../../../node_modules/core-js/internals/is-pure.js","../internals/global":"../../../node_modules/core-js/internals/global.js","../internals/fails":"../../../node_modules/core-js/internals/fails.js"}],"../../../node_modules/core-js/modules/es.object.define-getter.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var DESCRIPTORS = require('../internals/descriptors');
var FORCED = require('../internals/forced-object-prototype-accessors-methods');
var toObject = require('../internals/to-object');
var aFunction = require('../internals/a-function');
var definePropertyModule = require('../internals/object-define-property');

// `Object.prototype.__defineGetter__` method
// https://tc39.github.io/ecma262/#sec-object.prototype.__defineGetter__
if (DESCRIPTORS) {
  $({ target: 'Object', proto: true, forced: FORCED }, {
    __defineGetter__: function __defineGetter__(P, getter) {
      definePropertyModule.f(toObject(this), P, { get: aFunction(getter), enumerable: true, configurable: true });
    }
  });
}

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/descriptors":"../../../node_modules/core-js/internals/descriptors.js","../internals/forced-object-prototype-accessors-methods":"../../../node_modules/core-js/internals/forced-object-prototype-accessors-methods.js","../internals/to-object":"../../../node_modules/core-js/internals/to-object.js","../internals/a-function":"../../../node_modules/core-js/internals/a-function.js","../internals/object-define-property":"../../../node_modules/core-js/internals/object-define-property.js"}],"../../../node_modules/core-js/modules/es.object.define-setter.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var DESCRIPTORS = require('../internals/descriptors');
var FORCED = require('../internals/forced-object-prototype-accessors-methods');
var toObject = require('../internals/to-object');
var aFunction = require('../internals/a-function');
var definePropertyModule = require('../internals/object-define-property');

// `Object.prototype.__defineSetter__` method
// https://tc39.github.io/ecma262/#sec-object.prototype.__defineSetter__
if (DESCRIPTORS) {
  $({ target: 'Object', proto: true, forced: FORCED }, {
    __defineSetter__: function __defineSetter__(P, setter) {
      definePropertyModule.f(toObject(this), P, { set: aFunction(setter), enumerable: true, configurable: true });
    }
  });
}

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/descriptors":"../../../node_modules/core-js/internals/descriptors.js","../internals/forced-object-prototype-accessors-methods":"../../../node_modules/core-js/internals/forced-object-prototype-accessors-methods.js","../internals/to-object":"../../../node_modules/core-js/internals/to-object.js","../internals/a-function":"../../../node_modules/core-js/internals/a-function.js","../internals/object-define-property":"../../../node_modules/core-js/internals/object-define-property.js"}],"../../../node_modules/core-js/modules/es.object.lookup-getter.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var DESCRIPTORS = require('../internals/descriptors');
var FORCED = require('../internals/forced-object-prototype-accessors-methods');
var toObject = require('../internals/to-object');
var toPrimitive = require('../internals/to-primitive');
var getPrototypeOf = require('../internals/object-get-prototype-of');
var getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;

// `Object.prototype.__lookupGetter__` method
// https://tc39.github.io/ecma262/#sec-object.prototype.__lookupGetter__
if (DESCRIPTORS) {
  $({ target: 'Object', proto: true, forced: FORCED }, {
    __lookupGetter__: function __lookupGetter__(P) {
      var O = toObject(this);
      var key = toPrimitive(P, true);
      var desc;
      do {
        if (desc = getOwnPropertyDescriptor(O, key)) return desc.get;
      } while (O = getPrototypeOf(O));
    }
  });
}

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/descriptors":"../../../node_modules/core-js/internals/descriptors.js","../internals/forced-object-prototype-accessors-methods":"../../../node_modules/core-js/internals/forced-object-prototype-accessors-methods.js","../internals/to-object":"../../../node_modules/core-js/internals/to-object.js","../internals/to-primitive":"../../../node_modules/core-js/internals/to-primitive.js","../internals/object-get-prototype-of":"../../../node_modules/core-js/internals/object-get-prototype-of.js","../internals/object-get-own-property-descriptor":"../../../node_modules/core-js/internals/object-get-own-property-descriptor.js"}],"../../../node_modules/core-js/modules/es.object.lookup-setter.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var DESCRIPTORS = require('../internals/descriptors');
var FORCED = require('../internals/forced-object-prototype-accessors-methods');
var toObject = require('../internals/to-object');
var toPrimitive = require('../internals/to-primitive');
var getPrototypeOf = require('../internals/object-get-prototype-of');
var getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;

// `Object.prototype.__lookupSetter__` method
// https://tc39.github.io/ecma262/#sec-object.prototype.__lookupSetter__
if (DESCRIPTORS) {
  $({ target: 'Object', proto: true, forced: FORCED }, {
    __lookupSetter__: function __lookupSetter__(P) {
      var O = toObject(this);
      var key = toPrimitive(P, true);
      var desc;
      do {
        if (desc = getOwnPropertyDescriptor(O, key)) return desc.set;
      } while (O = getPrototypeOf(O));
    }
  });
}

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/descriptors":"../../../node_modules/core-js/internals/descriptors.js","../internals/forced-object-prototype-accessors-methods":"../../../node_modules/core-js/internals/forced-object-prototype-accessors-methods.js","../internals/to-object":"../../../node_modules/core-js/internals/to-object.js","../internals/to-primitive":"../../../node_modules/core-js/internals/to-primitive.js","../internals/object-get-prototype-of":"../../../node_modules/core-js/internals/object-get-prototype-of.js","../internals/object-get-own-property-descriptor":"../../../node_modules/core-js/internals/object-get-own-property-descriptor.js"}],"../../../node_modules/core-js/internals/function-bind.js":[function(require,module,exports) {
'use strict';
var aFunction = require('../internals/a-function');
var isObject = require('../internals/is-object');

var slice = [].slice;
var factories = {};

var construct = function (C, argsLength, args) {
  if (!(argsLength in factories)) {
    for (var list = [], i = 0; i < argsLength; i++) list[i] = 'a[' + i + ']';
    // eslint-disable-next-line no-new-func
    factories[argsLength] = Function('C,a', 'return new C(' + list.join(',') + ')');
  } return factories[argsLength](C, args);
};

// `Function.prototype.bind` method implementation
// https://tc39.github.io/ecma262/#sec-function.prototype.bind
module.exports = Function.bind || function bind(that /* , ...args */) {
  var fn = aFunction(this);
  var partArgs = slice.call(arguments, 1);
  var boundFunction = function bound(/* args... */) {
    var args = partArgs.concat(slice.call(arguments));
    return this instanceof boundFunction ? construct(fn, args.length, args) : fn.apply(that, args);
  };
  if (isObject(fn.prototype)) boundFunction.prototype = fn.prototype;
  return boundFunction;
};

},{"../internals/a-function":"../../../node_modules/core-js/internals/a-function.js","../internals/is-object":"../../../node_modules/core-js/internals/is-object.js"}],"../../../node_modules/core-js/modules/es.function.bind.js":[function(require,module,exports) {
var $ = require('../internals/export');
var bind = require('../internals/function-bind');

// `Function.prototype.bind` method
// https://tc39.github.io/ecma262/#sec-function.prototype.bind
$({ target: 'Function', proto: true }, {
  bind: bind
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/function-bind":"../../../node_modules/core-js/internals/function-bind.js"}],"../../../node_modules/core-js/modules/es.function.name.js":[function(require,module,exports) {
var DESCRIPTORS = require('../internals/descriptors');
var defineProperty = require('../internals/object-define-property').f;

var FunctionPrototype = Function.prototype;
var FunctionPrototypeToString = FunctionPrototype.toString;
var nameRE = /^\s*function ([^ (]*)/;
var NAME = 'name';

// Function instances `.name` property
// https://tc39.github.io/ecma262/#sec-function-instances-name
if (DESCRIPTORS && !(NAME in FunctionPrototype)) {
  defineProperty(FunctionPrototype, NAME, {
    configurable: true,
    get: function () {
      try {
        return FunctionPrototypeToString.call(this).match(nameRE)[1];
      } catch (error) {
        return '';
      }
    }
  });
}

},{"../internals/descriptors":"../../../node_modules/core-js/internals/descriptors.js","../internals/object-define-property":"../../../node_modules/core-js/internals/object-define-property.js"}],"../../../node_modules/core-js/modules/es.function.has-instance.js":[function(require,module,exports) {
'use strict';
var isObject = require('../internals/is-object');
var definePropertyModule = require('../internals/object-define-property');
var getPrototypeOf = require('../internals/object-get-prototype-of');
var wellKnownSymbol = require('../internals/well-known-symbol');

var HAS_INSTANCE = wellKnownSymbol('hasInstance');
var FunctionPrototype = Function.prototype;

// `Function.prototype[@@hasInstance]` method
// https://tc39.github.io/ecma262/#sec-function.prototype-@@hasinstance
if (!(HAS_INSTANCE in FunctionPrototype)) {
  definePropertyModule.f(FunctionPrototype, HAS_INSTANCE, { value: function (O) {
    if (typeof this != 'function' || !isObject(O)) return false;
    if (!isObject(this.prototype)) return O instanceof this;
    // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
    while (O = getPrototypeOf(O)) if (this.prototype === O) return true;
    return false;
  } });
}

},{"../internals/is-object":"../../../node_modules/core-js/internals/is-object.js","../internals/object-define-property":"../../../node_modules/core-js/internals/object-define-property.js","../internals/object-get-prototype-of":"../../../node_modules/core-js/internals/object-get-prototype-of.js","../internals/well-known-symbol":"../../../node_modules/core-js/internals/well-known-symbol.js"}],"../../../node_modules/core-js/internals/array-from.js":[function(require,module,exports) {
'use strict';
var bind = require('../internals/bind-context');
var toObject = require('../internals/to-object');
var callWithSafeIterationClosing = require('../internals/call-with-safe-iteration-closing');
var isArrayIteratorMethod = require('../internals/is-array-iterator-method');
var toLength = require('../internals/to-length');
var createProperty = require('../internals/create-property');
var getIteratorMethod = require('../internals/get-iterator-method');

// `Array.from` method implementation
// https://tc39.github.io/ecma262/#sec-array.from
module.exports = function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
  var O = toObject(arrayLike);
  var C = typeof this == 'function' ? this : Array;
  var argumentsLength = arguments.length;
  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
  var mapping = mapfn !== undefined;
  var index = 0;
  var iteratorMethod = getIteratorMethod(O);
  var length, result, step, iterator;
  if (mapping) mapfn = bind(mapfn, argumentsLength > 2 ? arguments[2] : undefined, 2);
  // if the target is not iterable or it's an array with the default iterator - use a simple case
  if (iteratorMethod != undefined && !(C == Array && isArrayIteratorMethod(iteratorMethod))) {
    iterator = iteratorMethod.call(O);
    result = new C();
    for (;!(step = iterator.next()).done; index++) {
      createProperty(result, index, mapping
        ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true)
        : step.value
      );
    }
  } else {
    length = toLength(O.length);
    result = new C(length);
    for (;length > index; index++) {
      createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
    }
  }
  result.length = index;
  return result;
};

},{"../internals/bind-context":"../../../node_modules/core-js/internals/bind-context.js","../internals/to-object":"../../../node_modules/core-js/internals/to-object.js","../internals/call-with-safe-iteration-closing":"../../../node_modules/core-js/internals/call-with-safe-iteration-closing.js","../internals/is-array-iterator-method":"../../../node_modules/core-js/internals/is-array-iterator-method.js","../internals/to-length":"../../../node_modules/core-js/internals/to-length.js","../internals/create-property":"../../../node_modules/core-js/internals/create-property.js","../internals/get-iterator-method":"../../../node_modules/core-js/internals/get-iterator-method.js"}],"../../../node_modules/core-js/internals/check-correctness-of-iteration.js":[function(require,module,exports) {
var wellKnownSymbol = require('../internals/well-known-symbol');

var ITERATOR = wellKnownSymbol('iterator');
var SAFE_CLOSING = false;

try {
  var called = 0;
  var iteratorWithReturn = {
    next: function () {
      return { done: !!called++ };
    },
    'return': function () {
      SAFE_CLOSING = true;
    }
  };
  iteratorWithReturn[ITERATOR] = function () {
    return this;
  };
  // eslint-disable-next-line no-throw-literal
  Array.from(iteratorWithReturn, function () { throw 2; });
} catch (error) { /* empty */ }

module.exports = function (exec, SKIP_CLOSING) {
  if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
  var ITERATION_SUPPORT = false;
  try {
    var object = {};
    object[ITERATOR] = function () {
      return {
        next: function () {
          return { done: ITERATION_SUPPORT = true };
        }
      };
    };
    exec(object);
  } catch (error) { /* empty */ }
  return ITERATION_SUPPORT;
};

},{"../internals/well-known-symbol":"../../../node_modules/core-js/internals/well-known-symbol.js"}],"../../../node_modules/core-js/modules/es.array.from.js":[function(require,module,exports) {
var $ = require('../internals/export');
var from = require('../internals/array-from');
var checkCorrectnessOfIteration = require('../internals/check-correctness-of-iteration');

var INCORRECT_ITERATION = !checkCorrectnessOfIteration(function (iterable) {
  Array.from(iterable);
});

// `Array.from` method
// https://tc39.github.io/ecma262/#sec-array.from
$({ target: 'Array', stat: true, forced: INCORRECT_ITERATION }, {
  from: from
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/array-from":"../../../node_modules/core-js/internals/array-from.js","../internals/check-correctness-of-iteration":"../../../node_modules/core-js/internals/check-correctness-of-iteration.js"}],"../../../node_modules/core-js/modules/es.array.is-array.js":[function(require,module,exports) {
var $ = require('../internals/export');
var isArray = require('../internals/is-array');

// `Array.isArray` method
// https://tc39.github.io/ecma262/#sec-array.isarray
$({ target: 'Array', stat: true }, {
  isArray: isArray
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/is-array":"../../../node_modules/core-js/internals/is-array.js"}],"../../../node_modules/core-js/modules/es.array.of.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var fails = require('../internals/fails');
var createProperty = require('../internals/create-property');

var ISNT_GENERIC = fails(function () {
  function F() { /* empty */ }
  return !(Array.of.call(F) instanceof F);
});

// `Array.of` method
// https://tc39.github.io/ecma262/#sec-array.of
// WebKit Array.of isn't generic
$({ target: 'Array', stat: true, forced: ISNT_GENERIC }, {
  of: function of(/* ...args */) {
    var index = 0;
    var argumentsLength = arguments.length;
    var result = new (typeof this == 'function' ? this : Array)(argumentsLength);
    while (argumentsLength > index) createProperty(result, index, arguments[index++]);
    result.length = argumentsLength;
    return result;
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/fails":"../../../node_modules/core-js/internals/fails.js","../internals/create-property":"../../../node_modules/core-js/internals/create-property.js"}],"../../../node_modules/core-js/internals/array-method-has-species-support.js":[function(require,module,exports) {
var fails = require('../internals/fails');
var wellKnownSymbol = require('../internals/well-known-symbol');

var SPECIES = wellKnownSymbol('species');

module.exports = function (METHOD_NAME) {
  return !fails(function () {
    var array = [];
    var constructor = array.constructor = {};
    constructor[SPECIES] = function () {
      return { foo: 1 };
    };
    return array[METHOD_NAME](Boolean).foo !== 1;
  });
};

},{"../internals/fails":"../../../node_modules/core-js/internals/fails.js","../internals/well-known-symbol":"../../../node_modules/core-js/internals/well-known-symbol.js"}],"../../../node_modules/core-js/modules/es.array.concat.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var fails = require('../internals/fails');
var isArray = require('../internals/is-array');
var isObject = require('../internals/is-object');
var toObject = require('../internals/to-object');
var toLength = require('../internals/to-length');
var createProperty = require('../internals/create-property');
var arraySpeciesCreate = require('../internals/array-species-create');
var arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');
var wellKnownSymbol = require('../internals/well-known-symbol');

var IS_CONCAT_SPREADABLE = wellKnownSymbol('isConcatSpreadable');
var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
var MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded';

var IS_CONCAT_SPREADABLE_SUPPORT = !fails(function () {
  var array = [];
  array[IS_CONCAT_SPREADABLE] = false;
  return array.concat()[0] !== array;
});

var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('concat');

var isConcatSpreadable = function (O) {
  if (!isObject(O)) return false;
  var spreadable = O[IS_CONCAT_SPREADABLE];
  return spreadable !== undefined ? !!spreadable : isArray(O);
};

var FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;

// `Array.prototype.concat` method
// https://tc39.github.io/ecma262/#sec-array.prototype.concat
// with adding support of @@isConcatSpreadable and @@species
$({ target: 'Array', proto: true, forced: FORCED }, {
  concat: function concat(arg) { // eslint-disable-line no-unused-vars
    var O = toObject(this);
    var A = arraySpeciesCreate(O, 0);
    var n = 0;
    var i, k, length, len, E;
    for (i = -1, length = arguments.length; i < length; i++) {
      E = i === -1 ? O : arguments[i];
      if (isConcatSpreadable(E)) {
        len = toLength(E.length);
        if (n + len > MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
        for (k = 0; k < len; k++, n++) if (k in E) createProperty(A, n, E[k]);
      } else {
        if (n >= MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
        createProperty(A, n++, E);
      }
    }
    A.length = n;
    return A;
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/fails":"../../../node_modules/core-js/internals/fails.js","../internals/is-array":"../../../node_modules/core-js/internals/is-array.js","../internals/is-object":"../../../node_modules/core-js/internals/is-object.js","../internals/to-object":"../../../node_modules/core-js/internals/to-object.js","../internals/to-length":"../../../node_modules/core-js/internals/to-length.js","../internals/create-property":"../../../node_modules/core-js/internals/create-property.js","../internals/array-species-create":"../../../node_modules/core-js/internals/array-species-create.js","../internals/array-method-has-species-support":"../../../node_modules/core-js/internals/array-method-has-species-support.js","../internals/well-known-symbol":"../../../node_modules/core-js/internals/well-known-symbol.js"}],"../../../node_modules/core-js/internals/array-copy-within.js":[function(require,module,exports) {
'use strict';
var toObject = require('../internals/to-object');
var toAbsoluteIndex = require('../internals/to-absolute-index');
var toLength = require('../internals/to-length');

var min = Math.min;

// `Array.prototype.copyWithin` method implementation
// https://tc39.github.io/ecma262/#sec-array.prototype.copywithin
module.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
  var O = toObject(this);
  var len = toLength(O.length);
  var to = toAbsoluteIndex(target, len);
  var from = toAbsoluteIndex(start, len);
  var end = arguments.length > 2 ? arguments[2] : undefined;
  var count = min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
  var inc = 1;
  if (from < to && to < from + count) {
    inc = -1;
    from += count - 1;
    to += count - 1;
  }
  while (count-- > 0) {
    if (from in O) O[to] = O[from];
    else delete O[to];
    to += inc;
    from += inc;
  } return O;
};

},{"../internals/to-object":"../../../node_modules/core-js/internals/to-object.js","../internals/to-absolute-index":"../../../node_modules/core-js/internals/to-absolute-index.js","../internals/to-length":"../../../node_modules/core-js/internals/to-length.js"}],"../../../node_modules/core-js/internals/add-to-unscopables.js":[function(require,module,exports) {
var wellKnownSymbol = require('../internals/well-known-symbol');
var create = require('../internals/object-create');
var hide = require('../internals/hide');

var UNSCOPABLES = wellKnownSymbol('unscopables');
var ArrayPrototype = Array.prototype;

// Array.prototype[@@unscopables]
// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
if (ArrayPrototype[UNSCOPABLES] == undefined) {
  hide(ArrayPrototype, UNSCOPABLES, create(null));
}

// add a key to Array.prototype[@@unscopables]
module.exports = function (key) {
  ArrayPrototype[UNSCOPABLES][key] = true;
};

},{"../internals/well-known-symbol":"../../../node_modules/core-js/internals/well-known-symbol.js","../internals/object-create":"../../../node_modules/core-js/internals/object-create.js","../internals/hide":"../../../node_modules/core-js/internals/hide.js"}],"../../../node_modules/core-js/modules/es.array.copy-within.js":[function(require,module,exports) {
var $ = require('../internals/export');
var copyWithin = require('../internals/array-copy-within');
var addToUnscopables = require('../internals/add-to-unscopables');

// `Array.prototype.copyWithin` method
// https://tc39.github.io/ecma262/#sec-array.prototype.copywithin
$({ target: 'Array', proto: true }, {
  copyWithin: copyWithin
});

// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('copyWithin');

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/array-copy-within":"../../../node_modules/core-js/internals/array-copy-within.js","../internals/add-to-unscopables":"../../../node_modules/core-js/internals/add-to-unscopables.js"}],"../../../node_modules/core-js/internals/sloppy-array-method.js":[function(require,module,exports) {
'use strict';
var fails = require('../internals/fails');

module.exports = function (METHOD_NAME, argument) {
  var method = [][METHOD_NAME];
  return !method || !fails(function () {
    // eslint-disable-next-line no-useless-call,no-throw-literal
    method.call(null, argument || function () { throw 1; }, 1);
  });
};

},{"../internals/fails":"../../../node_modules/core-js/internals/fails.js"}],"../../../node_modules/core-js/modules/es.array.every.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var $every = require('../internals/array-iteration').every;
var sloppyArrayMethod = require('../internals/sloppy-array-method');

// `Array.prototype.every` method
// https://tc39.github.io/ecma262/#sec-array.prototype.every
$({ target: 'Array', proto: true, forced: sloppyArrayMethod('every') }, {
  every: function every(callbackfn /* , thisArg */) {
    return $every(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/array-iteration":"../../../node_modules/core-js/internals/array-iteration.js","../internals/sloppy-array-method":"../../../node_modules/core-js/internals/sloppy-array-method.js"}],"../../../node_modules/core-js/internals/array-fill.js":[function(require,module,exports) {
'use strict';
var toObject = require('../internals/to-object');
var toAbsoluteIndex = require('../internals/to-absolute-index');
var toLength = require('../internals/to-length');

// `Array.prototype.fill` method implementation
// https://tc39.github.io/ecma262/#sec-array.prototype.fill
module.exports = function fill(value /* , start = 0, end = @length */) {
  var O = toObject(this);
  var length = toLength(O.length);
  var argumentsLength = arguments.length;
  var index = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : undefined, length);
  var end = argumentsLength > 2 ? arguments[2] : undefined;
  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
  while (endPos > index) O[index++] = value;
  return O;
};

},{"../internals/to-object":"../../../node_modules/core-js/internals/to-object.js","../internals/to-absolute-index":"../../../node_modules/core-js/internals/to-absolute-index.js","../internals/to-length":"../../../node_modules/core-js/internals/to-length.js"}],"../../../node_modules/core-js/modules/es.array.fill.js":[function(require,module,exports) {
var $ = require('../internals/export');
var fill = require('../internals/array-fill');
var addToUnscopables = require('../internals/add-to-unscopables');

// `Array.prototype.fill` method
// https://tc39.github.io/ecma262/#sec-array.prototype.fill
$({ target: 'Array', proto: true }, {
  fill: fill
});

// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('fill');

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/array-fill":"../../../node_modules/core-js/internals/array-fill.js","../internals/add-to-unscopables":"../../../node_modules/core-js/internals/add-to-unscopables.js"}],"../../../node_modules/core-js/modules/es.array.filter.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var $filter = require('../internals/array-iteration').filter;
var arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');

// `Array.prototype.filter` method
// https://tc39.github.io/ecma262/#sec-array.prototype.filter
// with adding support of @@species
$({ target: 'Array', proto: true, forced: !arrayMethodHasSpeciesSupport('filter') }, {
  filter: function filter(callbackfn /* , thisArg */) {
    return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/array-iteration":"../../../node_modules/core-js/internals/array-iteration.js","../internals/array-method-has-species-support":"../../../node_modules/core-js/internals/array-method-has-species-support.js"}],"../../../node_modules/core-js/modules/es.array.find.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var $find = require('../internals/array-iteration').find;
var addToUnscopables = require('../internals/add-to-unscopables');

var FIND = 'find';
var SKIPS_HOLES = true;

// Shouldn't skip holes
if (FIND in []) Array(1)[FIND](function () { SKIPS_HOLES = false; });

// `Array.prototype.find` method
// https://tc39.github.io/ecma262/#sec-array.prototype.find
$({ target: 'Array', proto: true, forced: SKIPS_HOLES }, {
  find: function find(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});

// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables(FIND);

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/array-iteration":"../../../node_modules/core-js/internals/array-iteration.js","../internals/add-to-unscopables":"../../../node_modules/core-js/internals/add-to-unscopables.js"}],"../../../node_modules/core-js/modules/es.array.find-index.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var $findIndex = require('../internals/array-iteration').findIndex;
var addToUnscopables = require('../internals/add-to-unscopables');

var FIND_INDEX = 'findIndex';
var SKIPS_HOLES = true;

// Shouldn't skip holes
if (FIND_INDEX in []) Array(1)[FIND_INDEX](function () { SKIPS_HOLES = false; });

// `Array.prototype.findIndex` method
// https://tc39.github.io/ecma262/#sec-array.prototype.findindex
$({ target: 'Array', proto: true, forced: SKIPS_HOLES }, {
  findIndex: function findIndex(callbackfn /* , that = undefined */) {
    return $findIndex(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});

// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables(FIND_INDEX);

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/array-iteration":"../../../node_modules/core-js/internals/array-iteration.js","../internals/add-to-unscopables":"../../../node_modules/core-js/internals/add-to-unscopables.js"}],"../../../node_modules/core-js/internals/flatten-into-array.js":[function(require,module,exports) {
'use strict';
var isArray = require('../internals/is-array');
var toLength = require('../internals/to-length');
var bind = require('../internals/bind-context');

// `FlattenIntoArray` abstract operation
// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
var flattenIntoArray = function (target, original, source, sourceLen, start, depth, mapper, thisArg) {
  var targetIndex = start;
  var sourceIndex = 0;
  var mapFn = mapper ? bind(mapper, thisArg, 3) : false;
  var element;

  while (sourceIndex < sourceLen) {
    if (sourceIndex in source) {
      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];

      if (depth > 0 && isArray(element)) {
        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
      } else {
        if (targetIndex >= 0x1FFFFFFFFFFFFF) throw TypeError('Exceed the acceptable array length');
        target[targetIndex] = element;
      }

      targetIndex++;
    }
    sourceIndex++;
  }
  return targetIndex;
};

module.exports = flattenIntoArray;

},{"../internals/is-array":"../../../node_modules/core-js/internals/is-array.js","../internals/to-length":"../../../node_modules/core-js/internals/to-length.js","../internals/bind-context":"../../../node_modules/core-js/internals/bind-context.js"}],"../../../node_modules/core-js/modules/es.array.flat.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var flattenIntoArray = require('../internals/flatten-into-array');
var toObject = require('../internals/to-object');
var toLength = require('../internals/to-length');
var toInteger = require('../internals/to-integer');
var arraySpeciesCreate = require('../internals/array-species-create');

// `Array.prototype.flat` method
// https://github.com/tc39/proposal-flatMap
$({ target: 'Array', proto: true }, {
  flat: function flat(/* depthArg = 1 */) {
    var depthArg = arguments.length ? arguments[0] : undefined;
    var O = toObject(this);
    var sourceLen = toLength(O.length);
    var A = arraySpeciesCreate(O, 0);
    A.length = flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));
    return A;
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/flatten-into-array":"../../../node_modules/core-js/internals/flatten-into-array.js","../internals/to-object":"../../../node_modules/core-js/internals/to-object.js","../internals/to-length":"../../../node_modules/core-js/internals/to-length.js","../internals/to-integer":"../../../node_modules/core-js/internals/to-integer.js","../internals/array-species-create":"../../../node_modules/core-js/internals/array-species-create.js"}],"../../../node_modules/core-js/modules/es.array.flat-map.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var flattenIntoArray = require('../internals/flatten-into-array');
var toObject = require('../internals/to-object');
var toLength = require('../internals/to-length');
var aFunction = require('../internals/a-function');
var arraySpeciesCreate = require('../internals/array-species-create');

// `Array.prototype.flatMap` method
// https://github.com/tc39/proposal-flatMap
$({ target: 'Array', proto: true }, {
  flatMap: function flatMap(callbackfn /* , thisArg */) {
    var O = toObject(this);
    var sourceLen = toLength(O.length);
    var A;
    aFunction(callbackfn);
    A = arraySpeciesCreate(O, 0);
    A.length = flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    return A;
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/flatten-into-array":"../../../node_modules/core-js/internals/flatten-into-array.js","../internals/to-object":"../../../node_modules/core-js/internals/to-object.js","../internals/to-length":"../../../node_modules/core-js/internals/to-length.js","../internals/a-function":"../../../node_modules/core-js/internals/a-function.js","../internals/array-species-create":"../../../node_modules/core-js/internals/array-species-create.js"}],"../../../node_modules/core-js/internals/array-for-each.js":[function(require,module,exports) {
'use strict';
var $forEach = require('../internals/array-iteration').forEach;
var sloppyArrayMethod = require('../internals/sloppy-array-method');

// `Array.prototype.forEach` method implementation
// https://tc39.github.io/ecma262/#sec-array.prototype.foreach
module.exports = sloppyArrayMethod('forEach') ? function forEach(callbackfn /* , thisArg */) {
  return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
} : [].forEach;

},{"../internals/array-iteration":"../../../node_modules/core-js/internals/array-iteration.js","../internals/sloppy-array-method":"../../../node_modules/core-js/internals/sloppy-array-method.js"}],"../../../node_modules/core-js/modules/es.array.for-each.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var forEach = require('../internals/array-for-each');

// `Array.prototype.forEach` method
// https://tc39.github.io/ecma262/#sec-array.prototype.foreach
$({ target: 'Array', proto: true, forced: [].forEach != forEach }, {
  forEach: forEach
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/array-for-each":"../../../node_modules/core-js/internals/array-for-each.js"}],"../../../node_modules/core-js/modules/es.array.includes.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var $includes = require('../internals/array-includes').includes;
var addToUnscopables = require('../internals/add-to-unscopables');

// `Array.prototype.includes` method
// https://tc39.github.io/ecma262/#sec-array.prototype.includes
$({ target: 'Array', proto: true }, {
  includes: function includes(el /* , fromIndex = 0 */) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('includes');

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/array-includes":"../../../node_modules/core-js/internals/array-includes.js","../internals/add-to-unscopables":"../../../node_modules/core-js/internals/add-to-unscopables.js"}],"../../../node_modules/core-js/modules/es.array.index-of.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var $indexOf = require('../internals/array-includes').indexOf;
var sloppyArrayMethod = require('../internals/sloppy-array-method');

var nativeIndexOf = [].indexOf;

var NEGATIVE_ZERO = !!nativeIndexOf && 1 / [1].indexOf(1, -0) < 0;
var SLOPPY_METHOD = sloppyArrayMethod('indexOf');

// `Array.prototype.indexOf` method
// https://tc39.github.io/ecma262/#sec-array.prototype.indexof
$({ target: 'Array', proto: true, forced: NEGATIVE_ZERO || SLOPPY_METHOD }, {
  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
    return NEGATIVE_ZERO
      // convert -0 to +0
      ? nativeIndexOf.apply(this, arguments) || 0
      : $indexOf(this, searchElement, arguments.length > 1 ? arguments[1] : undefined);
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/array-includes":"../../../node_modules/core-js/internals/array-includes.js","../internals/sloppy-array-method":"../../../node_modules/core-js/internals/sloppy-array-method.js"}],"../../../node_modules/core-js/modules/es.array.join.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var IndexedObject = require('../internals/indexed-object');
var toIndexedObject = require('../internals/to-indexed-object');
var sloppyArrayMethod = require('../internals/sloppy-array-method');

var nativeJoin = [].join;

var ES3_STRINGS = IndexedObject != Object;
var SLOPPY_METHOD = sloppyArrayMethod('join', ',');

// `Array.prototype.join` method
// https://tc39.github.io/ecma262/#sec-array.prototype.join
$({ target: 'Array', proto: true, forced: ES3_STRINGS || SLOPPY_METHOD }, {
  join: function join(separator) {
    return nativeJoin.call(toIndexedObject(this), separator === undefined ? ',' : separator);
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/indexed-object":"../../../node_modules/core-js/internals/indexed-object.js","../internals/to-indexed-object":"../../../node_modules/core-js/internals/to-indexed-object.js","../internals/sloppy-array-method":"../../../node_modules/core-js/internals/sloppy-array-method.js"}],"../../../node_modules/core-js/internals/array-last-index-of.js":[function(require,module,exports) {
'use strict';
var toIndexedObject = require('../internals/to-indexed-object');
var toInteger = require('../internals/to-integer');
var toLength = require('../internals/to-length');
var sloppyArrayMethod = require('../internals/sloppy-array-method');

var min = Math.min;
var nativeLastIndexOf = [].lastIndexOf;
var NEGATIVE_ZERO = !!nativeLastIndexOf && 1 / [1].lastIndexOf(1, -0) < 0;
var SLOPPY_METHOD = sloppyArrayMethod('lastIndexOf');

// `Array.prototype.lastIndexOf` method implementation
// https://tc39.github.io/ecma262/#sec-array.prototype.lastindexof
module.exports = (NEGATIVE_ZERO || SLOPPY_METHOD) ? function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
  // convert -0 to +0
  if (NEGATIVE_ZERO) return nativeLastIndexOf.apply(this, arguments) || 0;
  var O = toIndexedObject(this);
  var length = toLength(O.length);
  var index = length - 1;
  if (arguments.length > 1) index = min(index, toInteger(arguments[1]));
  if (index < 0) index = length + index;
  for (;index >= 0; index--) if (index in O && O[index] === searchElement) return index || 0;
  return -1;
} : nativeLastIndexOf;

},{"../internals/to-indexed-object":"../../../node_modules/core-js/internals/to-indexed-object.js","../internals/to-integer":"../../../node_modules/core-js/internals/to-integer.js","../internals/to-length":"../../../node_modules/core-js/internals/to-length.js","../internals/sloppy-array-method":"../../../node_modules/core-js/internals/sloppy-array-method.js"}],"../../../node_modules/core-js/modules/es.array.last-index-of.js":[function(require,module,exports) {
var $ = require('../internals/export');
var lastIndexOf = require('../internals/array-last-index-of');

// `Array.prototype.lastIndexOf` method
// https://tc39.github.io/ecma262/#sec-array.prototype.lastindexof
$({ target: 'Array', proto: true, forced: lastIndexOf !== [].lastIndexOf }, {
  lastIndexOf: lastIndexOf
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/array-last-index-of":"../../../node_modules/core-js/internals/array-last-index-of.js"}],"../../../node_modules/core-js/modules/es.array.map.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var $map = require('../internals/array-iteration').map;
var arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');

// `Array.prototype.map` method
// https://tc39.github.io/ecma262/#sec-array.prototype.map
// with adding support of @@species
$({ target: 'Array', proto: true, forced: !arrayMethodHasSpeciesSupport('map') }, {
  map: function map(callbackfn /* , thisArg */) {
    return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/array-iteration":"../../../node_modules/core-js/internals/array-iteration.js","../internals/array-method-has-species-support":"../../../node_modules/core-js/internals/array-method-has-species-support.js"}],"../../../node_modules/core-js/internals/array-reduce.js":[function(require,module,exports) {
var aFunction = require('../internals/a-function');
var toObject = require('../internals/to-object');
var IndexedObject = require('../internals/indexed-object');
var toLength = require('../internals/to-length');

// `Array.prototype.{ reduce, reduceRight }` methods implementation
var createMethod = function (IS_RIGHT) {
  return function (that, callbackfn, argumentsLength, memo) {
    aFunction(callbackfn);
    var O = toObject(that);
    var self = IndexedObject(O);
    var length = toLength(O.length);
    var index = IS_RIGHT ? length - 1 : 0;
    var i = IS_RIGHT ? -1 : 1;
    if (argumentsLength < 2) while (true) {
      if (index in self) {
        memo = self[index];
        index += i;
        break;
      }
      index += i;
      if (IS_RIGHT ? index < 0 : length <= index) {
        throw TypeError('Reduce of empty array with no initial value');
      }
    }
    for (;IS_RIGHT ? index >= 0 : length > index; index += i) if (index in self) {
      memo = callbackfn(memo, self[index], index, O);
    }
    return memo;
  };
};

module.exports = {
  // `Array.prototype.reduce` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.reduce
  left: createMethod(false),
  // `Array.prototype.reduceRight` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.reduceright
  right: createMethod(true)
};

},{"../internals/a-function":"../../../node_modules/core-js/internals/a-function.js","../internals/to-object":"../../../node_modules/core-js/internals/to-object.js","../internals/indexed-object":"../../../node_modules/core-js/internals/indexed-object.js","../internals/to-length":"../../../node_modules/core-js/internals/to-length.js"}],"../../../node_modules/core-js/modules/es.array.reduce.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var $reduce = require('../internals/array-reduce').left;
var sloppyArrayMethod = require('../internals/sloppy-array-method');

// `Array.prototype.reduce` method
// https://tc39.github.io/ecma262/#sec-array.prototype.reduce
$({ target: 'Array', proto: true, forced: sloppyArrayMethod('reduce') }, {
  reduce: function reduce(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/array-reduce":"../../../node_modules/core-js/internals/array-reduce.js","../internals/sloppy-array-method":"../../../node_modules/core-js/internals/sloppy-array-method.js"}],"../../../node_modules/core-js/modules/es.array.reduce-right.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var $reduceRight = require('../internals/array-reduce').right;
var sloppyArrayMethod = require('../internals/sloppy-array-method');

// `Array.prototype.reduceRight` method
// https://tc39.github.io/ecma262/#sec-array.prototype.reduceright
$({ target: 'Array', proto: true, forced: sloppyArrayMethod('reduceRight') }, {
  reduceRight: function reduceRight(callbackfn /* , initialValue */) {
    return $reduceRight(this, callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/array-reduce":"../../../node_modules/core-js/internals/array-reduce.js","../internals/sloppy-array-method":"../../../node_modules/core-js/internals/sloppy-array-method.js"}],"../../../node_modules/core-js/modules/es.array.reverse.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var isArray = require('../internals/is-array');

var nativeReverse = [].reverse;
var test = [1, 2];

// `Array.prototype.reverse` method
// https://tc39.github.io/ecma262/#sec-array.prototype.reverse
// fix for Safari 12.0 bug
// https://bugs.webkit.org/show_bug.cgi?id=188794
$({ target: 'Array', proto: true, forced: String(test) === String(test.reverse()) }, {
  reverse: function reverse() {
    if (isArray(this)) this.length = this.length;
    return nativeReverse.call(this);
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/is-array":"../../../node_modules/core-js/internals/is-array.js"}],"../../../node_modules/core-js/modules/es.array.slice.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var isObject = require('../internals/is-object');
var isArray = require('../internals/is-array');
var toAbsoluteIndex = require('../internals/to-absolute-index');
var toLength = require('../internals/to-length');
var toIndexedObject = require('../internals/to-indexed-object');
var createProperty = require('../internals/create-property');
var arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');
var wellKnownSymbol = require('../internals/well-known-symbol');

var SPECIES = wellKnownSymbol('species');
var nativeSlice = [].slice;
var max = Math.max;

// `Array.prototype.slice` method
// https://tc39.github.io/ecma262/#sec-array.prototype.slice
// fallback for not array-like ES3 strings and DOM objects
$({ target: 'Array', proto: true, forced: !arrayMethodHasSpeciesSupport('slice') }, {
  slice: function slice(start, end) {
    var O = toIndexedObject(this);
    var length = toLength(O.length);
    var k = toAbsoluteIndex(start, length);
    var fin = toAbsoluteIndex(end === undefined ? length : end, length);
    // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible
    var Constructor, result, n;
    if (isArray(O)) {
      Constructor = O.constructor;
      // cross-realm fallback
      if (typeof Constructor == 'function' && (Constructor === Array || isArray(Constructor.prototype))) {
        Constructor = undefined;
      } else if (isObject(Constructor)) {
        Constructor = Constructor[SPECIES];
        if (Constructor === null) Constructor = undefined;
      }
      if (Constructor === Array || Constructor === undefined) {
        return nativeSlice.call(O, k, fin);
      }
    }
    result = new (Constructor === undefined ? Array : Constructor)(max(fin - k, 0));
    for (n = 0; k < fin; k++, n++) if (k in O) createProperty(result, n, O[k]);
    result.length = n;
    return result;
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/is-object":"../../../node_modules/core-js/internals/is-object.js","../internals/is-array":"../../../node_modules/core-js/internals/is-array.js","../internals/to-absolute-index":"../../../node_modules/core-js/internals/to-absolute-index.js","../internals/to-length":"../../../node_modules/core-js/internals/to-length.js","../internals/to-indexed-object":"../../../node_modules/core-js/internals/to-indexed-object.js","../internals/create-property":"../../../node_modules/core-js/internals/create-property.js","../internals/array-method-has-species-support":"../../../node_modules/core-js/internals/array-method-has-species-support.js","../internals/well-known-symbol":"../../../node_modules/core-js/internals/well-known-symbol.js"}],"../../../node_modules/core-js/modules/es.array.some.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var $some = require('../internals/array-iteration').some;
var sloppyArrayMethod = require('../internals/sloppy-array-method');

// `Array.prototype.some` method
// https://tc39.github.io/ecma262/#sec-array.prototype.some
$({ target: 'Array', proto: true, forced: sloppyArrayMethod('some') }, {
  some: function some(callbackfn /* , thisArg */) {
    return $some(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/array-iteration":"../../../node_modules/core-js/internals/array-iteration.js","../internals/sloppy-array-method":"../../../node_modules/core-js/internals/sloppy-array-method.js"}],"../../../node_modules/core-js/modules/es.array.sort.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var aFunction = require('../internals/a-function');
var toObject = require('../internals/to-object');
var fails = require('../internals/fails');
var sloppyArrayMethod = require('../internals/sloppy-array-method');

var nativeSort = [].sort;
var test = [1, 2, 3];

// IE8-
var FAILS_ON_UNDEFINED = fails(function () {
  test.sort(undefined);
});
// V8 bug
var FAILS_ON_NULL = fails(function () {
  test.sort(null);
});
// Old WebKit
var SLOPPY_METHOD = sloppyArrayMethod('sort');

var FORCED = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || SLOPPY_METHOD;

// `Array.prototype.sort` method
// https://tc39.github.io/ecma262/#sec-array.prototype.sort
$({ target: 'Array', proto: true, forced: FORCED }, {
  sort: function sort(comparefn) {
    return comparefn === undefined
      ? nativeSort.call(toObject(this))
      : nativeSort.call(toObject(this), aFunction(comparefn));
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/a-function":"../../../node_modules/core-js/internals/a-function.js","../internals/to-object":"../../../node_modules/core-js/internals/to-object.js","../internals/fails":"../../../node_modules/core-js/internals/fails.js","../internals/sloppy-array-method":"../../../node_modules/core-js/internals/sloppy-array-method.js"}],"../../../node_modules/core-js/modules/es.array.splice.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var toAbsoluteIndex = require('../internals/to-absolute-index');
var toInteger = require('../internals/to-integer');
var toLength = require('../internals/to-length');
var toObject = require('../internals/to-object');
var arraySpeciesCreate = require('../internals/array-species-create');
var createProperty = require('../internals/create-property');
var arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');

var max = Math.max;
var min = Math.min;
var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
var MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded';

// `Array.prototype.splice` method
// https://tc39.github.io/ecma262/#sec-array.prototype.splice
// with adding support of @@species
$({ target: 'Array', proto: true, forced: !arrayMethodHasSpeciesSupport('splice') }, {
  splice: function splice(start, deleteCount /* , ...items */) {
    var O = toObject(this);
    var len = toLength(O.length);
    var actualStart = toAbsoluteIndex(start, len);
    var argumentsLength = arguments.length;
    var insertCount, actualDeleteCount, A, k, from, to;
    if (argumentsLength === 0) {
      insertCount = actualDeleteCount = 0;
    } else if (argumentsLength === 1) {
      insertCount = 0;
      actualDeleteCount = len - actualStart;
    } else {
      insertCount = argumentsLength - 2;
      actualDeleteCount = min(max(toInteger(deleteCount), 0), len - actualStart);
    }
    if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER) {
      throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);
    }
    A = arraySpeciesCreate(O, actualDeleteCount);
    for (k = 0; k < actualDeleteCount; k++) {
      from = actualStart + k;
      if (from in O) createProperty(A, k, O[from]);
    }
    A.length = actualDeleteCount;
    if (insertCount < actualDeleteCount) {
      for (k = actualStart; k < len - actualDeleteCount; k++) {
        from = k + actualDeleteCount;
        to = k + insertCount;
        if (from in O) O[to] = O[from];
        else delete O[to];
      }
      for (k = len; k > len - actualDeleteCount + insertCount; k--) delete O[k - 1];
    } else if (insertCount > actualDeleteCount) {
      for (k = len - actualDeleteCount; k > actualStart; k--) {
        from = k + actualDeleteCount - 1;
        to = k + insertCount - 1;
        if (from in O) O[to] = O[from];
        else delete O[to];
      }
    }
    for (k = 0; k < insertCount; k++) {
      O[k + actualStart] = arguments[k + 2];
    }
    O.length = len - actualDeleteCount + insertCount;
    return A;
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/to-absolute-index":"../../../node_modules/core-js/internals/to-absolute-index.js","../internals/to-integer":"../../../node_modules/core-js/internals/to-integer.js","../internals/to-length":"../../../node_modules/core-js/internals/to-length.js","../internals/to-object":"../../../node_modules/core-js/internals/to-object.js","../internals/array-species-create":"../../../node_modules/core-js/internals/array-species-create.js","../internals/create-property":"../../../node_modules/core-js/internals/create-property.js","../internals/array-method-has-species-support":"../../../node_modules/core-js/internals/array-method-has-species-support.js"}],"../../../node_modules/core-js/internals/set-species.js":[function(require,module,exports) {
'use strict';
var getBuiltIn = require('../internals/get-built-in');
var definePropertyModule = require('../internals/object-define-property');
var wellKnownSymbol = require('../internals/well-known-symbol');
var DESCRIPTORS = require('../internals/descriptors');

var SPECIES = wellKnownSymbol('species');

module.exports = function (CONSTRUCTOR_NAME) {
  var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
  var defineProperty = definePropertyModule.f;

  if (DESCRIPTORS && Constructor && !Constructor[SPECIES]) {
    defineProperty(Constructor, SPECIES, {
      configurable: true,
      get: function () { return this; }
    });
  }
};

},{"../internals/get-built-in":"../../../node_modules/core-js/internals/get-built-in.js","../internals/object-define-property":"../../../node_modules/core-js/internals/object-define-property.js","../internals/well-known-symbol":"../../../node_modules/core-js/internals/well-known-symbol.js","../internals/descriptors":"../../../node_modules/core-js/internals/descriptors.js"}],"../../../node_modules/core-js/modules/es.array.species.js":[function(require,module,exports) {
var setSpecies = require('../internals/set-species');

// `Array[@@species]` getter
// https://tc39.github.io/ecma262/#sec-get-array-@@species
setSpecies('Array');

},{"../internals/set-species":"../../../node_modules/core-js/internals/set-species.js"}],"../../../node_modules/core-js/modules/es.array.unscopables.flat.js":[function(require,module,exports) {
// this method was added to unscopables after implementation
// in popular engines, so it's moved to a separate module
var addToUnscopables = require('../internals/add-to-unscopables');

addToUnscopables('flat');

},{"../internals/add-to-unscopables":"../../../node_modules/core-js/internals/add-to-unscopables.js"}],"../../../node_modules/core-js/modules/es.array.unscopables.flat-map.js":[function(require,module,exports) {
// this method was added to unscopables after implementation
// in popular engines, so it's moved to a separate module
var addToUnscopables = require('../internals/add-to-unscopables');

addToUnscopables('flatMap');

},{"../internals/add-to-unscopables":"../../../node_modules/core-js/internals/add-to-unscopables.js"}],"../../../node_modules/core-js/internals/iterators-core.js":[function(require,module,exports) {
'use strict';
var getPrototypeOf = require('../internals/object-get-prototype-of');
var hide = require('../internals/hide');
var has = require('../internals/has');
var wellKnownSymbol = require('../internals/well-known-symbol');
var IS_PURE = require('../internals/is-pure');

var ITERATOR = wellKnownSymbol('iterator');
var BUGGY_SAFARI_ITERATORS = false;

var returnThis = function () { return this; };

// `%IteratorPrototype%` object
// https://tc39.github.io/ecma262/#sec-%iteratorprototype%-object
var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;

if ([].keys) {
  arrayIterator = [].keys();
  // Safari 8 has buggy iterators w/o `next`
  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;
  else {
    PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));
    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
  }
}

if (IteratorPrototype == undefined) IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
if (!IS_PURE && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);

module.exports = {
  IteratorPrototype: IteratorPrototype,
  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS
};

},{"../internals/object-get-prototype-of":"../../../node_modules/core-js/internals/object-get-prototype-of.js","../internals/hide":"../../../node_modules/core-js/internals/hide.js","../internals/has":"../../../node_modules/core-js/internals/has.js","../internals/well-known-symbol":"../../../node_modules/core-js/internals/well-known-symbol.js","../internals/is-pure":"../../../node_modules/core-js/internals/is-pure.js"}],"../../../node_modules/core-js/internals/create-iterator-constructor.js":[function(require,module,exports) {
'use strict';
var IteratorPrototype = require('../internals/iterators-core').IteratorPrototype;
var create = require('../internals/object-create');
var createPropertyDescriptor = require('../internals/create-property-descriptor');
var setToStringTag = require('../internals/set-to-string-tag');
var Iterators = require('../internals/iterators');

var returnThis = function () { return this; };

module.exports = function (IteratorConstructor, NAME, next) {
  var TO_STRING_TAG = NAME + ' Iterator';
  IteratorConstructor.prototype = create(IteratorPrototype, { next: createPropertyDescriptor(1, next) });
  setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
  Iterators[TO_STRING_TAG] = returnThis;
  return IteratorConstructor;
};

},{"../internals/iterators-core":"../../../node_modules/core-js/internals/iterators-core.js","../internals/object-create":"../../../node_modules/core-js/internals/object-create.js","../internals/create-property-descriptor":"../../../node_modules/core-js/internals/create-property-descriptor.js","../internals/set-to-string-tag":"../../../node_modules/core-js/internals/set-to-string-tag.js","../internals/iterators":"../../../node_modules/core-js/internals/hidden-keys.js"}],"../../../node_modules/core-js/internals/define-iterator.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var createIteratorConstructor = require('../internals/create-iterator-constructor');
var getPrototypeOf = require('../internals/object-get-prototype-of');
var setPrototypeOf = require('../internals/object-set-prototype-of');
var setToStringTag = require('../internals/set-to-string-tag');
var hide = require('../internals/hide');
var redefine = require('../internals/redefine');
var wellKnownSymbol = require('../internals/well-known-symbol');
var IS_PURE = require('../internals/is-pure');
var Iterators = require('../internals/iterators');
var IteratorsCore = require('../internals/iterators-core');

var IteratorPrototype = IteratorsCore.IteratorPrototype;
var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
var ITERATOR = wellKnownSymbol('iterator');
var KEYS = 'keys';
var VALUES = 'values';
var ENTRIES = 'entries';

var returnThis = function () { return this; };

module.exports = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
  createIteratorConstructor(IteratorConstructor, NAME, next);

  var getIterationMethod = function (KIND) {
    if (KIND === DEFAULT && defaultIterator) return defaultIterator;
    if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];
    switch (KIND) {
      case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };
      case VALUES: return function values() { return new IteratorConstructor(this, KIND); };
      case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };
    } return function () { return new IteratorConstructor(this); };
  };

  var TO_STRING_TAG = NAME + ' Iterator';
  var INCORRECT_VALUES_NAME = false;
  var IterablePrototype = Iterable.prototype;
  var nativeIterator = IterablePrototype[ITERATOR]
    || IterablePrototype['@@iterator']
    || DEFAULT && IterablePrototype[DEFAULT];
  var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
  var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
  var CurrentIteratorPrototype, methods, KEY;

  // fix native
  if (anyNativeIterator) {
    CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));
    if (IteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
      if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
        if (setPrototypeOf) {
          setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
        } else if (typeof CurrentIteratorPrototype[ITERATOR] != 'function') {
          hide(CurrentIteratorPrototype, ITERATOR, returnThis);
        }
      }
      // Set @@toStringTag to native iterators
      setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
      if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;
    }
  }

  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
    INCORRECT_VALUES_NAME = true;
    defaultIterator = function values() { return nativeIterator.call(this); };
  }

  // define iterator
  if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {
    hide(IterablePrototype, ITERATOR, defaultIterator);
  }
  Iterators[NAME] = defaultIterator;

  // export additional methods
  if (DEFAULT) {
    methods = {
      values: getIterationMethod(VALUES),
      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
      entries: getIterationMethod(ENTRIES)
    };
    if (FORCED) for (KEY in methods) {
      if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
        redefine(IterablePrototype, KEY, methods[KEY]);
      }
    } else $({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);
  }

  return methods;
};

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/create-iterator-constructor":"../../../node_modules/core-js/internals/create-iterator-constructor.js","../internals/object-get-prototype-of":"../../../node_modules/core-js/internals/object-get-prototype-of.js","../internals/object-set-prototype-of":"../../../node_modules/core-js/internals/object-set-prototype-of.js","../internals/set-to-string-tag":"../../../node_modules/core-js/internals/set-to-string-tag.js","../internals/hide":"../../../node_modules/core-js/internals/hide.js","../internals/redefine":"../../../node_modules/core-js/internals/redefine.js","../internals/well-known-symbol":"../../../node_modules/core-js/internals/well-known-symbol.js","../internals/is-pure":"../../../node_modules/core-js/internals/is-pure.js","../internals/iterators":"../../../node_modules/core-js/internals/hidden-keys.js","../internals/iterators-core":"../../../node_modules/core-js/internals/iterators-core.js"}],"../../../node_modules/core-js/modules/es.array.iterator.js":[function(require,module,exports) {
'use strict';
var toIndexedObject = require('../internals/to-indexed-object');
var addToUnscopables = require('../internals/add-to-unscopables');
var Iterators = require('../internals/iterators');
var InternalStateModule = require('../internals/internal-state');
var defineIterator = require('../internals/define-iterator');

var ARRAY_ITERATOR = 'Array Iterator';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);

// `Array.prototype.entries` method
// https://tc39.github.io/ecma262/#sec-array.prototype.entries
// `Array.prototype.keys` method
// https://tc39.github.io/ecma262/#sec-array.prototype.keys
// `Array.prototype.values` method
// https://tc39.github.io/ecma262/#sec-array.prototype.values
// `Array.prototype[@@iterator]` method
// https://tc39.github.io/ecma262/#sec-array.prototype-@@iterator
// `CreateArrayIterator` internal method
// https://tc39.github.io/ecma262/#sec-createarrayiterator
module.exports = defineIterator(Array, 'Array', function (iterated, kind) {
  setInternalState(this, {
    type: ARRAY_ITERATOR,
    target: toIndexedObject(iterated), // target
    index: 0,                          // next index
    kind: kind                         // kind
  });
// `%ArrayIteratorPrototype%.next` method
// https://tc39.github.io/ecma262/#sec-%arrayiteratorprototype%.next
}, function () {
  var state = getInternalState(this);
  var target = state.target;
  var kind = state.kind;
  var index = state.index++;
  if (!target || index >= target.length) {
    state.target = undefined;
    return { value: undefined, done: true };
  }
  if (kind == 'keys') return { value: index, done: false };
  if (kind == 'values') return { value: target[index], done: false };
  return { value: [index, target[index]], done: false };
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values%
// https://tc39.github.io/ecma262/#sec-createunmappedargumentsobject
// https://tc39.github.io/ecma262/#sec-createmappedargumentsobject
Iterators.Arguments = Iterators.Array;

// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

},{"../internals/to-indexed-object":"../../../node_modules/core-js/internals/to-indexed-object.js","../internals/add-to-unscopables":"../../../node_modules/core-js/internals/add-to-unscopables.js","../internals/iterators":"../../../node_modules/core-js/internals/hidden-keys.js","../internals/internal-state":"../../../node_modules/core-js/internals/internal-state.js","../internals/define-iterator":"../../../node_modules/core-js/internals/define-iterator.js"}],"../../../node_modules/core-js/modules/es.string.from-code-point.js":[function(require,module,exports) {
var $ = require('../internals/export');
var toAbsoluteIndex = require('../internals/to-absolute-index');

var fromCharCode = String.fromCharCode;
var nativeFromCodePoint = String.fromCodePoint;

// length should be 1, old FF problem
var INCORRECT_LENGTH = !!nativeFromCodePoint && nativeFromCodePoint.length != 1;

// `String.fromCodePoint` method
// https://tc39.github.io/ecma262/#sec-string.fromcodepoint
$({ target: 'String', stat: true, forced: INCORRECT_LENGTH }, {
  fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars
    var elements = [];
    var length = arguments.length;
    var i = 0;
    var code;
    while (length > i) {
      code = +arguments[i++];
      if (toAbsoluteIndex(code, 0x10FFFF) !== code) throw RangeError(code + ' is not a valid code point');
      elements.push(code < 0x10000
        ? fromCharCode(code)
        : fromCharCode(((code -= 0x10000) >> 10) + 0xD800, code % 0x400 + 0xDC00)
      );
    } return elements.join('');
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/to-absolute-index":"../../../node_modules/core-js/internals/to-absolute-index.js"}],"../../../node_modules/core-js/modules/es.string.raw.js":[function(require,module,exports) {
var $ = require('../internals/export');
var toIndexedObject = require('../internals/to-indexed-object');
var toLength = require('../internals/to-length');

// `String.raw` method
// https://tc39.github.io/ecma262/#sec-string.raw
$({ target: 'String', stat: true }, {
  raw: function raw(template) {
    var rawTemplate = toIndexedObject(template.raw);
    var literalSegments = toLength(rawTemplate.length);
    var argumentsLength = arguments.length;
    var elements = [];
    var i = 0;
    while (literalSegments > i) {
      elements.push(String(rawTemplate[i++]));
      if (i < argumentsLength) elements.push(String(arguments[i]));
    } return elements.join('');
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/to-indexed-object":"../../../node_modules/core-js/internals/to-indexed-object.js","../internals/to-length":"../../../node_modules/core-js/internals/to-length.js"}],"../../../node_modules/core-js/internals/string-multibyte.js":[function(require,module,exports) {
var toInteger = require('../internals/to-integer');
var requireObjectCoercible = require('../internals/require-object-coercible');

// `String.prototype.{ codePointAt, at }` methods implementation
var createMethod = function (CONVERT_TO_STRING) {
  return function ($this, pos) {
    var S = String(requireObjectCoercible($this));
    var position = toInteger(pos);
    var size = S.length;
    var first, second;
    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
    first = S.charCodeAt(position);
    return first < 0xD800 || first > 0xDBFF || position + 1 === size
      || (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF
        ? CONVERT_TO_STRING ? S.charAt(position) : first
        : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
  };
};

module.exports = {
  // `String.prototype.codePointAt` method
  // https://tc39.github.io/ecma262/#sec-string.prototype.codepointat
  codeAt: createMethod(false),
  // `String.prototype.at` method
  // https://github.com/mathiasbynens/String.prototype.at
  charAt: createMethod(true)
};

},{"../internals/to-integer":"../../../node_modules/core-js/internals/to-integer.js","../internals/require-object-coercible":"../../../node_modules/core-js/internals/require-object-coercible.js"}],"../../../node_modules/core-js/modules/es.string.code-point-at.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var codeAt = require('../internals/string-multibyte').codeAt;

// `String.prototype.codePointAt` method
// https://tc39.github.io/ecma262/#sec-string.prototype.codepointat
$({ target: 'String', proto: true }, {
  codePointAt: function codePointAt(pos) {
    return codeAt(this, pos);
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/string-multibyte":"../../../node_modules/core-js/internals/string-multibyte.js"}],"../../../node_modules/core-js/internals/is-regexp.js":[function(require,module,exports) {
var isObject = require('../internals/is-object');
var classof = require('../internals/classof-raw');
var wellKnownSymbol = require('../internals/well-known-symbol');

var MATCH = wellKnownSymbol('match');

// `IsRegExp` abstract operation
// https://tc39.github.io/ecma262/#sec-isregexp
module.exports = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classof(it) == 'RegExp');
};

},{"../internals/is-object":"../../../node_modules/core-js/internals/is-object.js","../internals/classof-raw":"../../../node_modules/core-js/internals/classof-raw.js","../internals/well-known-symbol":"../../../node_modules/core-js/internals/well-known-symbol.js"}],"../../../node_modules/core-js/internals/not-a-regexp.js":[function(require,module,exports) {
var isRegExp = require('../internals/is-regexp');

module.exports = function (it) {
  if (isRegExp(it)) {
    throw TypeError("The method doesn't accept regular expressions");
  } return it;
};

},{"../internals/is-regexp":"../../../node_modules/core-js/internals/is-regexp.js"}],"../../../node_modules/core-js/internals/correct-is-regexp-logic.js":[function(require,module,exports) {
var wellKnownSymbol = require('../internals/well-known-symbol');

var MATCH = wellKnownSymbol('match');

module.exports = function (METHOD_NAME) {
  var regexp = /./;
  try {
    '/./'[METHOD_NAME](regexp);
  } catch (e) {
    try {
      regexp[MATCH] = false;
      return '/./'[METHOD_NAME](regexp);
    } catch (f) { /* empty */ }
  } return false;
};

},{"../internals/well-known-symbol":"../../../node_modules/core-js/internals/well-known-symbol.js"}],"../../../node_modules/core-js/modules/es.string.ends-with.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var toLength = require('../internals/to-length');
var notARegExp = require('../internals/not-a-regexp');
var requireObjectCoercible = require('../internals/require-object-coercible');
var correctIsRegExpLogic = require('../internals/correct-is-regexp-logic');

var nativeEndsWith = ''.endsWith;
var min = Math.min;

// `String.prototype.endsWith` method
// https://tc39.github.io/ecma262/#sec-string.prototype.endswith
$({ target: 'String', proto: true, forced: !correctIsRegExpLogic('endsWith') }, {
  endsWith: function endsWith(searchString /* , endPosition = @length */) {
    var that = String(requireObjectCoercible(this));
    notARegExp(searchString);
    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
    var len = toLength(that.length);
    var end = endPosition === undefined ? len : min(toLength(endPosition), len);
    var search = String(searchString);
    return nativeEndsWith
      ? nativeEndsWith.call(that, search, end)
      : that.slice(end - search.length, end) === search;
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/to-length":"../../../node_modules/core-js/internals/to-length.js","../internals/not-a-regexp":"../../../node_modules/core-js/internals/not-a-regexp.js","../internals/require-object-coercible":"../../../node_modules/core-js/internals/require-object-coercible.js","../internals/correct-is-regexp-logic":"../../../node_modules/core-js/internals/correct-is-regexp-logic.js"}],"../../../node_modules/core-js/modules/es.string.includes.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var notARegExp = require('../internals/not-a-regexp');
var requireObjectCoercible = require('../internals/require-object-coercible');
var correctIsRegExpLogic = require('../internals/correct-is-regexp-logic');

// `String.prototype.includes` method
// https://tc39.github.io/ecma262/#sec-string.prototype.includes
$({ target: 'String', proto: true, forced: !correctIsRegExpLogic('includes') }, {
  includes: function includes(searchString /* , position = 0 */) {
    return !!~String(requireObjectCoercible(this))
      .indexOf(notARegExp(searchString), arguments.length > 1 ? arguments[1] : undefined);
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/not-a-regexp":"../../../node_modules/core-js/internals/not-a-regexp.js","../internals/require-object-coercible":"../../../node_modules/core-js/internals/require-object-coercible.js","../internals/correct-is-regexp-logic":"../../../node_modules/core-js/internals/correct-is-regexp-logic.js"}],"../../../node_modules/core-js/internals/regexp-flags.js":[function(require,module,exports) {
'use strict';
var anObject = require('../internals/an-object');

// `RegExp.prototype.flags` getter implementation
// https://tc39.github.io/ecma262/#sec-get-regexp.prototype.flags
module.exports = function () {
  var that = anObject(this);
  var result = '';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.dotAll) result += 's';
  if (that.unicode) result += 'u';
  if (that.sticky) result += 'y';
  return result;
};

},{"../internals/an-object":"../../../node_modules/core-js/internals/an-object.js"}],"../../../node_modules/core-js/internals/regexp-exec.js":[function(require,module,exports) {
'use strict';
var regexpFlags = require('./regexp-flags');

var nativeExec = RegExp.prototype.exec;
// This always refers to the native implementation, because the
// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
// which loads this file before patching the method.
var nativeReplace = String.prototype.replace;

var patchedExec = nativeExec;

var UPDATES_LAST_INDEX_WRONG = (function () {
  var re1 = /a/;
  var re2 = /b*/g;
  nativeExec.call(re1, 'a');
  nativeExec.call(re2, 'a');
  return re1.lastIndex !== 0 || re2.lastIndex !== 0;
})();

// nonparticipating capturing group, copied from es5-shim's String#split patch.
var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;

if (PATCH) {
  patchedExec = function exec(str) {
    var re = this;
    var lastIndex, reCopy, match, i;

    if (NPCG_INCLUDED) {
      reCopy = new RegExp('^' + re.source + '$(?!\\s)', regexpFlags.call(re));
    }
    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;

    match = nativeExec.call(re, str);

    if (UPDATES_LAST_INDEX_WRONG && match) {
      re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
    }
    if (NPCG_INCLUDED && match && match.length > 1) {
      // Fix browsers whose `exec` methods don't consistently return `undefined`
      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
      nativeReplace.call(match[0], reCopy, function () {
        for (i = 1; i < arguments.length - 2; i++) {
          if (arguments[i] === undefined) match[i] = undefined;
        }
      });
    }

    return match;
  };
}

module.exports = patchedExec;

},{"./regexp-flags":"../../../node_modules/core-js/internals/regexp-flags.js"}],"../../../node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js":[function(require,module,exports) {
'use strict';
var hide = require('../internals/hide');
var redefine = require('../internals/redefine');
var fails = require('../internals/fails');
var wellKnownSymbol = require('../internals/well-known-symbol');
var regexpExec = require('../internals/regexp-exec');

var SPECIES = wellKnownSymbol('species');

var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
  // #replace needs built-in support for named groups.
  // #match works fine because it just return the exec results, even if it has
  // a "grops" property.
  var re = /./;
  re.exec = function () {
    var result = [];
    result.groups = { a: '7' };
    return result;
  };
  return ''.replace(re, '$<a>') !== '7';
});

// Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
// Weex JS has frozen built-in prototypes, so use try / catch wrapper
var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {
  var re = /(?:)/;
  var originalExec = re.exec;
  re.exec = function () { return originalExec.apply(this, arguments); };
  var result = 'ab'.split(re);
  return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';
});

module.exports = function (KEY, length, exec, sham) {
  var SYMBOL = wellKnownSymbol(KEY);

  var DELEGATES_TO_SYMBOL = !fails(function () {
    // String methods call symbol-named RegEp methods
    var O = {};
    O[SYMBOL] = function () { return 7; };
    return ''[KEY](O) != 7;
  });

  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {
    // Symbol-named RegExp methods call .exec
    var execCalled = false;
    var re = /a/;
    re.exec = function () { execCalled = true; return null; };

    if (KEY === 'split') {
      // RegExp[@@split] doesn't call the regex's exec method, but first creates
      // a new one. We need to return the patched regex when creating the new one.
      re.constructor = {};
      re.constructor[SPECIES] = function () { return re; };
    }

    re[SYMBOL]('');
    return !execCalled;
  });

  if (
    !DELEGATES_TO_SYMBOL ||
    !DELEGATES_TO_EXEC ||
    (KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS) ||
    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)
  ) {
    var nativeRegExpMethod = /./[SYMBOL];
    var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {
      if (regexp.exec === regexpExec) {
        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
          // The native String method already delegates to @@method (this
          // polyfilled function), leasing to infinite recursion.
          // We avoid it by directly calling the native @@method method.
          return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };
        }
        return { done: true, value: nativeMethod.call(str, regexp, arg2) };
      }
      return { done: false };
    });
    var stringMethod = methods[0];
    var regexMethod = methods[1];

    redefine(String.prototype, KEY, stringMethod);
    redefine(RegExp.prototype, SYMBOL, length == 2
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function (string, arg) { return regexMethod.call(string, this, arg); }
      // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function (string) { return regexMethod.call(string, this); }
    );
    if (sham) hide(RegExp.prototype[SYMBOL], 'sham', true);
  }
};

},{"../internals/hide":"../../../node_modules/core-js/internals/hide.js","../internals/redefine":"../../../node_modules/core-js/internals/redefine.js","../internals/fails":"../../../node_modules/core-js/internals/fails.js","../internals/well-known-symbol":"../../../node_modules/core-js/internals/well-known-symbol.js","../internals/regexp-exec":"../../../node_modules/core-js/internals/regexp-exec.js"}],"../../../node_modules/core-js/internals/advance-string-index.js":[function(require,module,exports) {
'use strict';
var charAt = require('../internals/string-multibyte').charAt;

// `AdvanceStringIndex` abstract operation
// https://tc39.github.io/ecma262/#sec-advancestringindex
module.exports = function (S, index, unicode) {
  return index + (unicode ? charAt(S, index).length : 1);
};

},{"../internals/string-multibyte":"../../../node_modules/core-js/internals/string-multibyte.js"}],"../../../node_modules/core-js/internals/regexp-exec-abstract.js":[function(require,module,exports) {
var classof = require('./classof-raw');
var regexpExec = require('./regexp-exec');

// `RegExpExec` abstract operation
// https://tc39.github.io/ecma262/#sec-regexpexec
module.exports = function (R, S) {
  var exec = R.exec;
  if (typeof exec === 'function') {
    var result = exec.call(R, S);
    if (typeof result !== 'object') {
      throw TypeError('RegExp exec method returned something other than an Object or null');
    }
    return result;
  }

  if (classof(R) !== 'RegExp') {
    throw TypeError('RegExp#exec called on incompatible receiver');
  }

  return regexpExec.call(R, S);
};


},{"./classof-raw":"../../../node_modules/core-js/internals/classof-raw.js","./regexp-exec":"../../../node_modules/core-js/internals/regexp-exec.js"}],"../../../node_modules/core-js/modules/es.string.match.js":[function(require,module,exports) {
'use strict';
var fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');
var anObject = require('../internals/an-object');
var toLength = require('../internals/to-length');
var requireObjectCoercible = require('../internals/require-object-coercible');
var advanceStringIndex = require('../internals/advance-string-index');
var regExpExec = require('../internals/regexp-exec-abstract');

// @@match logic
fixRegExpWellKnownSymbolLogic('match', 1, function (MATCH, nativeMatch, maybeCallNative) {
  return [
    // `String.prototype.match` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.match
    function match(regexp) {
      var O = requireObjectCoercible(this);
      var matcher = regexp == undefined ? undefined : regexp[MATCH];
      return matcher !== undefined ? matcher.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
    },
    // `RegExp.prototype[@@match]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match
    function (regexp) {
      var res = maybeCallNative(nativeMatch, regexp, this);
      if (res.done) return res.value;

      var rx = anObject(regexp);
      var S = String(this);

      if (!rx.global) return regExpExec(rx, S);

      var fullUnicode = rx.unicode;
      rx.lastIndex = 0;
      var A = [];
      var n = 0;
      var result;
      while ((result = regExpExec(rx, S)) !== null) {
        var matchStr = String(result[0]);
        A[n] = matchStr;
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
        n++;
      }
      return n === 0 ? null : A;
    }
  ];
});

},{"../internals/fix-regexp-well-known-symbol-logic":"../../../node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","../internals/an-object":"../../../node_modules/core-js/internals/an-object.js","../internals/to-length":"../../../node_modules/core-js/internals/to-length.js","../internals/require-object-coercible":"../../../node_modules/core-js/internals/require-object-coercible.js","../internals/advance-string-index":"../../../node_modules/core-js/internals/advance-string-index.js","../internals/regexp-exec-abstract":"../../../node_modules/core-js/internals/regexp-exec-abstract.js"}],"../../../node_modules/core-js/internals/species-constructor.js":[function(require,module,exports) {
var anObject = require('../internals/an-object');
var aFunction = require('../internals/a-function');
var wellKnownSymbol = require('../internals/well-known-symbol');

var SPECIES = wellKnownSymbol('species');

// `SpeciesConstructor` abstract operation
// https://tc39.github.io/ecma262/#sec-speciesconstructor
module.exports = function (O, defaultConstructor) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? defaultConstructor : aFunction(S);
};

},{"../internals/an-object":"../../../node_modules/core-js/internals/an-object.js","../internals/a-function":"../../../node_modules/core-js/internals/a-function.js","../internals/well-known-symbol":"../../../node_modules/core-js/internals/well-known-symbol.js"}],"../../../node_modules/core-js/modules/es.string.match-all.js":[function(require,module,exports) {
var global = arguments[3];
'use strict';
var $ = require('../internals/export');
var createIteratorConstructor = require('../internals/create-iterator-constructor');
var requireObjectCoercible = require('../internals/require-object-coercible');
var toLength = require('../internals/to-length');
var aFunction = require('../internals/a-function');
var anObject = require('../internals/an-object');
var classof = require('../internals/classof');
var getFlags = require('../internals/regexp-flags');
var hide = require('../internals/hide');
var wellKnownSymbol = require('../internals/well-known-symbol');
var speciesConstructor = require('../internals/species-constructor');
var advanceStringIndex = require('../internals/advance-string-index');
var InternalStateModule = require('../internals/internal-state');
var IS_PURE = require('../internals/is-pure');

var MATCH_ALL = wellKnownSymbol('matchAll');
var REGEXP_STRING = 'RegExp String';
var REGEXP_STRING_ITERATOR = REGEXP_STRING + ' Iterator';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(REGEXP_STRING_ITERATOR);
var RegExpPrototype = RegExp.prototype;
var regExpBuiltinExec = RegExpPrototype.exec;

var regExpExec = function (R, S) {
  var exec = R.exec;
  var result;
  if (typeof exec == 'function') {
    result = exec.call(R, S);
    if (typeof result != 'object') throw TypeError('Incorrect exec result');
    return result;
  } return regExpBuiltinExec.call(R, S);
};

// eslint-disable-next-line max-len
var $RegExpStringIterator = createIteratorConstructor(function RegExpStringIterator(regexp, string, global, fullUnicode) {
  setInternalState(this, {
    type: REGEXP_STRING_ITERATOR,
    regexp: regexp,
    string: string,
    global: global,
    unicode: fullUnicode,
    done: false
  });
}, REGEXP_STRING, function next() {
  var state = getInternalState(this);
  if (state.done) return { value: undefined, done: true };
  var R = state.regexp;
  var S = state.string;
  var match = regExpExec(R, S);
  if (match === null) return { value: undefined, done: state.done = true };
  if (state.global) {
    if (String(match[0]) == '') R.lastIndex = advanceStringIndex(S, toLength(R.lastIndex), state.unicode);
    return { value: match, done: false };
  }
  state.done = true;
  return { value: match, done: false };
});

var $matchAll = function (string) {
  var R = anObject(this);
  var S = String(string);
  var C, flagsValue, flags, matcher, global, fullUnicode;
  C = speciesConstructor(R, RegExp);
  flagsValue = R.flags;
  if (flagsValue === undefined && R instanceof RegExp && !('flags' in RegExpPrototype)) {
    flagsValue = getFlags.call(R);
  }
  flags = flagsValue === undefined ? '' : String(flagsValue);
  matcher = new C(C === RegExp ? R.source : R, flags);
  global = !!~flags.indexOf('g');
  fullUnicode = !!~flags.indexOf('u');
  matcher.lastIndex = toLength(R.lastIndex);
  return new $RegExpStringIterator(matcher, S, global, fullUnicode);
};

// `String.prototype.matchAll` method
// https://github.com/tc39/proposal-string-matchall
$({ target: 'String', proto: true }, {
  matchAll: function matchAll(regexp) {
    var O = requireObjectCoercible(this);
    var S, matcher, rx;
    if (regexp != null) {
      matcher = regexp[MATCH_ALL];
      if (matcher === undefined && IS_PURE && classof(regexp) == 'RegExp') matcher = $matchAll;
      if (matcher != null) return aFunction(matcher).call(regexp, O);
    }
    S = String(O);
    rx = new RegExp(regexp, 'g');
    return IS_PURE ? $matchAll.call(rx, S) : rx[MATCH_ALL](S);
  }
});

IS_PURE || MATCH_ALL in RegExpPrototype || hide(RegExpPrototype, MATCH_ALL, $matchAll);

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/create-iterator-constructor":"../../../node_modules/core-js/internals/create-iterator-constructor.js","../internals/require-object-coercible":"../../../node_modules/core-js/internals/require-object-coercible.js","../internals/to-length":"../../../node_modules/core-js/internals/to-length.js","../internals/a-function":"../../../node_modules/core-js/internals/a-function.js","../internals/an-object":"../../../node_modules/core-js/internals/an-object.js","../internals/classof":"../../../node_modules/core-js/internals/classof.js","../internals/regexp-flags":"../../../node_modules/core-js/internals/regexp-flags.js","../internals/hide":"../../../node_modules/core-js/internals/hide.js","../internals/well-known-symbol":"../../../node_modules/core-js/internals/well-known-symbol.js","../internals/species-constructor":"../../../node_modules/core-js/internals/species-constructor.js","../internals/advance-string-index":"../../../node_modules/core-js/internals/advance-string-index.js","../internals/internal-state":"../../../node_modules/core-js/internals/internal-state.js","../internals/is-pure":"../../../node_modules/core-js/internals/is-pure.js"}],"../../../node_modules/core-js/internals/string-repeat.js":[function(require,module,exports) {
'use strict';
var toInteger = require('../internals/to-integer');
var requireObjectCoercible = require('../internals/require-object-coercible');

// `String.prototype.repeat` method implementation
// https://tc39.github.io/ecma262/#sec-string.prototype.repeat
module.exports = ''.repeat || function repeat(count) {
  var str = String(requireObjectCoercible(this));
  var result = '';
  var n = toInteger(count);
  if (n < 0 || n == Infinity) throw RangeError('Wrong number of repetitions');
  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) result += str;
  return result;
};

},{"../internals/to-integer":"../../../node_modules/core-js/internals/to-integer.js","../internals/require-object-coercible":"../../../node_modules/core-js/internals/require-object-coercible.js"}],"../../../node_modules/core-js/internals/string-pad.js":[function(require,module,exports) {
// https://github.com/tc39/proposal-string-pad-start-end
var toLength = require('../internals/to-length');
var repeat = require('../internals/string-repeat');
var requireObjectCoercible = require('../internals/require-object-coercible');

var ceil = Math.ceil;

// `String.prototype.{ padStart, padEnd }` methods implementation
var createMethod = function (IS_END) {
  return function ($this, maxLength, fillString) {
    var S = String(requireObjectCoercible($this));
    var stringLength = S.length;
    var fillStr = fillString === undefined ? ' ' : String(fillString);
    var intMaxLength = toLength(maxLength);
    var fillLen, stringFiller;
    if (intMaxLength <= stringLength || fillStr == '') return S;
    fillLen = intMaxLength - stringLength;
    stringFiller = repeat.call(fillStr, ceil(fillLen / fillStr.length));
    if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
    return IS_END ? S + stringFiller : stringFiller + S;
  };
};

module.exports = {
  // `String.prototype.padStart` method
  // https://tc39.github.io/ecma262/#sec-string.prototype.padstart
  start: createMethod(false),
  // `String.prototype.padEnd` method
  // https://tc39.github.io/ecma262/#sec-string.prototype.padend
  end: createMethod(true)
};

},{"../internals/to-length":"../../../node_modules/core-js/internals/to-length.js","../internals/string-repeat":"../../../node_modules/core-js/internals/string-repeat.js","../internals/require-object-coercible":"../../../node_modules/core-js/internals/require-object-coercible.js"}],"../../../node_modules/core-js/internals/user-agent.js":[function(require,module,exports) {
var getBuiltIn = require('../internals/get-built-in');

module.exports = getBuiltIn('navigator', 'userAgent') || '';

},{"../internals/get-built-in":"../../../node_modules/core-js/internals/get-built-in.js"}],"../../../node_modules/core-js/internals/webkit-string-pad-bug.js":[function(require,module,exports) {
// https://github.com/zloirock/core-js/issues/280
var userAgent = require('../internals/user-agent');

// eslint-disable-next-line unicorn/no-unsafe-regex
module.exports = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(userAgent);

},{"../internals/user-agent":"../../../node_modules/core-js/internals/user-agent.js"}],"../../../node_modules/core-js/modules/es.string.pad-end.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var $padEnd = require('../internals/string-pad').end;
var WEBKIT_BUG = require('../internals/webkit-string-pad-bug');

// `String.prototype.padEnd` method
// https://tc39.github.io/ecma262/#sec-string.prototype.padend
$({ target: 'String', proto: true, forced: WEBKIT_BUG }, {
  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {
    return $padEnd(this, maxLength, arguments.length > 1 ? arguments[1] : undefined);
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/string-pad":"../../../node_modules/core-js/internals/string-pad.js","../internals/webkit-string-pad-bug":"../../../node_modules/core-js/internals/webkit-string-pad-bug.js"}],"../../../node_modules/core-js/modules/es.string.pad-start.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var $padStart = require('../internals/string-pad').start;
var WEBKIT_BUG = require('../internals/webkit-string-pad-bug');

// `String.prototype.padStart` method
// https://tc39.github.io/ecma262/#sec-string.prototype.padstart
$({ target: 'String', proto: true, forced: WEBKIT_BUG }, {
  padStart: function padStart(maxLength /* , fillString = ' ' */) {
    return $padStart(this, maxLength, arguments.length > 1 ? arguments[1] : undefined);
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/string-pad":"../../../node_modules/core-js/internals/string-pad.js","../internals/webkit-string-pad-bug":"../../../node_modules/core-js/internals/webkit-string-pad-bug.js"}],"../../../node_modules/core-js/modules/es.string.repeat.js":[function(require,module,exports) {
var $ = require('../internals/export');
var repeat = require('../internals/string-repeat');

// `String.prototype.repeat` method
// https://tc39.github.io/ecma262/#sec-string.prototype.repeat
$({ target: 'String', proto: true }, {
  repeat: repeat
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/string-repeat":"../../../node_modules/core-js/internals/string-repeat.js"}],"../../../node_modules/core-js/modules/es.string.replace.js":[function(require,module,exports) {
var global = arguments[3];
'use strict';
var fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');
var anObject = require('../internals/an-object');
var toObject = require('../internals/to-object');
var toLength = require('../internals/to-length');
var toInteger = require('../internals/to-integer');
var requireObjectCoercible = require('../internals/require-object-coercible');
var advanceStringIndex = require('../internals/advance-string-index');
var regExpExec = require('../internals/regexp-exec-abstract');

var max = Math.max;
var min = Math.min;
var floor = Math.floor;
var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d\d?|<[^>]*>)/g;
var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d\d?)/g;

var maybeToString = function (it) {
  return it === undefined ? it : String(it);
};

// @@replace logic
fixRegExpWellKnownSymbolLogic('replace', 2, function (REPLACE, nativeReplace, maybeCallNative) {
  return [
    // `String.prototype.replace` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.replace
    function replace(searchValue, replaceValue) {
      var O = requireObjectCoercible(this);
      var replacer = searchValue == undefined ? undefined : searchValue[REPLACE];
      return replacer !== undefined
        ? replacer.call(searchValue, O, replaceValue)
        : nativeReplace.call(String(O), searchValue, replaceValue);
    },
    // `RegExp.prototype[@@replace]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
    function (regexp, replaceValue) {
      var res = maybeCallNative(nativeReplace, regexp, this, replaceValue);
      if (res.done) return res.value;

      var rx = anObject(regexp);
      var S = String(this);

      var functionalReplace = typeof replaceValue === 'function';
      if (!functionalReplace) replaceValue = String(replaceValue);

      var global = rx.global;
      if (global) {
        var fullUnicode = rx.unicode;
        rx.lastIndex = 0;
      }
      var results = [];
      while (true) {
        var result = regExpExec(rx, S);
        if (result === null) break;

        results.push(result);
        if (!global) break;

        var matchStr = String(result[0]);
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
      }

      var accumulatedResult = '';
      var nextSourcePosition = 0;
      for (var i = 0; i < results.length; i++) {
        result = results[i];

        var matched = String(result[0]);
        var position = max(min(toInteger(result.index), S.length), 0);
        var captures = [];
        // NOTE: This is equivalent to
        //   captures = result.slice(1).map(maybeToString)
        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
        // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));
        var namedCaptures = result.groups;
        if (functionalReplace) {
          var replacerArgs = [matched].concat(captures, position, S);
          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
          var replacement = String(replaceValue.apply(undefined, replacerArgs));
        } else {
          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
        }
        if (position >= nextSourcePosition) {
          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
          nextSourcePosition = position + matched.length;
        }
      }
      return accumulatedResult + S.slice(nextSourcePosition);
    }
  ];

  // https://tc39.github.io/ecma262/#sec-getsubstitution
  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
    var tailPos = position + matched.length;
    var m = captures.length;
    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
    if (namedCaptures !== undefined) {
      namedCaptures = toObject(namedCaptures);
      symbols = SUBSTITUTION_SYMBOLS;
    }
    return nativeReplace.call(replacement, symbols, function (match, ch) {
      var capture;
      switch (ch.charAt(0)) {
        case '$': return '$';
        case '&': return matched;
        case '`': return str.slice(0, position);
        case "'": return str.slice(tailPos);
        case '<':
          capture = namedCaptures[ch.slice(1, -1)];
          break;
        default: // \d\d?
          var n = +ch;
          if (n === 0) return match;
          if (n > m) {
            var f = floor(n / 10);
            if (f === 0) return match;
            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
            return match;
          }
          capture = captures[n - 1];
      }
      return capture === undefined ? '' : capture;
    });
  }
});

},{"../internals/fix-regexp-well-known-symbol-logic":"../../../node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","../internals/an-object":"../../../node_modules/core-js/internals/an-object.js","../internals/to-object":"../../../node_modules/core-js/internals/to-object.js","../internals/to-length":"../../../node_modules/core-js/internals/to-length.js","../internals/to-integer":"../../../node_modules/core-js/internals/to-integer.js","../internals/require-object-coercible":"../../../node_modules/core-js/internals/require-object-coercible.js","../internals/advance-string-index":"../../../node_modules/core-js/internals/advance-string-index.js","../internals/regexp-exec-abstract":"../../../node_modules/core-js/internals/regexp-exec-abstract.js"}],"../../../node_modules/core-js/modules/es.string.search.js":[function(require,module,exports) {
'use strict';
var fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');
var anObject = require('../internals/an-object');
var requireObjectCoercible = require('../internals/require-object-coercible');
var sameValue = require('../internals/same-value');
var regExpExec = require('../internals/regexp-exec-abstract');

// @@search logic
fixRegExpWellKnownSymbolLogic('search', 1, function (SEARCH, nativeSearch, maybeCallNative) {
  return [
    // `String.prototype.search` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.search
    function search(regexp) {
      var O = requireObjectCoercible(this);
      var searcher = regexp == undefined ? undefined : regexp[SEARCH];
      return searcher !== undefined ? searcher.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
    },
    // `RegExp.prototype[@@search]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search
    function (regexp) {
      var res = maybeCallNative(nativeSearch, regexp, this);
      if (res.done) return res.value;

      var rx = anObject(regexp);
      var S = String(this);

      var previousLastIndex = rx.lastIndex;
      if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
      var result = regExpExec(rx, S);
      if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;
      return result === null ? -1 : result.index;
    }
  ];
});

},{"../internals/fix-regexp-well-known-symbol-logic":"../../../node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","../internals/an-object":"../../../node_modules/core-js/internals/an-object.js","../internals/require-object-coercible":"../../../node_modules/core-js/internals/require-object-coercible.js","../internals/same-value":"../../../node_modules/core-js/internals/same-value.js","../internals/regexp-exec-abstract":"../../../node_modules/core-js/internals/regexp-exec-abstract.js"}],"../../../node_modules/core-js/modules/es.string.split.js":[function(require,module,exports) {
'use strict';
var fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');
var isRegExp = require('../internals/is-regexp');
var anObject = require('../internals/an-object');
var requireObjectCoercible = require('../internals/require-object-coercible');
var speciesConstructor = require('../internals/species-constructor');
var advanceStringIndex = require('../internals/advance-string-index');
var toLength = require('../internals/to-length');
var callRegExpExec = require('../internals/regexp-exec-abstract');
var regexpExec = require('../internals/regexp-exec');
var fails = require('../internals/fails');

var arrayPush = [].push;
var min = Math.min;
var MAX_UINT32 = 0xFFFFFFFF;

// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError
var SUPPORTS_Y = !fails(function () { return !RegExp(MAX_UINT32, 'y'); });

// @@split logic
fixRegExpWellKnownSymbolLogic('split', 2, function (SPLIT, nativeSplit, maybeCallNative) {
  var internalSplit;
  if (
    'abbc'.split(/(b)*/)[1] == 'c' ||
    'test'.split(/(?:)/, -1).length != 4 ||
    'ab'.split(/(?:ab)*/).length != 2 ||
    '.'.split(/(.?)(.?)/).length != 4 ||
    '.'.split(/()()/).length > 1 ||
    ''.split(/.?/).length
  ) {
    // based on es5-shim implementation, need to rework it
    internalSplit = function (separator, limit) {
      var string = String(requireObjectCoercible(this));
      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
      if (lim === 0) return [];
      if (separator === undefined) return [string];
      // If `separator` is not a regex, use native split
      if (!isRegExp(separator)) {
        return nativeSplit.call(string, separator, lim);
      }
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') +
                  (separator.multiline ? 'm' : '') +
                  (separator.unicode ? 'u' : '') +
                  (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var match, lastIndex, lastLength;
      while (match = regexpExec.call(separatorCopy, string)) {
        lastIndex = separatorCopy.lastIndex;
        if (lastIndex > lastLastIndex) {
          output.push(string.slice(lastLastIndex, match.index));
          if (match.length > 1 && match.index < string.length) arrayPush.apply(output, match.slice(1));
          lastLength = match[0].length;
          lastLastIndex = lastIndex;
          if (output.length >= lim) break;
        }
        if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop
      }
      if (lastLastIndex === string.length) {
        if (lastLength || !separatorCopy.test('')) output.push('');
      } else output.push(string.slice(lastLastIndex));
      return output.length > lim ? output.slice(0, lim) : output;
    };
  // Chakra, V8
  } else if ('0'.split(undefined, 0).length) {
    internalSplit = function (separator, limit) {
      return separator === undefined && limit === 0 ? [] : nativeSplit.call(this, separator, limit);
    };
  } else internalSplit = nativeSplit;

  return [
    // `String.prototype.split` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.split
    function split(separator, limit) {
      var O = requireObjectCoercible(this);
      var splitter = separator == undefined ? undefined : separator[SPLIT];
      return splitter !== undefined
        ? splitter.call(separator, O, limit)
        : internalSplit.call(String(O), separator, limit);
    },
    // `RegExp.prototype[@@split]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
    //
    // NOTE: This cannot be properly polyfilled in engines that don't support
    // the 'y' flag.
    function (regexp, limit) {
      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== nativeSplit);
      if (res.done) return res.value;

      var rx = anObject(regexp);
      var S = String(this);
      var C = speciesConstructor(rx, RegExp);

      var unicodeMatching = rx.unicode;
      var flags = (rx.ignoreCase ? 'i' : '') +
                  (rx.multiline ? 'm' : '') +
                  (rx.unicode ? 'u' : '') +
                  (SUPPORTS_Y ? 'y' : 'g');

      // ^(? + rx + ) is needed, in combination with some S slicing, to
      // simulate the 'y' flag.
      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
      if (lim === 0) return [];
      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];
      var p = 0;
      var q = 0;
      var A = [];
      while (q < S.length) {
        splitter.lastIndex = SUPPORTS_Y ? q : 0;
        var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));
        var e;
        if (
          z === null ||
          (e = min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p
        ) {
          q = advanceStringIndex(S, q, unicodeMatching);
        } else {
          A.push(S.slice(p, q));
          if (A.length === lim) return A;
          for (var i = 1; i <= z.length - 1; i++) {
            A.push(z[i]);
            if (A.length === lim) return A;
          }
          q = p = e;
        }
      }
      A.push(S.slice(p));
      return A;
    }
  ];
}, !SUPPORTS_Y);

},{"../internals/fix-regexp-well-known-symbol-logic":"../../../node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","../internals/is-regexp":"../../../node_modules/core-js/internals/is-regexp.js","../internals/an-object":"../../../node_modules/core-js/internals/an-object.js","../internals/require-object-coercible":"../../../node_modules/core-js/internals/require-object-coercible.js","../internals/species-constructor":"../../../node_modules/core-js/internals/species-constructor.js","../internals/advance-string-index":"../../../node_modules/core-js/internals/advance-string-index.js","../internals/to-length":"../../../node_modules/core-js/internals/to-length.js","../internals/regexp-exec-abstract":"../../../node_modules/core-js/internals/regexp-exec-abstract.js","../internals/regexp-exec":"../../../node_modules/core-js/internals/regexp-exec.js","../internals/fails":"../../../node_modules/core-js/internals/fails.js"}],"../../../node_modules/core-js/modules/es.string.starts-with.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var toLength = require('../internals/to-length');
var notARegExp = require('../internals/not-a-regexp');
var requireObjectCoercible = require('../internals/require-object-coercible');
var correctIsRegExpLogic = require('../internals/correct-is-regexp-logic');

var nativeStartsWith = ''.startsWith;
var min = Math.min;

// `String.prototype.startsWith` method
// https://tc39.github.io/ecma262/#sec-string.prototype.startswith
$({ target: 'String', proto: true, forced: !correctIsRegExpLogic('startsWith') }, {
  startsWith: function startsWith(searchString /* , position = 0 */) {
    var that = String(requireObjectCoercible(this));
    notARegExp(searchString);
    var index = toLength(min(arguments.length > 1 ? arguments[1] : undefined, that.length));
    var search = String(searchString);
    return nativeStartsWith
      ? nativeStartsWith.call(that, search, index)
      : that.slice(index, index + search.length) === search;
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/to-length":"../../../node_modules/core-js/internals/to-length.js","../internals/not-a-regexp":"../../../node_modules/core-js/internals/not-a-regexp.js","../internals/require-object-coercible":"../../../node_modules/core-js/internals/require-object-coercible.js","../internals/correct-is-regexp-logic":"../../../node_modules/core-js/internals/correct-is-regexp-logic.js"}],"../../../node_modules/core-js/internals/whitespaces.js":[function(require,module,exports) {
// a string of all valid unicode whitespaces
// eslint-disable-next-line max-len
module.exports = '\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

},{}],"../../../node_modules/core-js/internals/string-trim.js":[function(require,module,exports) {
var requireObjectCoercible = require('../internals/require-object-coercible');
var whitespaces = require('../internals/whitespaces');

var whitespace = '[' + whitespaces + ']';
var ltrim = RegExp('^' + whitespace + whitespace + '*');
var rtrim = RegExp(whitespace + whitespace + '*$');

// `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation
var createMethod = function (TYPE) {
  return function ($this) {
    var string = String(requireObjectCoercible($this));
    if (TYPE & 1) string = string.replace(ltrim, '');
    if (TYPE & 2) string = string.replace(rtrim, '');
    return string;
  };
};

module.exports = {
  // `String.prototype.{ trimLeft, trimStart }` methods
  // https://tc39.github.io/ecma262/#sec-string.prototype.trimstart
  start: createMethod(1),
  // `String.prototype.{ trimRight, trimEnd }` methods
  // https://tc39.github.io/ecma262/#sec-string.prototype.trimend
  end: createMethod(2),
  // `String.prototype.trim` method
  // https://tc39.github.io/ecma262/#sec-string.prototype.trim
  trim: createMethod(3)
};

},{"../internals/require-object-coercible":"../../../node_modules/core-js/internals/require-object-coercible.js","../internals/whitespaces":"../../../node_modules/core-js/internals/whitespaces.js"}],"../../../node_modules/core-js/internals/forced-string-trim-method.js":[function(require,module,exports) {
var fails = require('../internals/fails');
var whitespaces = require('../internals/whitespaces');

var non = '\u200B\u0085\u180E';

// check that a method works with the correct list
// of whitespaces and has a correct name
module.exports = function (METHOD_NAME) {
  return fails(function () {
    return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() != non || whitespaces[METHOD_NAME].name !== METHOD_NAME;
  });
};

},{"../internals/fails":"../../../node_modules/core-js/internals/fails.js","../internals/whitespaces":"../../../node_modules/core-js/internals/whitespaces.js"}],"../../../node_modules/core-js/modules/es.string.trim.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var $trim = require('../internals/string-trim').trim;
var forcedStringTrimMethod = require('../internals/forced-string-trim-method');

// `String.prototype.trim` method
// https://tc39.github.io/ecma262/#sec-string.prototype.trim
$({ target: 'String', proto: true, forced: forcedStringTrimMethod('trim') }, {
  trim: function trim() {
    return $trim(this);
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/string-trim":"../../../node_modules/core-js/internals/string-trim.js","../internals/forced-string-trim-method":"../../../node_modules/core-js/internals/forced-string-trim-method.js"}],"../../../node_modules/core-js/modules/es.string.trim-start.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var $trimStart = require('../internals/string-trim').start;
var forcedStringTrimMethod = require('../internals/forced-string-trim-method');

var FORCED = forcedStringTrimMethod('trimStart');

var trimStart = FORCED ? function trimStart() {
  return $trimStart(this);
} : ''.trimStart;

// `String.prototype.{ trimStart, trimLeft }` methods
// https://github.com/tc39/ecmascript-string-left-right-trim
$({ target: 'String', proto: true, forced: FORCED }, {
  trimStart: trimStart,
  trimLeft: trimStart
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/string-trim":"../../../node_modules/core-js/internals/string-trim.js","../internals/forced-string-trim-method":"../../../node_modules/core-js/internals/forced-string-trim-method.js"}],"../../../node_modules/core-js/modules/es.string.trim-end.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var $trimEnd = require('../internals/string-trim').end;
var forcedStringTrimMethod = require('../internals/forced-string-trim-method');

var FORCED = forcedStringTrimMethod('trimEnd');

var trimEnd = FORCED ? function trimEnd() {
  return $trimEnd(this);
} : ''.trimEnd;

// `String.prototype.{ trimEnd, trimRight }` methods
// https://github.com/tc39/ecmascript-string-left-right-trim
$({ target: 'String', proto: true, forced: FORCED }, {
  trimEnd: trimEnd,
  trimRight: trimEnd
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/string-trim":"../../../node_modules/core-js/internals/string-trim.js","../internals/forced-string-trim-method":"../../../node_modules/core-js/internals/forced-string-trim-method.js"}],"../../../node_modules/core-js/modules/es.string.iterator.js":[function(require,module,exports) {
'use strict';
var charAt = require('../internals/string-multibyte').charAt;
var InternalStateModule = require('../internals/internal-state');
var defineIterator = require('../internals/define-iterator');

var STRING_ITERATOR = 'String Iterator';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);

// `String.prototype[@@iterator]` method
// https://tc39.github.io/ecma262/#sec-string.prototype-@@iterator
defineIterator(String, 'String', function (iterated) {
  setInternalState(this, {
    type: STRING_ITERATOR,
    string: String(iterated),
    index: 0
  });
// `%StringIteratorPrototype%.next` method
// https://tc39.github.io/ecma262/#sec-%stringiteratorprototype%.next
}, function next() {
  var state = getInternalState(this);
  var string = state.string;
  var index = state.index;
  var point;
  if (index >= string.length) return { value: undefined, done: true };
  point = charAt(string, index);
  state.index += point.length;
  return { value: point, done: false };
});

},{"../internals/string-multibyte":"../../../node_modules/core-js/internals/string-multibyte.js","../internals/internal-state":"../../../node_modules/core-js/internals/internal-state.js","../internals/define-iterator":"../../../node_modules/core-js/internals/define-iterator.js"}],"../../../node_modules/core-js/internals/create-html.js":[function(require,module,exports) {
var requireObjectCoercible = require('../internals/require-object-coercible');

var quot = /"/g;

// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
// https://tc39.github.io/ecma262/#sec-createhtml
module.exports = function (string, tag, attribute, value) {
  var S = String(requireObjectCoercible(string));
  var p1 = '<' + tag;
  if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
  return p1 + '>' + S + '</' + tag + '>';
};

},{"../internals/require-object-coercible":"../../../node_modules/core-js/internals/require-object-coercible.js"}],"../../../node_modules/core-js/internals/forced-string-html-method.js":[function(require,module,exports) {
var fails = require('../internals/fails');

// check the existence of a method, lowercase
// of a tag and escaping quotes in arguments
module.exports = function (METHOD_NAME) {
  return fails(function () {
    var test = ''[METHOD_NAME]('"');
    return test !== test.toLowerCase() || test.split('"').length > 3;
  });
};

},{"../internals/fails":"../../../node_modules/core-js/internals/fails.js"}],"../../../node_modules/core-js/modules/es.string.anchor.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var createHTML = require('../internals/create-html');
var forcedStringHTMLMethod = require('../internals/forced-string-html-method');

// `String.prototype.anchor` method
// https://tc39.github.io/ecma262/#sec-string.prototype.anchor
$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('anchor') }, {
  anchor: function anchor(name) {
    return createHTML(this, 'a', 'name', name);
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/create-html":"../../../node_modules/core-js/internals/create-html.js","../internals/forced-string-html-method":"../../../node_modules/core-js/internals/forced-string-html-method.js"}],"../../../node_modules/core-js/modules/es.string.big.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var createHTML = require('../internals/create-html');
var forcedStringHTMLMethod = require('../internals/forced-string-html-method');

// `String.prototype.big` method
// https://tc39.github.io/ecma262/#sec-string.prototype.big
$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('big') }, {
  big: function big() {
    return createHTML(this, 'big', '', '');
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/create-html":"../../../node_modules/core-js/internals/create-html.js","../internals/forced-string-html-method":"../../../node_modules/core-js/internals/forced-string-html-method.js"}],"../../../node_modules/core-js/modules/es.string.blink.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var createHTML = require('../internals/create-html');
var forcedStringHTMLMethod = require('../internals/forced-string-html-method');

// `String.prototype.blink` method
// https://tc39.github.io/ecma262/#sec-string.prototype.blink
$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('blink') }, {
  blink: function blink() {
    return createHTML(this, 'blink', '', '');
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/create-html":"../../../node_modules/core-js/internals/create-html.js","../internals/forced-string-html-method":"../../../node_modules/core-js/internals/forced-string-html-method.js"}],"../../../node_modules/core-js/modules/es.string.bold.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var createHTML = require('../internals/create-html');
var forcedStringHTMLMethod = require('../internals/forced-string-html-method');

// `String.prototype.bold` method
// https://tc39.github.io/ecma262/#sec-string.prototype.bold
$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('bold') }, {
  bold: function bold() {
    return createHTML(this, 'b', '', '');
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/create-html":"../../../node_modules/core-js/internals/create-html.js","../internals/forced-string-html-method":"../../../node_modules/core-js/internals/forced-string-html-method.js"}],"../../../node_modules/core-js/modules/es.string.fixed.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var createHTML = require('../internals/create-html');
var forcedStringHTMLMethod = require('../internals/forced-string-html-method');

// `String.prototype.fixed` method
// https://tc39.github.io/ecma262/#sec-string.prototype.fixed
$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('fixed') }, {
  fixed: function fixed() {
    return createHTML(this, 'tt', '', '');
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/create-html":"../../../node_modules/core-js/internals/create-html.js","../internals/forced-string-html-method":"../../../node_modules/core-js/internals/forced-string-html-method.js"}],"../../../node_modules/core-js/modules/es.string.fontcolor.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var createHTML = require('../internals/create-html');
var forcedStringHTMLMethod = require('../internals/forced-string-html-method');

// `String.prototype.fontcolor` method
// https://tc39.github.io/ecma262/#sec-string.prototype.fontcolor
$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('fontcolor') }, {
  fontcolor: function fontcolor(color) {
    return createHTML(this, 'font', 'color', color);
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/create-html":"../../../node_modules/core-js/internals/create-html.js","../internals/forced-string-html-method":"../../../node_modules/core-js/internals/forced-string-html-method.js"}],"../../../node_modules/core-js/modules/es.string.fontsize.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var createHTML = require('../internals/create-html');
var forcedStringHTMLMethod = require('../internals/forced-string-html-method');

// `String.prototype.fontsize` method
// https://tc39.github.io/ecma262/#sec-string.prototype.fontsize
$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('fontsize') }, {
  fontsize: function fontsize(size) {
    return createHTML(this, 'font', 'size', size);
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/create-html":"../../../node_modules/core-js/internals/create-html.js","../internals/forced-string-html-method":"../../../node_modules/core-js/internals/forced-string-html-method.js"}],"../../../node_modules/core-js/modules/es.string.italics.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var createHTML = require('../internals/create-html');
var forcedStringHTMLMethod = require('../internals/forced-string-html-method');

// `String.prototype.italics` method
// https://tc39.github.io/ecma262/#sec-string.prototype.italics
$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('italics') }, {
  italics: function italics() {
    return createHTML(this, 'i', '', '');
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/create-html":"../../../node_modules/core-js/internals/create-html.js","../internals/forced-string-html-method":"../../../node_modules/core-js/internals/forced-string-html-method.js"}],"../../../node_modules/core-js/modules/es.string.link.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var createHTML = require('../internals/create-html');
var forcedStringHTMLMethod = require('../internals/forced-string-html-method');

// `String.prototype.link` method
// https://tc39.github.io/ecma262/#sec-string.prototype.link
$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('link') }, {
  link: function link(url) {
    return createHTML(this, 'a', 'href', url);
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/create-html":"../../../node_modules/core-js/internals/create-html.js","../internals/forced-string-html-method":"../../../node_modules/core-js/internals/forced-string-html-method.js"}],"../../../node_modules/core-js/modules/es.string.small.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var createHTML = require('../internals/create-html');
var forcedStringHTMLMethod = require('../internals/forced-string-html-method');

// `String.prototype.small` method
// https://tc39.github.io/ecma262/#sec-string.prototype.small
$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('small') }, {
  small: function small() {
    return createHTML(this, 'small', '', '');
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/create-html":"../../../node_modules/core-js/internals/create-html.js","../internals/forced-string-html-method":"../../../node_modules/core-js/internals/forced-string-html-method.js"}],"../../../node_modules/core-js/modules/es.string.strike.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var createHTML = require('../internals/create-html');
var forcedStringHTMLMethod = require('../internals/forced-string-html-method');

// `String.prototype.strike` method
// https://tc39.github.io/ecma262/#sec-string.prototype.strike
$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('strike') }, {
  strike: function strike() {
    return createHTML(this, 'strike', '', '');
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/create-html":"../../../node_modules/core-js/internals/create-html.js","../internals/forced-string-html-method":"../../../node_modules/core-js/internals/forced-string-html-method.js"}],"../../../node_modules/core-js/modules/es.string.sub.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var createHTML = require('../internals/create-html');
var forcedStringHTMLMethod = require('../internals/forced-string-html-method');

// `String.prototype.sub` method
// https://tc39.github.io/ecma262/#sec-string.prototype.sub
$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('sub') }, {
  sub: function sub() {
    return createHTML(this, 'sub', '', '');
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/create-html":"../../../node_modules/core-js/internals/create-html.js","../internals/forced-string-html-method":"../../../node_modules/core-js/internals/forced-string-html-method.js"}],"../../../node_modules/core-js/modules/es.string.sup.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var createHTML = require('../internals/create-html');
var forcedStringHTMLMethod = require('../internals/forced-string-html-method');

// `String.prototype.sup` method
// https://tc39.github.io/ecma262/#sec-string.prototype.sup
$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('sup') }, {
  sup: function sup() {
    return createHTML(this, 'sup', '', '');
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/create-html":"../../../node_modules/core-js/internals/create-html.js","../internals/forced-string-html-method":"../../../node_modules/core-js/internals/forced-string-html-method.js"}],"../../../node_modules/core-js/internals/inherit-if-required.js":[function(require,module,exports) {
var isObject = require('../internals/is-object');
var setPrototypeOf = require('../internals/object-set-prototype-of');

// makes subclassing work correct for wrapped built-ins
module.exports = function ($this, dummy, Wrapper) {
  var NewTarget, NewTargetPrototype;
  if (
    // it can work only with native `setPrototypeOf`
    setPrototypeOf &&
    // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
    typeof (NewTarget = dummy.constructor) == 'function' &&
    NewTarget !== Wrapper &&
    isObject(NewTargetPrototype = NewTarget.prototype) &&
    NewTargetPrototype !== Wrapper.prototype
  ) setPrototypeOf($this, NewTargetPrototype);
  return $this;
};

},{"../internals/is-object":"../../../node_modules/core-js/internals/is-object.js","../internals/object-set-prototype-of":"../../../node_modules/core-js/internals/object-set-prototype-of.js"}],"../../../node_modules/core-js/modules/es.regexp.constructor.js":[function(require,module,exports) {

var DESCRIPTORS = require('../internals/descriptors');
var global = require('../internals/global');
var isForced = require('../internals/is-forced');
var inheritIfRequired = require('../internals/inherit-if-required');
var defineProperty = require('../internals/object-define-property').f;
var getOwnPropertyNames = require('../internals/object-get-own-property-names').f;
var isRegExp = require('../internals/is-regexp');
var getFlags = require('../internals/regexp-flags');
var redefine = require('../internals/redefine');
var fails = require('../internals/fails');
var setSpecies = require('../internals/set-species');
var wellKnownSymbol = require('../internals/well-known-symbol');

var MATCH = wellKnownSymbol('match');
var NativeRegExp = global.RegExp;
var RegExpPrototype = NativeRegExp.prototype;
var re1 = /a/g;
var re2 = /a/g;

// "new" should create a new object, old webkit bug
var CORRECT_NEW = new NativeRegExp(re1) !== re1;

var FORCED = DESCRIPTORS && isForced('RegExp', (!CORRECT_NEW || fails(function () {
  re2[MATCH] = false;
  // RegExp constructor can alter flags and IsRegExp works correct with @@match
  return NativeRegExp(re1) != re1 || NativeRegExp(re2) == re2 || NativeRegExp(re1, 'i') != '/a/i';
})));

// `RegExp` constructor
// https://tc39.github.io/ecma262/#sec-regexp-constructor
if (FORCED) {
  var RegExpWrapper = function RegExp(pattern, flags) {
    var thisIsRegExp = this instanceof RegExpWrapper;
    var patternIsRegExp = isRegExp(pattern);
    var flagsAreUndefined = flags === undefined;
    return !thisIsRegExp && patternIsRegExp && pattern.constructor === RegExpWrapper && flagsAreUndefined ? pattern
      : inheritIfRequired(CORRECT_NEW
        ? new NativeRegExp(patternIsRegExp && !flagsAreUndefined ? pattern.source : pattern, flags)
        : NativeRegExp((patternIsRegExp = pattern instanceof RegExpWrapper)
          ? pattern.source
          : pattern, patternIsRegExp && flagsAreUndefined ? getFlags.call(pattern) : flags)
      , thisIsRegExp ? this : RegExpPrototype, RegExpWrapper);
  };
  var proxy = function (key) {
    key in RegExpWrapper || defineProperty(RegExpWrapper, key, {
      configurable: true,
      get: function () { return NativeRegExp[key]; },
      set: function (it) { NativeRegExp[key] = it; }
    });
  };
  var keys = getOwnPropertyNames(NativeRegExp);
  var index = 0;
  while (keys.length > index) proxy(keys[index++]);
  RegExpPrototype.constructor = RegExpWrapper;
  RegExpWrapper.prototype = RegExpPrototype;
  redefine(global, 'RegExp', RegExpWrapper);
}

// https://tc39.github.io/ecma262/#sec-get-regexp-@@species
setSpecies('RegExp');

},{"../internals/descriptors":"../../../node_modules/core-js/internals/descriptors.js","../internals/global":"../../../node_modules/core-js/internals/global.js","../internals/is-forced":"../../../node_modules/core-js/internals/is-forced.js","../internals/inherit-if-required":"../../../node_modules/core-js/internals/inherit-if-required.js","../internals/object-define-property":"../../../node_modules/core-js/internals/object-define-property.js","../internals/object-get-own-property-names":"../../../node_modules/core-js/internals/object-get-own-property-names.js","../internals/is-regexp":"../../../node_modules/core-js/internals/is-regexp.js","../internals/regexp-flags":"../../../node_modules/core-js/internals/regexp-flags.js","../internals/redefine":"../../../node_modules/core-js/internals/redefine.js","../internals/fails":"../../../node_modules/core-js/internals/fails.js","../internals/set-species":"../../../node_modules/core-js/internals/set-species.js","../internals/well-known-symbol":"../../../node_modules/core-js/internals/well-known-symbol.js"}],"../../../node_modules/core-js/modules/es.regexp.exec.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var exec = require('../internals/regexp-exec');

$({ target: 'RegExp', proto: true, forced: /./.exec !== exec }, {
  exec: exec
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/regexp-exec":"../../../node_modules/core-js/internals/regexp-exec.js"}],"../../../node_modules/core-js/modules/es.regexp.flags.js":[function(require,module,exports) {
var DESCRIPTORS = require('../internals/descriptors');
var objectDefinePropertyModule = require('../internals/object-define-property');
var regExpFlags = require('../internals/regexp-flags');

// `RegExp.prototype.flags` getter
// https://tc39.github.io/ecma262/#sec-get-regexp.prototype.flags
if (DESCRIPTORS && /./g.flags != 'g') {
  objectDefinePropertyModule.f(RegExp.prototype, 'flags', {
    configurable: true,
    get: regExpFlags
  });
}

},{"../internals/descriptors":"../../../node_modules/core-js/internals/descriptors.js","../internals/object-define-property":"../../../node_modules/core-js/internals/object-define-property.js","../internals/regexp-flags":"../../../node_modules/core-js/internals/regexp-flags.js"}],"../../../node_modules/core-js/modules/es.regexp.to-string.js":[function(require,module,exports) {
'use strict';
var redefine = require('../internals/redefine');
var anObject = require('../internals/an-object');
var fails = require('../internals/fails');
var flags = require('../internals/regexp-flags');

var TO_STRING = 'toString';
var RegExpPrototype = RegExp.prototype;
var nativeToString = RegExpPrototype[TO_STRING];

var NOT_GENERIC = fails(function () { return nativeToString.call({ source: 'a', flags: 'b' }) != '/a/b'; });
// FF44- RegExp#toString has a wrong name
var INCORRECT_NAME = nativeToString.name != TO_STRING;

// `RegExp.prototype.toString` method
// https://tc39.github.io/ecma262/#sec-regexp.prototype.tostring
if (NOT_GENERIC || INCORRECT_NAME) {
  redefine(RegExp.prototype, TO_STRING, function toString() {
    var R = anObject(this);
    var p = String(R.source);
    var rf = R.flags;
    var f = String(rf === undefined && R instanceof RegExp && !('flags' in RegExpPrototype) ? flags.call(R) : rf);
    return '/' + p + '/' + f;
  }, { unsafe: true });
}

},{"../internals/redefine":"../../../node_modules/core-js/internals/redefine.js","../internals/an-object":"../../../node_modules/core-js/internals/an-object.js","../internals/fails":"../../../node_modules/core-js/internals/fails.js","../internals/regexp-flags":"../../../node_modules/core-js/internals/regexp-flags.js"}],"../../../node_modules/core-js/internals/parse-int.js":[function(require,module,exports) {

var global = require('../internals/global');
var trim = require('../internals/string-trim').trim;
var whitespaces = require('../internals/whitespaces');

var nativeParseInt = global.parseInt;
var hex = /^[+-]?0[Xx]/;
var FORCED = nativeParseInt(whitespaces + '08') !== 8 || nativeParseInt(whitespaces + '0x16') !== 22;

// `parseInt` method
// https://tc39.github.io/ecma262/#sec-parseint-string-radix
module.exports = FORCED ? function parseInt(string, radix) {
  var S = trim(String(string));
  return nativeParseInt(S, (radix >>> 0) || (hex.test(S) ? 16 : 10));
} : nativeParseInt;

},{"../internals/global":"../../../node_modules/core-js/internals/global.js","../internals/string-trim":"../../../node_modules/core-js/internals/string-trim.js","../internals/whitespaces":"../../../node_modules/core-js/internals/whitespaces.js"}],"../../../node_modules/core-js/modules/es.parse-int.js":[function(require,module,exports) {
var $ = require('../internals/export');
var parseIntImplementation = require('../internals/parse-int');

// `parseInt` method
// https://tc39.github.io/ecma262/#sec-parseint-string-radix
$({ global: true, forced: parseInt != parseIntImplementation }, {
  parseInt: parseIntImplementation
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/parse-int":"../../../node_modules/core-js/internals/parse-int.js"}],"../../../node_modules/core-js/internals/parse-float.js":[function(require,module,exports) {

var global = require('../internals/global');
var trim = require('../internals/string-trim').trim;
var whitespaces = require('../internals/whitespaces');

var nativeParseFloat = global.parseFloat;
var FORCED = 1 / nativeParseFloat(whitespaces + '-0') !== -Infinity;

// `parseFloat` method
// https://tc39.github.io/ecma262/#sec-parsefloat-string
module.exports = FORCED ? function parseFloat(string) {
  var trimmedString = trim(String(string));
  var result = nativeParseFloat(trimmedString);
  return result === 0 && trimmedString.charAt(0) == '-' ? -0 : result;
} : nativeParseFloat;

},{"../internals/global":"../../../node_modules/core-js/internals/global.js","../internals/string-trim":"../../../node_modules/core-js/internals/string-trim.js","../internals/whitespaces":"../../../node_modules/core-js/internals/whitespaces.js"}],"../../../node_modules/core-js/modules/es.parse-float.js":[function(require,module,exports) {
var $ = require('../internals/export');
var parseFloatImplementation = require('../internals/parse-float');

// `parseFloat` method
// https://tc39.github.io/ecma262/#sec-parsefloat-string
$({ global: true, forced: parseFloat != parseFloatImplementation }, {
  parseFloat: parseFloatImplementation
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/parse-float":"../../../node_modules/core-js/internals/parse-float.js"}],"../../../node_modules/core-js/modules/es.number.constructor.js":[function(require,module,exports) {

'use strict';
var DESCRIPTORS = require('../internals/descriptors');
var global = require('../internals/global');
var isForced = require('../internals/is-forced');
var redefine = require('../internals/redefine');
var has = require('../internals/has');
var classof = require('../internals/classof-raw');
var inheritIfRequired = require('../internals/inherit-if-required');
var toPrimitive = require('../internals/to-primitive');
var fails = require('../internals/fails');
var create = require('../internals/object-create');
var getOwnPropertyNames = require('../internals/object-get-own-property-names').f;
var getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;
var defineProperty = require('../internals/object-define-property').f;
var trim = require('../internals/string-trim').trim;

var NUMBER = 'Number';
var NativeNumber = global[NUMBER];
var NumberPrototype = NativeNumber.prototype;

// Opera ~12 has broken Object#toString
var BROKEN_CLASSOF = classof(create(NumberPrototype)) == NUMBER;

// `ToNumber` abstract operation
// https://tc39.github.io/ecma262/#sec-tonumber
var toNumber = function (argument) {
  var it = toPrimitive(argument, false);
  var first, third, radix, maxCode, digits, length, index, code;
  if (typeof it == 'string' && it.length > 2) {
    it = trim(it);
    first = it.charCodeAt(0);
    if (first === 43 || first === 45) {
      third = it.charCodeAt(2);
      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if (first === 48) {
      switch (it.charCodeAt(1)) {
        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal of /^0b[01]+$/i
        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal of /^0o[0-7]+$/i
        default: return +it;
      }
      digits = it.slice(2);
      length = digits.length;
      for (index = 0; index < length; index++) {
        code = digits.charCodeAt(index);
        // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols
        if (code < 48 || code > maxCode) return NaN;
      } return parseInt(digits, radix);
    }
  } return +it;
};

// `Number` constructor
// https://tc39.github.io/ecma262/#sec-number-constructor
if (isForced(NUMBER, !NativeNumber(' 0o1') || !NativeNumber('0b1') || NativeNumber('+0x1'))) {
  var NumberWrapper = function Number(value) {
    var it = arguments.length < 1 ? 0 : value;
    var dummy = this;
    return dummy instanceof NumberWrapper
      // check on 1..constructor(foo) case
      && (BROKEN_CLASSOF ? fails(function () { NumberPrototype.valueOf.call(dummy); }) : classof(dummy) != NUMBER)
        ? inheritIfRequired(new NativeNumber(toNumber(it)), dummy, NumberWrapper) : toNumber(it);
  };
  for (var keys = DESCRIPTORS ? getOwnPropertyNames(NativeNumber) : (
    // ES3:
    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
    // ES2015 (in case, if modules with ES2015 Number statics required before):
    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
  ).split(','), j = 0, key; keys.length > j; j++) {
    if (has(NativeNumber, key = keys[j]) && !has(NumberWrapper, key)) {
      defineProperty(NumberWrapper, key, getOwnPropertyDescriptor(NativeNumber, key));
    }
  }
  NumberWrapper.prototype = NumberPrototype;
  NumberPrototype.constructor = NumberWrapper;
  redefine(global, NUMBER, NumberWrapper);
}

},{"../internals/descriptors":"../../../node_modules/core-js/internals/descriptors.js","../internals/global":"../../../node_modules/core-js/internals/global.js","../internals/is-forced":"../../../node_modules/core-js/internals/is-forced.js","../internals/redefine":"../../../node_modules/core-js/internals/redefine.js","../internals/has":"../../../node_modules/core-js/internals/has.js","../internals/classof-raw":"../../../node_modules/core-js/internals/classof-raw.js","../internals/inherit-if-required":"../../../node_modules/core-js/internals/inherit-if-required.js","../internals/to-primitive":"../../../node_modules/core-js/internals/to-primitive.js","../internals/fails":"../../../node_modules/core-js/internals/fails.js","../internals/object-create":"../../../node_modules/core-js/internals/object-create.js","../internals/object-get-own-property-names":"../../../node_modules/core-js/internals/object-get-own-property-names.js","../internals/object-get-own-property-descriptor":"../../../node_modules/core-js/internals/object-get-own-property-descriptor.js","../internals/object-define-property":"../../../node_modules/core-js/internals/object-define-property.js","../internals/string-trim":"../../../node_modules/core-js/internals/string-trim.js"}],"../../../node_modules/core-js/modules/es.number.epsilon.js":[function(require,module,exports) {
var $ = require('../internals/export');

// `Number.EPSILON` constant
// https://tc39.github.io/ecma262/#sec-number.epsilon
$({ target: 'Number', stat: true }, {
  EPSILON: Math.pow(2, -52)
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js"}],"../../../node_modules/core-js/internals/number-is-finite.js":[function(require,module,exports) {

var global = require('../internals/global');

var globalIsFinite = global.isFinite;

// `Number.isFinite` method
// https://tc39.github.io/ecma262/#sec-number.isfinite
module.exports = Number.isFinite || function isFinite(it) {
  return typeof it == 'number' && globalIsFinite(it);
};

},{"../internals/global":"../../../node_modules/core-js/internals/global.js"}],"../../../node_modules/core-js/modules/es.number.is-finite.js":[function(require,module,exports) {
var $ = require('../internals/export');
var numberIsFinite = require('../internals/number-is-finite');

// `Number.isFinite` method
// https://tc39.github.io/ecma262/#sec-number.isfinite
$({ target: 'Number', stat: true }, { isFinite: numberIsFinite });

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/number-is-finite":"../../../node_modules/core-js/internals/number-is-finite.js"}],"../../../node_modules/core-js/internals/is-integer.js":[function(require,module,exports) {
var isObject = require('../internals/is-object');

var floor = Math.floor;

// `Number.isInteger` method implementation
// https://tc39.github.io/ecma262/#sec-number.isinteger
module.exports = function isInteger(it) {
  return !isObject(it) && isFinite(it) && floor(it) === it;
};

},{"../internals/is-object":"../../../node_modules/core-js/internals/is-object.js"}],"../../../node_modules/core-js/modules/es.number.is-integer.js":[function(require,module,exports) {
var $ = require('../internals/export');
var isInteger = require('../internals/is-integer');

// `Number.isInteger` method
// https://tc39.github.io/ecma262/#sec-number.isinteger
$({ target: 'Number', stat: true }, {
  isInteger: isInteger
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/is-integer":"../../../node_modules/core-js/internals/is-integer.js"}],"../../../node_modules/core-js/modules/es.number.is-nan.js":[function(require,module,exports) {
var $ = require('../internals/export');

// `Number.isNaN` method
// https://tc39.github.io/ecma262/#sec-number.isnan
$({ target: 'Number', stat: true }, {
  isNaN: function isNaN(number) {
    // eslint-disable-next-line no-self-compare
    return number != number;
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js"}],"../../../node_modules/core-js/modules/es.number.is-safe-integer.js":[function(require,module,exports) {
var $ = require('../internals/export');
var isInteger = require('../internals/is-integer');

var abs = Math.abs;

// `Number.isSafeInteger` method
// https://tc39.github.io/ecma262/#sec-number.issafeinteger
$({ target: 'Number', stat: true }, {
  isSafeInteger: function isSafeInteger(number) {
    return isInteger(number) && abs(number) <= 0x1FFFFFFFFFFFFF;
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/is-integer":"../../../node_modules/core-js/internals/is-integer.js"}],"../../../node_modules/core-js/modules/es.number.max-safe-integer.js":[function(require,module,exports) {
var $ = require('../internals/export');

// `Number.MAX_SAFE_INTEGER` constant
// https://tc39.github.io/ecma262/#sec-number.max_safe_integer
$({ target: 'Number', stat: true }, {
  MAX_SAFE_INTEGER: 0x1FFFFFFFFFFFFF
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js"}],"../../../node_modules/core-js/modules/es.number.min-safe-integer.js":[function(require,module,exports) {
var $ = require('../internals/export');

// `Number.MIN_SAFE_INTEGER` constant
// https://tc39.github.io/ecma262/#sec-number.min_safe_integer
$({ target: 'Number', stat: true }, {
  MIN_SAFE_INTEGER: -0x1FFFFFFFFFFFFF
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js"}],"../../../node_modules/core-js/modules/es.number.parse-float.js":[function(require,module,exports) {
var $ = require('../internals/export');
var parseFloat = require('../internals/parse-float');

// `Number.parseFloat` method
// https://tc39.github.io/ecma262/#sec-number.parseFloat
$({ target: 'Number', stat: true, forced: Number.parseFloat != parseFloat }, {
  parseFloat: parseFloat
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/parse-float":"../../../node_modules/core-js/internals/parse-float.js"}],"../../../node_modules/core-js/modules/es.number.parse-int.js":[function(require,module,exports) {
var $ = require('../internals/export');
var parseInt = require('../internals/parse-int');

// `Number.parseInt` method
// https://tc39.github.io/ecma262/#sec-number.parseint
$({ target: 'Number', stat: true, forced: Number.parseInt != parseInt }, {
  parseInt: parseInt
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/parse-int":"../../../node_modules/core-js/internals/parse-int.js"}],"../../../node_modules/core-js/internals/this-number-value.js":[function(require,module,exports) {
var classof = require('../internals/classof-raw');

// `thisNumberValue` abstract operation
// https://tc39.github.io/ecma262/#sec-thisnumbervalue
module.exports = function (value) {
  if (typeof value != 'number' && classof(value) != 'Number') {
    throw TypeError('Incorrect invocation');
  }
  return +value;
};

},{"../internals/classof-raw":"../../../node_modules/core-js/internals/classof-raw.js"}],"../../../node_modules/core-js/modules/es.number.to-fixed.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var toInteger = require('../internals/to-integer');
var thisNumberValue = require('../internals/this-number-value');
var repeat = require('../internals/string-repeat');
var fails = require('../internals/fails');

var nativeToFixed = 1.0.toFixed;
var floor = Math.floor;

var pow = function (x, n, acc) {
  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
};

var log = function (x) {
  var n = 0;
  var x2 = x;
  while (x2 >= 4096) {
    n += 12;
    x2 /= 4096;
  }
  while (x2 >= 2) {
    n += 1;
    x2 /= 2;
  } return n;
};

var FORCED = nativeToFixed && (
  0.00008.toFixed(3) !== '0.000' ||
  0.9.toFixed(0) !== '1' ||
  1.255.toFixed(2) !== '1.25' ||
  1000000000000000128.0.toFixed(0) !== '1000000000000000128'
) || !fails(function () {
  // V8 ~ Android 4.3-
  nativeToFixed.call({});
});

// `Number.prototype.toFixed` method
// https://tc39.github.io/ecma262/#sec-number.prototype.tofixed
$({ target: 'Number', proto: true, forced: FORCED }, {
  // eslint-disable-next-line max-statements
  toFixed: function toFixed(fractionDigits) {
    var number = thisNumberValue(this);
    var fractDigits = toInteger(fractionDigits);
    var data = [0, 0, 0, 0, 0, 0];
    var sign = '';
    var result = '0';
    var e, z, j, k;

    var multiply = function (n, c) {
      var index = -1;
      var c2 = c;
      while (++index < 6) {
        c2 += n * data[index];
        data[index] = c2 % 1e7;
        c2 = floor(c2 / 1e7);
      }
    };

    var divide = function (n) {
      var index = 6;
      var c = 0;
      while (--index >= 0) {
        c += data[index];
        data[index] = floor(c / n);
        c = (c % n) * 1e7;
      }
    };

    var dataToString = function () {
      var index = 6;
      var s = '';
      while (--index >= 0) {
        if (s !== '' || index === 0 || data[index] !== 0) {
          var t = String(data[index]);
          s = s === '' ? t : s + repeat.call('0', 7 - t.length) + t;
        }
      } return s;
    };

    if (fractDigits < 0 || fractDigits > 20) throw RangeError('Incorrect fraction digits');
    // eslint-disable-next-line no-self-compare
    if (number != number) return 'NaN';
    if (number <= -1e21 || number >= 1e21) return String(number);
    if (number < 0) {
      sign = '-';
      number = -number;
    }
    if (number > 1e-21) {
      e = log(number * pow(2, 69, 1)) - 69;
      z = e < 0 ? number * pow(2, -e, 1) : number / pow(2, e, 1);
      z *= 0x10000000000000;
      e = 52 - e;
      if (e > 0) {
        multiply(0, z);
        j = fractDigits;
        while (j >= 7) {
          multiply(1e7, 0);
          j -= 7;
        }
        multiply(pow(10, j, 1), 0);
        j = e - 1;
        while (j >= 23) {
          divide(1 << 23);
          j -= 23;
        }
        divide(1 << j);
        multiply(1, 1);
        divide(2);
        result = dataToString();
      } else {
        multiply(0, z);
        multiply(1 << -e, 0);
        result = dataToString() + repeat.call('0', fractDigits);
      }
    }
    if (fractDigits > 0) {
      k = result.length;
      result = sign + (k <= fractDigits
        ? '0.' + repeat.call('0', fractDigits - k) + result
        : result.slice(0, k - fractDigits) + '.' + result.slice(k - fractDigits));
    } else {
      result = sign + result;
    } return result;
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/to-integer":"../../../node_modules/core-js/internals/to-integer.js","../internals/this-number-value":"../../../node_modules/core-js/internals/this-number-value.js","../internals/string-repeat":"../../../node_modules/core-js/internals/string-repeat.js","../internals/fails":"../../../node_modules/core-js/internals/fails.js"}],"../../../node_modules/core-js/modules/es.number.to-precision.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var fails = require('../internals/fails');
var thisNumberValue = require('../internals/this-number-value');

var nativeToPrecision = 1.0.toPrecision;

var FORCED = fails(function () {
  // IE7-
  return nativeToPrecision.call(1, undefined) !== '1';
}) || !fails(function () {
  // V8 ~ Android 4.3-
  nativeToPrecision.call({});
});

// `Number.prototype.toPrecision` method
// https://tc39.github.io/ecma262/#sec-number.prototype.toprecision
$({ target: 'Number', proto: true, forced: FORCED }, {
  toPrecision: function toPrecision(precision) {
    return precision === undefined
      ? nativeToPrecision.call(thisNumberValue(this))
      : nativeToPrecision.call(thisNumberValue(this), precision);
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/fails":"../../../node_modules/core-js/internals/fails.js","../internals/this-number-value":"../../../node_modules/core-js/internals/this-number-value.js"}],"../../../node_modules/core-js/internals/math-log1p.js":[function(require,module,exports) {
var log = Math.log;

// `Math.log1p` method implementation
// https://tc39.github.io/ecma262/#sec-math.log1p
module.exports = Math.log1p || function log1p(x) {
  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : log(1 + x);
};

},{}],"../../../node_modules/core-js/modules/es.math.acosh.js":[function(require,module,exports) {
var $ = require('../internals/export');
var log1p = require('../internals/math-log1p');

var nativeAcosh = Math.acosh;
var log = Math.log;
var sqrt = Math.sqrt;
var LN2 = Math.LN2;

var FORCED = !nativeAcosh
  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
  || Math.floor(nativeAcosh(Number.MAX_VALUE)) != 710
  // Tor Browser bug: Math.acosh(Infinity) -> NaN
  || nativeAcosh(Infinity) != Infinity;

// `Math.acosh` method
// https://tc39.github.io/ecma262/#sec-math.acosh
$({ target: 'Math', stat: true, forced: FORCED }, {
  acosh: function acosh(x) {
    return (x = +x) < 1 ? NaN : x > 94906265.62425156
      ? log(x) + LN2
      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/math-log1p":"../../../node_modules/core-js/internals/math-log1p.js"}],"../../../node_modules/core-js/modules/es.math.asinh.js":[function(require,module,exports) {
var $ = require('../internals/export');

var nativeAsinh = Math.asinh;
var log = Math.log;
var sqrt = Math.sqrt;

function asinh(x) {
  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : log(x + sqrt(x * x + 1));
}

// `Math.asinh` method
// https://tc39.github.io/ecma262/#sec-math.asinh
// Tor Browser bug: Math.asinh(0) -> -0
$({ target: 'Math', stat: true, forced: !(nativeAsinh && 1 / nativeAsinh(0) > 0) }, {
  asinh: asinh
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js"}],"../../../node_modules/core-js/modules/es.math.atanh.js":[function(require,module,exports) {
var $ = require('../internals/export');

var nativeAtanh = Math.atanh;
var log = Math.log;

// `Math.atanh` method
// https://tc39.github.io/ecma262/#sec-math.atanh
// Tor Browser bug: Math.atanh(-0) -> 0
$({ target: 'Math', stat: true, forced: !(nativeAtanh && 1 / nativeAtanh(-0) < 0) }, {
  atanh: function atanh(x) {
    return (x = +x) == 0 ? x : log((1 + x) / (1 - x)) / 2;
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js"}],"../../../node_modules/core-js/internals/math-sign.js":[function(require,module,exports) {
// `Math.sign` method implementation
// https://tc39.github.io/ecma262/#sec-math.sign
module.exports = Math.sign || function sign(x) {
  // eslint-disable-next-line no-self-compare
  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
};

},{}],"../../../node_modules/core-js/modules/es.math.cbrt.js":[function(require,module,exports) {
var $ = require('../internals/export');
var sign = require('../internals/math-sign');

var abs = Math.abs;
var pow = Math.pow;

// `Math.cbrt` method
// https://tc39.github.io/ecma262/#sec-math.cbrt
$({ target: 'Math', stat: true }, {
  cbrt: function cbrt(x) {
    return sign(x = +x) * pow(abs(x), 1 / 3);
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/math-sign":"../../../node_modules/core-js/internals/math-sign.js"}],"../../../node_modules/core-js/modules/es.math.clz32.js":[function(require,module,exports) {
var $ = require('../internals/export');

var floor = Math.floor;
var log = Math.log;
var LOG2E = Math.LOG2E;

// `Math.clz32` method
// https://tc39.github.io/ecma262/#sec-math.clz32
$({ target: 'Math', stat: true }, {
  clz32: function clz32(x) {
    return (x >>>= 0) ? 31 - floor(log(x + 0.5) * LOG2E) : 32;
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js"}],"../../../node_modules/core-js/internals/math-expm1.js":[function(require,module,exports) {
var nativeExpm1 = Math.expm1;
var exp = Math.exp;

// `Math.expm1` method implementation
// https://tc39.github.io/ecma262/#sec-math.expm1
module.exports = (!nativeExpm1
  // Old FF bug
  || nativeExpm1(10) > 22025.465794806719 || nativeExpm1(10) < 22025.4657948067165168
  // Tor Browser bug
  || nativeExpm1(-2e-17) != -2e-17
) ? function expm1(x) {
  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : exp(x) - 1;
} : nativeExpm1;

},{}],"../../../node_modules/core-js/modules/es.math.cosh.js":[function(require,module,exports) {
var $ = require('../internals/export');
var expm1 = require('../internals/math-expm1');

var nativeCosh = Math.cosh;
var abs = Math.abs;
var E = Math.E;

// `Math.cosh` method
// https://tc39.github.io/ecma262/#sec-math.cosh
$({ target: 'Math', stat: true, forced: !nativeCosh || nativeCosh(710) === Infinity }, {
  cosh: function cosh(x) {
    var t = expm1(abs(x) - 1) + 1;
    return (t + 1 / (t * E * E)) * (E / 2);
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/math-expm1":"../../../node_modules/core-js/internals/math-expm1.js"}],"../../../node_modules/core-js/modules/es.math.expm1.js":[function(require,module,exports) {
var $ = require('../internals/export');
var expm1 = require('../internals/math-expm1');

// `Math.expm1` method
// https://tc39.github.io/ecma262/#sec-math.expm1
$({ target: 'Math', stat: true, forced: expm1 != Math.expm1 }, { expm1: expm1 });

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/math-expm1":"../../../node_modules/core-js/internals/math-expm1.js"}],"../../../node_modules/core-js/internals/math-fround.js":[function(require,module,exports) {
var sign = require('../internals/math-sign');

var abs = Math.abs;
var pow = Math.pow;
var EPSILON = pow(2, -52);
var EPSILON32 = pow(2, -23);
var MAX32 = pow(2, 127) * (2 - EPSILON32);
var MIN32 = pow(2, -126);

var roundTiesToEven = function (n) {
  return n + 1 / EPSILON - 1 / EPSILON;
};

// `Math.fround` method implementation
// https://tc39.github.io/ecma262/#sec-math.fround
module.exports = Math.fround || function fround(x) {
  var $abs = abs(x);
  var $sign = sign(x);
  var a, result;
  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
  a = (1 + EPSILON32 / EPSILON) * $abs;
  result = a - (a - $abs);
  // eslint-disable-next-line no-self-compare
  if (result > MAX32 || result != result) return $sign * Infinity;
  return $sign * result;
};

},{"../internals/math-sign":"../../../node_modules/core-js/internals/math-sign.js"}],"../../../node_modules/core-js/modules/es.math.fround.js":[function(require,module,exports) {
var $ = require('../internals/export');
var fround = require('../internals/math-fround');

// `Math.fround` method
// https://tc39.github.io/ecma262/#sec-math.fround
$({ target: 'Math', stat: true }, { fround: fround });

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/math-fround":"../../../node_modules/core-js/internals/math-fround.js"}],"../../../node_modules/core-js/modules/es.math.hypot.js":[function(require,module,exports) {
var $ = require('../internals/export');

var abs = Math.abs;
var sqrt = Math.sqrt;

// `Math.hypot` method
// https://tc39.github.io/ecma262/#sec-math.hypot
$({ target: 'Math', stat: true }, {
  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars
    var sum = 0;
    var i = 0;
    var aLen = arguments.length;
    var larg = 0;
    var arg, div;
    while (i < aLen) {
      arg = abs(arguments[i++]);
      if (larg < arg) {
        div = larg / arg;
        sum = sum * div * div + 1;
        larg = arg;
      } else if (arg > 0) {
        div = arg / larg;
        sum += div * div;
      } else sum += arg;
    }
    return larg === Infinity ? Infinity : larg * sqrt(sum);
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js"}],"../../../node_modules/core-js/modules/es.math.imul.js":[function(require,module,exports) {
var $ = require('../internals/export');
var fails = require('../internals/fails');

var nativeImul = Math.imul;

var FORCED = fails(function () {
  return nativeImul(0xFFFFFFFF, 5) != -5 || nativeImul.length != 2;
});

// `Math.imul` method
// https://tc39.github.io/ecma262/#sec-math.imul
// some WebKit versions fails with big numbers, some has wrong arity
$({ target: 'Math', stat: true, forced: FORCED }, {
  imul: function imul(x, y) {
    var UINT16 = 0xFFFF;
    var xn = +x;
    var yn = +y;
    var xl = UINT16 & xn;
    var yl = UINT16 & yn;
    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/fails":"../../../node_modules/core-js/internals/fails.js"}],"../../../node_modules/core-js/modules/es.math.log10.js":[function(require,module,exports) {
var $ = require('../internals/export');

var log = Math.log;
var LOG10E = Math.LOG10E;

// `Math.log10` method
// https://tc39.github.io/ecma262/#sec-math.log10
$({ target: 'Math', stat: true }, {
  log10: function log10(x) {
    return log(x) * LOG10E;
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js"}],"../../../node_modules/core-js/modules/es.math.log1p.js":[function(require,module,exports) {
var $ = require('../internals/export');
var log1p = require('../internals/math-log1p');

// `Math.log1p` method
// https://tc39.github.io/ecma262/#sec-math.log1p
$({ target: 'Math', stat: true }, { log1p: log1p });

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/math-log1p":"../../../node_modules/core-js/internals/math-log1p.js"}],"../../../node_modules/core-js/modules/es.math.log2.js":[function(require,module,exports) {
var $ = require('../internals/export');

var log = Math.log;
var LN2 = Math.LN2;

// `Math.log2` method
// https://tc39.github.io/ecma262/#sec-math.log2
$({ target: 'Math', stat: true }, {
  log2: function log2(x) {
    return log(x) / LN2;
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js"}],"../../../node_modules/core-js/modules/es.math.sign.js":[function(require,module,exports) {
var $ = require('../internals/export');
var sign = require('../internals/math-sign');

// `Math.sign` method
// https://tc39.github.io/ecma262/#sec-math.sign
$({ target: 'Math', stat: true }, {
  sign: sign
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/math-sign":"../../../node_modules/core-js/internals/math-sign.js"}],"../../../node_modules/core-js/modules/es.math.sinh.js":[function(require,module,exports) {
var $ = require('../internals/export');
var fails = require('../internals/fails');
var expm1 = require('../internals/math-expm1');

var abs = Math.abs;
var exp = Math.exp;
var E = Math.E;

var FORCED = fails(function () {
  return Math.sinh(-2e-17) != -2e-17;
});

// `Math.sinh` method
// https://tc39.github.io/ecma262/#sec-math.sinh
// V8 near Chromium 38 has a problem with very small numbers
$({ target: 'Math', stat: true, forced: FORCED }, {
  sinh: function sinh(x) {
    return abs(x = +x) < 1 ? (expm1(x) - expm1(-x)) / 2 : (exp(x - 1) - exp(-x - 1)) * (E / 2);
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/fails":"../../../node_modules/core-js/internals/fails.js","../internals/math-expm1":"../../../node_modules/core-js/internals/math-expm1.js"}],"../../../node_modules/core-js/modules/es.math.tanh.js":[function(require,module,exports) {
var $ = require('../internals/export');
var expm1 = require('../internals/math-expm1');

var exp = Math.exp;

// `Math.tanh` method
// https://tc39.github.io/ecma262/#sec-math.tanh
$({ target: 'Math', stat: true }, {
  tanh: function tanh(x) {
    var a = expm1(x = +x);
    var b = expm1(-x);
    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/math-expm1":"../../../node_modules/core-js/internals/math-expm1.js"}],"../../../node_modules/core-js/modules/es.math.to-string-tag.js":[function(require,module,exports) {
var setToStringTag = require('../internals/set-to-string-tag');

// Math[@@toStringTag] property
// https://tc39.github.io/ecma262/#sec-math-@@tostringtag
setToStringTag(Math, 'Math', true);

},{"../internals/set-to-string-tag":"../../../node_modules/core-js/internals/set-to-string-tag.js"}],"../../../node_modules/core-js/modules/es.math.trunc.js":[function(require,module,exports) {
var $ = require('../internals/export');

var ceil = Math.ceil;
var floor = Math.floor;

// `Math.trunc` method
// https://tc39.github.io/ecma262/#sec-math.trunc
$({ target: 'Math', stat: true }, {
  trunc: function trunc(it) {
    return (it > 0 ? floor : ceil)(it);
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js"}],"../../../node_modules/core-js/modules/es.date.now.js":[function(require,module,exports) {
var $ = require('../internals/export');

// `Date.now` method
// https://tc39.github.io/ecma262/#sec-date.now
$({ target: 'Date', stat: true }, {
  now: function now() {
    return new Date().getTime();
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js"}],"../../../node_modules/core-js/modules/es.date.to-json.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var fails = require('../internals/fails');
var toObject = require('../internals/to-object');
var toPrimitive = require('../internals/to-primitive');

var FORCED = fails(function () {
  return new Date(NaN).toJSON() !== null
    || Date.prototype.toJSON.call({ toISOString: function () { return 1; } }) !== 1;
});

// `Date.prototype.toJSON` method
// https://tc39.github.io/ecma262/#sec-date.prototype.tojson
$({ target: 'Date', proto: true, forced: FORCED }, {
  // eslint-disable-next-line no-unused-vars
  toJSON: function toJSON(key) {
    var O = toObject(this);
    var pv = toPrimitive(O);
    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/fails":"../../../node_modules/core-js/internals/fails.js","../internals/to-object":"../../../node_modules/core-js/internals/to-object.js","../internals/to-primitive":"../../../node_modules/core-js/internals/to-primitive.js"}],"../../../node_modules/core-js/internals/date-to-iso-string.js":[function(require,module,exports) {
'use strict';
var fails = require('../internals/fails');
var padStart = require('../internals/string-pad').start;

var abs = Math.abs;
var DatePrototype = Date.prototype;
var getTime = DatePrototype.getTime;
var nativeDateToISOString = DatePrototype.toISOString;

// `Date.prototype.toISOString` method implementation
// https://tc39.github.io/ecma262/#sec-date.prototype.toisostring
// PhantomJS / old WebKit fails here:
module.exports = (fails(function () {
  return nativeDateToISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
}) || !fails(function () {
  nativeDateToISOString.call(new Date(NaN));
})) ? function toISOString() {
  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
  var date = this;
  var year = date.getUTCFullYear();
  var milliseconds = date.getUTCMilliseconds();
  var sign = year < 0 ? '-' : year > 9999 ? '+' : '';
  return sign + padStart(abs(year), sign ? 6 : 4, 0) +
    '-' + padStart(date.getUTCMonth() + 1, 2, 0) +
    '-' + padStart(date.getUTCDate(), 2, 0) +
    'T' + padStart(date.getUTCHours(), 2, 0) +
    ':' + padStart(date.getUTCMinutes(), 2, 0) +
    ':' + padStart(date.getUTCSeconds(), 2, 0) +
    '.' + padStart(milliseconds, 3, 0) +
    'Z';
} : nativeDateToISOString;

},{"../internals/fails":"../../../node_modules/core-js/internals/fails.js","../internals/string-pad":"../../../node_modules/core-js/internals/string-pad.js"}],"../../../node_modules/core-js/modules/es.date.to-iso-string.js":[function(require,module,exports) {
var $ = require('../internals/export');
var toISOString = require('../internals/date-to-iso-string');

// `Date.prototype.toISOString` method
// https://tc39.github.io/ecma262/#sec-date.prototype.toisostring
// PhantomJS / old WebKit has a broken implementations
$({ target: 'Date', proto: true, forced: Date.prototype.toISOString !== toISOString }, {
  toISOString: toISOString
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/date-to-iso-string":"../../../node_modules/core-js/internals/date-to-iso-string.js"}],"../../../node_modules/core-js/modules/es.date.to-string.js":[function(require,module,exports) {
var redefine = require('../internals/redefine');

var DatePrototype = Date.prototype;
var INVALID_DATE = 'Invalid Date';
var TO_STRING = 'toString';
var nativeDateToString = DatePrototype[TO_STRING];
var getTime = DatePrototype.getTime;

// `Date.prototype.toString` method
// https://tc39.github.io/ecma262/#sec-date.prototype.tostring
if (new Date(NaN) + '' != INVALID_DATE) {
  redefine(DatePrototype, TO_STRING, function toString() {
    var value = getTime.call(this);
    // eslint-disable-next-line no-self-compare
    return value === value ? nativeDateToString.call(this) : INVALID_DATE;
  });
}

},{"../internals/redefine":"../../../node_modules/core-js/internals/redefine.js"}],"../../../node_modules/core-js/internals/date-to-primitive.js":[function(require,module,exports) {
'use strict';
var anObject = require('../internals/an-object');
var toPrimitive = require('../internals/to-primitive');

module.exports = function (hint) {
  if (hint !== 'string' && hint !== 'number' && hint !== 'default') {
    throw TypeError('Incorrect hint');
  } return toPrimitive(anObject(this), hint !== 'number');
};

},{"../internals/an-object":"../../../node_modules/core-js/internals/an-object.js","../internals/to-primitive":"../../../node_modules/core-js/internals/to-primitive.js"}],"../../../node_modules/core-js/modules/es.date.to-primitive.js":[function(require,module,exports) {
var hide = require('../internals/hide');
var dateToPrimitive = require('../internals/date-to-primitive');
var wellKnownSymbol = require('../internals/well-known-symbol');

var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');
var DatePrototype = Date.prototype;

// `Date.prototype[@@toPrimitive]` method
// https://tc39.github.io/ecma262/#sec-date.prototype-@@toprimitive
if (!(TO_PRIMITIVE in DatePrototype)) hide(DatePrototype, TO_PRIMITIVE, dateToPrimitive);

},{"../internals/hide":"../../../node_modules/core-js/internals/hide.js","../internals/date-to-primitive":"../../../node_modules/core-js/internals/date-to-primitive.js","../internals/well-known-symbol":"../../../node_modules/core-js/internals/well-known-symbol.js"}],"../../../node_modules/core-js/modules/es.json.to-string-tag.js":[function(require,module,exports) {

var global = require('../internals/global');
var setToStringTag = require('../internals/set-to-string-tag');

// JSON[@@toStringTag] property
// https://tc39.github.io/ecma262/#sec-json-@@tostringtag
setToStringTag(global.JSON, 'JSON', true);

},{"../internals/global":"../../../node_modules/core-js/internals/global.js","../internals/set-to-string-tag":"../../../node_modules/core-js/internals/set-to-string-tag.js"}],"../../../node_modules/core-js/internals/redefine-all.js":[function(require,module,exports) {
var redefine = require('../internals/redefine');

module.exports = function (target, src, options) {
  for (var key in src) redefine(target, key, src[key], options);
  return target;
};

},{"../internals/redefine":"../../../node_modules/core-js/internals/redefine.js"}],"../../../node_modules/core-js/internals/an-instance.js":[function(require,module,exports) {
module.exports = function (it, Constructor, name) {
  if (!(it instanceof Constructor)) {
    throw TypeError('Incorrect ' + (name ? name + ' ' : '') + 'invocation');
  } return it;
};

},{}],"../../../node_modules/core-js/internals/task.js":[function(require,module,exports) {


var global = require('../internals/global');
var fails = require('../internals/fails');
var classof = require('../internals/classof-raw');
var bind = require('../internals/bind-context');
var html = require('../internals/html');
var createElement = require('../internals/document-create-element');

var location = global.location;
var set = global.setImmediate;
var clear = global.clearImmediate;
var process = global.process;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;

var run = function (id) {
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};

var runner = function (id) {
  return function () {
    run(id);
  };
};

var listener = function (event) {
  run(event.data);
};

var post = function (id) {
  // old engines have not location.origin
  global.postMessage(id + '', location.protocol + '//' + location.host);
};

// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!set || !clear) {
  set = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) args.push(arguments[i++]);
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      (typeof fn == 'function' ? fn : Function(fn)).apply(undefined, args);
    };
    defer(counter);
    return counter;
  };
  clear = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (classof(process) == 'process') {
    defer = function (id) {
      process.nextTick(runner(id));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(runner(id));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = bind(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts && !fails(post)) {
    defer = post;
    global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in createElement('script')) {
    defer = function (id) {
      html.appendChild(createElement('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(runner(id), 0);
    };
  }
}

module.exports = {
  set: set,
  clear: clear
};

},{"../internals/global":"../../../node_modules/core-js/internals/global.js","../internals/fails":"../../../node_modules/core-js/internals/fails.js","../internals/classof-raw":"../../../node_modules/core-js/internals/classof-raw.js","../internals/bind-context":"../../../node_modules/core-js/internals/bind-context.js","../internals/html":"../../../node_modules/core-js/internals/html.js","../internals/document-create-element":"../../../node_modules/core-js/internals/document-create-element.js"}],"../../../node_modules/core-js/internals/microtask.js":[function(require,module,exports) {


var global = require('../internals/global');
var getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;
var classof = require('../internals/classof-raw');
var macrotask = require('../internals/task').set;
var userAgent = require('../internals/user-agent');

var MutationObserver = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var IS_NODE = classof(process) == 'process';
// Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`
var queueMicrotaskDescriptor = getOwnPropertyDescriptor(global, 'queueMicrotask');
var queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;

var flush, head, last, notify, toggle, node, promise;

// modern engines have queueMicrotask method
if (!queueMicrotask) {
  flush = function () {
    var parent, fn;
    if (IS_NODE && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (error) {
        if (head) notify();
        else last = undefined;
        throw error;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // Node.js
  if (IS_NODE) {
    notify = function () {
      process.nextTick(flush);
    };
  // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339
  } else if (MutationObserver && !/(iphone|ipod|ipad).*applewebkit/i.test(userAgent)) {
    toggle = true;
    node = document.createTextNode('');
    new MutationObserver(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (Promise && Promise.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    promise = Promise.resolve(undefined);
    notify = function () {
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }
}

module.exports = queueMicrotask || function (fn) {
  var task = { fn: fn, next: undefined };
  if (last) last.next = task;
  if (!head) {
    head = task;
    notify();
  } last = task;
};

},{"../internals/global":"../../../node_modules/core-js/internals/global.js","../internals/object-get-own-property-descriptor":"../../../node_modules/core-js/internals/object-get-own-property-descriptor.js","../internals/classof-raw":"../../../node_modules/core-js/internals/classof-raw.js","../internals/task":"../../../node_modules/core-js/internals/task.js","../internals/user-agent":"../../../node_modules/core-js/internals/user-agent.js"}],"../../../node_modules/core-js/internals/new-promise-capability.js":[function(require,module,exports) {
'use strict';
var aFunction = require('../internals/a-function');

var PromiseCapability = function (C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject = aFunction(reject);
};

// 25.4.1.5 NewPromiseCapability(C)
module.exports.f = function (C) {
  return new PromiseCapability(C);
};

},{"../internals/a-function":"../../../node_modules/core-js/internals/a-function.js"}],"../../../node_modules/core-js/internals/promise-resolve.js":[function(require,module,exports) {
var anObject = require('../internals/an-object');
var isObject = require('../internals/is-object');
var newPromiseCapability = require('../internals/new-promise-capability');

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};

},{"../internals/an-object":"../../../node_modules/core-js/internals/an-object.js","../internals/is-object":"../../../node_modules/core-js/internals/is-object.js","../internals/new-promise-capability":"../../../node_modules/core-js/internals/new-promise-capability.js"}],"../../../node_modules/core-js/internals/host-report-errors.js":[function(require,module,exports) {

var global = require('../internals/global');

module.exports = function (a, b) {
  var console = global.console;
  if (console && console.error) {
    arguments.length === 1 ? console.error(a) : console.error(a, b);
  }
};

},{"../internals/global":"../../../node_modules/core-js/internals/global.js"}],"../../../node_modules/core-js/internals/perform.js":[function(require,module,exports) {
module.exports = function (exec) {
  try {
    return { error: false, value: exec() };
  } catch (error) {
    return { error: true, value: error };
  }
};

},{}],"../../../node_modules/core-js/modules/es.promise.js":[function(require,module,exports) {


'use strict';
var $ = require('../internals/export');
var IS_PURE = require('../internals/is-pure');
var global = require('../internals/global');
var path = require('../internals/path');
var redefineAll = require('../internals/redefine-all');
var setToStringTag = require('../internals/set-to-string-tag');
var setSpecies = require('../internals/set-species');
var isObject = require('../internals/is-object');
var aFunction = require('../internals/a-function');
var anInstance = require('../internals/an-instance');
var classof = require('../internals/classof-raw');
var iterate = require('../internals/iterate');
var checkCorrectnessOfIteration = require('../internals/check-correctness-of-iteration');
var speciesConstructor = require('../internals/species-constructor');
var task = require('../internals/task').set;
var microtask = require('../internals/microtask');
var promiseResolve = require('../internals/promise-resolve');
var hostReportErrors = require('../internals/host-report-errors');
var newPromiseCapabilityModule = require('../internals/new-promise-capability');
var perform = require('../internals/perform');
var userAgent = require('../internals/user-agent');
var InternalStateModule = require('../internals/internal-state');
var isForced = require('../internals/is-forced');
var wellKnownSymbol = require('../internals/well-known-symbol');

var SPECIES = wellKnownSymbol('species');
var PROMISE = 'Promise';
var getInternalState = InternalStateModule.get;
var setInternalState = InternalStateModule.set;
var getInternalPromiseState = InternalStateModule.getterFor(PROMISE);
var PromiseConstructor = global[PROMISE];
var TypeError = global.TypeError;
var document = global.document;
var process = global.process;
var $fetch = global.fetch;
var versions = process && process.versions;
var v8 = versions && versions.v8 || '';
var newPromiseCapability = newPromiseCapabilityModule.f;
var newGenericPromiseCapability = newPromiseCapability;
var IS_NODE = classof(process) == 'process';
var DISPATCH_EVENT = !!(document && document.createEvent && global.dispatchEvent);
var UNHANDLED_REJECTION = 'unhandledrejection';
var REJECTION_HANDLED = 'rejectionhandled';
var PENDING = 0;
var FULFILLED = 1;
var REJECTED = 2;
var HANDLED = 1;
var UNHANDLED = 2;
var Internal, OwnPromiseCapability, PromiseWrapper;

var FORCED = isForced(PROMISE, function () {
  // correct subclassing with @@species support
  var promise = PromiseConstructor.resolve(1);
  var empty = function () { /* empty */ };
  var FakePromise = (promise.constructor = {})[SPECIES] = function (exec) {
    exec(empty, empty);
  };
  // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
  return !((IS_NODE || typeof PromiseRejectionEvent == 'function')
    && (!IS_PURE || promise['finally'])
    && promise.then(empty) instanceof FakePromise
    // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
    // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
    // we can't detect it synchronously, so just check versions
    && v8.indexOf('6.6') !== 0
    && userAgent.indexOf('Chrome/66') === -1);
});

var INCORRECT_ITERATION = FORCED || !checkCorrectnessOfIteration(function (iterable) {
  PromiseConstructor.all(iterable)['catch'](function () { /* empty */ });
});

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};

var notify = function (promise, state, isReject) {
  if (state.notified) return;
  state.notified = true;
  var chain = state.reactions;
  microtask(function () {
    var value = state.value;
    var ok = state.state == FULFILLED;
    var index = 0;
    // variable length - can't use forEach
    while (chain.length > index) {
      var reaction = chain[index++];
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (state.rejection === UNHANDLED) onHandleUnhandled(promise, state);
            state.rejection = HANDLED;
          }
          if (handler === true) result = value;
          else {
            if (domain) domain.enter();
            result = handler(value); // can throw
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (error) {
        if (domain && !exited) domain.exit();
        reject(error);
      }
    }
    state.reactions = [];
    state.notified = false;
    if (isReject && !state.rejection) onUnhandled(promise, state);
  });
};

var dispatchEvent = function (name, promise, reason) {
  var event, handler;
  if (DISPATCH_EVENT) {
    event = document.createEvent('Event');
    event.promise = promise;
    event.reason = reason;
    event.initEvent(name, false, true);
    global.dispatchEvent(event);
  } else event = { promise: promise, reason: reason };
  if (handler = global['on' + name]) handler(event);
  else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);
};

var onUnhandled = function (promise, state) {
  task.call(global, function () {
    var value = state.value;
    var IS_UNHANDLED = isUnhandled(state);
    var result;
    if (IS_UNHANDLED) {
      result = perform(function () {
        if (IS_NODE) {
          process.emit('unhandledRejection', value, promise);
        } else dispatchEvent(UNHANDLED_REJECTION, promise, value);
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      state.rejection = IS_NODE || isUnhandled(state) ? UNHANDLED : HANDLED;
      if (result.error) throw result.value;
    }
  });
};

var isUnhandled = function (state) {
  return state.rejection !== HANDLED && !state.parent;
};

var onHandleUnhandled = function (promise, state) {
  task.call(global, function () {
    if (IS_NODE) {
      process.emit('rejectionHandled', promise);
    } else dispatchEvent(REJECTION_HANDLED, promise, state.value);
  });
};

var bind = function (fn, promise, state, unwrap) {
  return function (value) {
    fn(promise, state, value, unwrap);
  };
};

var internalReject = function (promise, state, value, unwrap) {
  if (state.done) return;
  state.done = true;
  if (unwrap) state = unwrap;
  state.value = value;
  state.state = REJECTED;
  notify(promise, state, true);
};

var internalResolve = function (promise, state, value, unwrap) {
  if (state.done) return;
  state.done = true;
  if (unwrap) state = unwrap;
  try {
    if (promise === value) throw TypeError("Promise can't be resolved itself");
    var then = isThenable(value);
    if (then) {
      microtask(function () {
        var wrapper = { done: false };
        try {
          then.call(value,
            bind(internalResolve, promise, wrapper, state),
            bind(internalReject, promise, wrapper, state)
          );
        } catch (error) {
          internalReject(promise, wrapper, error, state);
        }
      });
    } else {
      state.value = value;
      state.state = FULFILLED;
      notify(promise, state, false);
    }
  } catch (error) {
    internalReject(promise, { done: false }, error, state);
  }
};

// constructor polyfill
if (FORCED) {
  // 25.4.3.1 Promise(executor)
  PromiseConstructor = function Promise(executor) {
    anInstance(this, PromiseConstructor, PROMISE);
    aFunction(executor);
    Internal.call(this);
    var state = getInternalState(this);
    try {
      executor(bind(internalResolve, this, state), bind(internalReject, this, state));
    } catch (error) {
      internalReject(this, state, error);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    setInternalState(this, {
      type: PROMISE,
      done: false,
      notified: false,
      parent: false,
      reactions: [],
      rejection: false,
      state: PENDING,
      value: undefined
    });
  };
  Internal.prototype = redefineAll(PromiseConstructor.prototype, {
    // `Promise.prototype.then` method
    // https://tc39.github.io/ecma262/#sec-promise.prototype.then
    then: function then(onFulfilled, onRejected) {
      var state = getInternalPromiseState(this);
      var reaction = newPromiseCapability(speciesConstructor(this, PromiseConstructor));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = IS_NODE ? process.domain : undefined;
      state.parent = true;
      state.reactions.push(reaction);
      if (state.state != PENDING) notify(this, state, false);
      return reaction.promise;
    },
    // `Promise.prototype.catch` method
    // https://tc39.github.io/ecma262/#sec-promise.prototype.catch
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    var state = getInternalState(promise);
    this.promise = promise;
    this.resolve = bind(internalResolve, promise, state);
    this.reject = bind(internalReject, promise, state);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === PromiseConstructor || C === PromiseWrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };

  // wrap fetch result
  if (!IS_PURE && typeof $fetch == 'function') $({ global: true, enumerable: true, forced: true }, {
    // eslint-disable-next-line no-unused-vars
    fetch: function fetch(input) {
      return promiseResolve(PromiseConstructor, $fetch.apply(global, arguments));
    }
  });
}

$({ global: true, wrap: true, forced: FORCED }, {
  Promise: PromiseConstructor
});

setToStringTag(PromiseConstructor, PROMISE, false, true);
setSpecies(PROMISE);

PromiseWrapper = path[PROMISE];

// statics
$({ target: PROMISE, stat: true, forced: FORCED }, {
  // `Promise.reject` method
  // https://tc39.github.io/ecma262/#sec-promise.reject
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    capability.reject.call(undefined, r);
    return capability.promise;
  }
});

$({ target: PROMISE, stat: true, forced: IS_PURE || FORCED }, {
  // `Promise.resolve` method
  // https://tc39.github.io/ecma262/#sec-promise.resolve
  resolve: function resolve(x) {
    return promiseResolve(IS_PURE && this === PromiseWrapper ? PromiseConstructor : this, x);
  }
});

$({ target: PROMISE, stat: true, forced: INCORRECT_ITERATION }, {
  // `Promise.all` method
  // https://tc39.github.io/ecma262/#sec-promise.all
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var $promiseResolve = aFunction(C.resolve);
      var values = [];
      var counter = 0;
      var remaining = 1;
      iterate(iterable, function (promise) {
        var index = counter++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        $promiseResolve.call(C, promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.error) reject(result.value);
    return capability.promise;
  },
  // `Promise.race` method
  // https://tc39.github.io/ecma262/#sec-promise.race
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      var $promiseResolve = aFunction(C.resolve);
      iterate(iterable, function (promise) {
        $promiseResolve.call(C, promise).then(capability.resolve, reject);
      });
    });
    if (result.error) reject(result.value);
    return capability.promise;
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/is-pure":"../../../node_modules/core-js/internals/is-pure.js","../internals/global":"../../../node_modules/core-js/internals/global.js","../internals/path":"../../../node_modules/core-js/internals/path.js","../internals/redefine-all":"../../../node_modules/core-js/internals/redefine-all.js","../internals/set-to-string-tag":"../../../node_modules/core-js/internals/set-to-string-tag.js","../internals/set-species":"../../../node_modules/core-js/internals/set-species.js","../internals/is-object":"../../../node_modules/core-js/internals/is-object.js","../internals/a-function":"../../../node_modules/core-js/internals/a-function.js","../internals/an-instance":"../../../node_modules/core-js/internals/an-instance.js","../internals/classof-raw":"../../../node_modules/core-js/internals/classof-raw.js","../internals/iterate":"../../../node_modules/core-js/internals/iterate.js","../internals/check-correctness-of-iteration":"../../../node_modules/core-js/internals/check-correctness-of-iteration.js","../internals/species-constructor":"../../../node_modules/core-js/internals/species-constructor.js","../internals/task":"../../../node_modules/core-js/internals/task.js","../internals/microtask":"../../../node_modules/core-js/internals/microtask.js","../internals/promise-resolve":"../../../node_modules/core-js/internals/promise-resolve.js","../internals/host-report-errors":"../../../node_modules/core-js/internals/host-report-errors.js","../internals/new-promise-capability":"../../../node_modules/core-js/internals/new-promise-capability.js","../internals/perform":"../../../node_modules/core-js/internals/perform.js","../internals/user-agent":"../../../node_modules/core-js/internals/user-agent.js","../internals/internal-state":"../../../node_modules/core-js/internals/internal-state.js","../internals/is-forced":"../../../node_modules/core-js/internals/is-forced.js","../internals/well-known-symbol":"../../../node_modules/core-js/internals/well-known-symbol.js"}],"../../../node_modules/core-js/modules/es.promise.finally.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var getBuiltIn = require('../internals/get-built-in');
var speciesConstructor = require('../internals/species-constructor');
var promiseResolve = require('../internals/promise-resolve');

// `Promise.prototype.finally` method
// https://tc39.github.io/ecma262/#sec-promise.prototype.finally
$({ target: 'Promise', proto: true, real: true }, {
  'finally': function (onFinally) {
    var C = speciesConstructor(this, getBuiltIn('Promise'));
    var isFunction = typeof onFinally == 'function';
    return this.then(
      isFunction ? function (x) {
        return promiseResolve(C, onFinally()).then(function () { return x; });
      } : onFinally,
      isFunction ? function (e) {
        return promiseResolve(C, onFinally()).then(function () { throw e; });
      } : onFinally
    );
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/get-built-in":"../../../node_modules/core-js/internals/get-built-in.js","../internals/species-constructor":"../../../node_modules/core-js/internals/species-constructor.js","../internals/promise-resolve":"../../../node_modules/core-js/internals/promise-resolve.js"}],"../../../node_modules/core-js/internals/collection.js":[function(require,module,exports) {

'use strict';
var $ = require('../internals/export');
var global = require('../internals/global');
var isForced = require('../internals/is-forced');
var redefine = require('../internals/redefine');
var InternalMetadataModule = require('../internals/internal-metadata');
var iterate = require('../internals/iterate');
var anInstance = require('../internals/an-instance');
var isObject = require('../internals/is-object');
var fails = require('../internals/fails');
var checkCorrectnessOfIteration = require('../internals/check-correctness-of-iteration');
var setToStringTag = require('../internals/set-to-string-tag');
var inheritIfRequired = require('../internals/inherit-if-required');

module.exports = function (CONSTRUCTOR_NAME, wrapper, common, IS_MAP, IS_WEAK) {
  var NativeConstructor = global[CONSTRUCTOR_NAME];
  var NativePrototype = NativeConstructor && NativeConstructor.prototype;
  var Constructor = NativeConstructor;
  var ADDER = IS_MAP ? 'set' : 'add';
  var exported = {};

  var fixMethod = function (KEY) {
    var nativeMethod = NativePrototype[KEY];
    redefine(NativePrototype, KEY,
      KEY == 'add' ? function add(a) {
        nativeMethod.call(this, a === 0 ? 0 : a);
        return this;
      } : KEY == 'delete' ? function (a) {
        return IS_WEAK && !isObject(a) ? false : nativeMethod.call(this, a === 0 ? 0 : a);
      } : KEY == 'get' ? function get(a) {
        return IS_WEAK && !isObject(a) ? undefined : nativeMethod.call(this, a === 0 ? 0 : a);
      } : KEY == 'has' ? function has(a) {
        return IS_WEAK && !isObject(a) ? false : nativeMethod.call(this, a === 0 ? 0 : a);
      } : function set(a, b) {
        nativeMethod.call(this, a === 0 ? 0 : a, b);
        return this;
      }
    );
  };

  // eslint-disable-next-line max-len
  if (isForced(CONSTRUCTOR_NAME, typeof NativeConstructor != 'function' || !(IS_WEAK || NativePrototype.forEach && !fails(function () {
    new NativeConstructor().entries().next();
  })))) {
    // create collection constructor
    Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);
    InternalMetadataModule.REQUIRED = true;
  } else if (isForced(CONSTRUCTOR_NAME, true)) {
    var instance = new Constructor();
    // early implementations not supports chaining
    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });
    // most early implementations doesn't supports iterables, most modern - not close it correctly
    // eslint-disable-next-line no-new
    var ACCEPT_ITERABLES = checkCorrectnessOfIteration(function (iterable) { new NativeConstructor(iterable); });
    // for early implementations -0 and +0 not the same
    var BUGGY_ZERO = !IS_WEAK && fails(function () {
      // V8 ~ Chromium 42- fails only with 5+ elements
      var $instance = new NativeConstructor();
      var index = 5;
      while (index--) $instance[ADDER](index, index);
      return !$instance.has(-0);
    });

    if (!ACCEPT_ITERABLES) {
      Constructor = wrapper(function (dummy, iterable) {
        anInstance(dummy, Constructor, CONSTRUCTOR_NAME);
        var that = inheritIfRequired(new NativeConstructor(), dummy, Constructor);
        if (iterable != undefined) iterate(iterable, that[ADDER], that, IS_MAP);
        return that;
      });
      Constructor.prototype = NativePrototype;
      NativePrototype.constructor = Constructor;
    }

    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }

    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);

    // weak collections should not contains .clear method
    if (IS_WEAK && NativePrototype.clear) delete NativePrototype.clear;
  }

  exported[CONSTRUCTOR_NAME] = Constructor;
  $({ global: true, forced: Constructor != NativeConstructor }, exported);

  setToStringTag(Constructor, CONSTRUCTOR_NAME);

  if (!IS_WEAK) common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);

  return Constructor;
};

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/global":"../../../node_modules/core-js/internals/global.js","../internals/is-forced":"../../../node_modules/core-js/internals/is-forced.js","../internals/redefine":"../../../node_modules/core-js/internals/redefine.js","../internals/internal-metadata":"../../../node_modules/core-js/internals/internal-metadata.js","../internals/iterate":"../../../node_modules/core-js/internals/iterate.js","../internals/an-instance":"../../../node_modules/core-js/internals/an-instance.js","../internals/is-object":"../../../node_modules/core-js/internals/is-object.js","../internals/fails":"../../../node_modules/core-js/internals/fails.js","../internals/check-correctness-of-iteration":"../../../node_modules/core-js/internals/check-correctness-of-iteration.js","../internals/set-to-string-tag":"../../../node_modules/core-js/internals/set-to-string-tag.js","../internals/inherit-if-required":"../../../node_modules/core-js/internals/inherit-if-required.js"}],"../../../node_modules/core-js/internals/collection-strong.js":[function(require,module,exports) {
var define;
'use strict';
var defineProperty = require('../internals/object-define-property').f;
var create = require('../internals/object-create');
var redefineAll = require('../internals/redefine-all');
var bind = require('../internals/bind-context');
var anInstance = require('../internals/an-instance');
var iterate = require('../internals/iterate');
var defineIterator = require('../internals/define-iterator');
var setSpecies = require('../internals/set-species');
var DESCRIPTORS = require('../internals/descriptors');
var fastKey = require('../internals/internal-metadata').fastKey;
var InternalStateModule = require('../internals/internal-state');

var setInternalState = InternalStateModule.set;
var internalStateGetterFor = InternalStateModule.getterFor;

module.exports = {
  getConstructor: function (wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, CONSTRUCTOR_NAME);
      setInternalState(that, {
        type: CONSTRUCTOR_NAME,
        index: create(null),
        first: undefined,
        last: undefined,
        size: 0
      });
      if (!DESCRIPTORS) that.size = 0;
      if (iterable != undefined) iterate(iterable, that[ADDER], that, IS_MAP);
    });

    var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);

    var define = function (that, key, value) {
      var state = getInternalState(that);
      var entry = getEntry(that, key);
      var previous, index;
      // change existing entry
      if (entry) {
        entry.value = value;
      // create new entry
      } else {
        state.last = entry = {
          index: index = fastKey(key, true),
          key: key,
          value: value,
          previous: previous = state.last,
          next: undefined,
          removed: false
        };
        if (!state.first) state.first = entry;
        if (previous) previous.next = entry;
        if (DESCRIPTORS) state.size++;
        else that.size++;
        // add to index
        if (index !== 'F') state.index[index] = entry;
      } return that;
    };

    var getEntry = function (that, key) {
      var state = getInternalState(that);
      // fast case
      var index = fastKey(key);
      var entry;
      if (index !== 'F') return state.index[index];
      // frozen object case
      for (entry = state.first; entry; entry = entry.next) {
        if (entry.key == key) return entry;
      }
    };

    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear() {
        var that = this;
        var state = getInternalState(that);
        var data = state.index;
        var entry = state.first;
        while (entry) {
          entry.removed = true;
          if (entry.previous) entry.previous = entry.previous.next = undefined;
          delete data[entry.index];
          entry = entry.next;
        }
        state.first = state.last = undefined;
        if (DESCRIPTORS) state.size = 0;
        else that.size = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function (key) {
        var that = this;
        var state = getInternalState(that);
        var entry = getEntry(that, key);
        if (entry) {
          var next = entry.next;
          var prev = entry.previous;
          delete state.index[entry.index];
          entry.removed = true;
          if (prev) prev.next = next;
          if (next) next.previous = prev;
          if (state.first == entry) state.first = next;
          if (state.last == entry) state.last = prev;
          if (DESCRIPTORS) state.size--;
          else that.size--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /* , that = undefined */) {
        var state = getInternalState(this);
        var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
        var entry;
        while (entry = entry ? entry.next : state.first) {
          boundFunction(entry.value, entry.key, this);
          // revert to the last existing entry
          while (entry && entry.removed) entry = entry.previous;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key) {
        return !!getEntry(this, key);
      }
    });

    redefineAll(C.prototype, IS_MAP ? {
      // 23.1.3.6 Map.prototype.get(key)
      get: function get(key) {
        var entry = getEntry(this, key);
        return entry && entry.value;
      },
      // 23.1.3.9 Map.prototype.set(key, value)
      set: function set(key, value) {
        return define(this, key === 0 ? 0 : key, value);
      }
    } : {
      // 23.2.3.1 Set.prototype.add(value)
      add: function add(value) {
        return define(this, value = value === 0 ? 0 : value, value);
      }
    });
    if (DESCRIPTORS) defineProperty(C.prototype, 'size', {
      get: function () {
        return getInternalState(this).size;
      }
    });
    return C;
  },
  setStrong: function (C, CONSTRUCTOR_NAME, IS_MAP) {
    var ITERATOR_NAME = CONSTRUCTOR_NAME + ' Iterator';
    var getInternalCollectionState = internalStateGetterFor(CONSTRUCTOR_NAME);
    var getInternalIteratorState = internalStateGetterFor(ITERATOR_NAME);
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    defineIterator(C, CONSTRUCTOR_NAME, function (iterated, kind) {
      setInternalState(this, {
        type: ITERATOR_NAME,
        target: iterated,
        state: getInternalCollectionState(iterated),
        kind: kind,
        last: undefined
      });
    }, function () {
      var state = getInternalIteratorState(this);
      var kind = state.kind;
      var entry = state.last;
      // revert to the last existing entry
      while (entry && entry.removed) entry = entry.previous;
      // get next entry
      if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {
        // or finish the iteration
        state.target = undefined;
        return { value: undefined, done: true };
      }
      // return step by kind
      if (kind == 'keys') return { value: entry.key, done: false };
      if (kind == 'values') return { value: entry.value, done: false };
      return { value: [entry.key, entry.value], done: false };
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(CONSTRUCTOR_NAME);
  }
};

},{"../internals/object-define-property":"../../../node_modules/core-js/internals/object-define-property.js","../internals/object-create":"../../../node_modules/core-js/internals/object-create.js","../internals/redefine-all":"../../../node_modules/core-js/internals/redefine-all.js","../internals/bind-context":"../../../node_modules/core-js/internals/bind-context.js","../internals/an-instance":"../../../node_modules/core-js/internals/an-instance.js","../internals/iterate":"../../../node_modules/core-js/internals/iterate.js","../internals/define-iterator":"../../../node_modules/core-js/internals/define-iterator.js","../internals/set-species":"../../../node_modules/core-js/internals/set-species.js","../internals/descriptors":"../../../node_modules/core-js/internals/descriptors.js","../internals/internal-metadata":"../../../node_modules/core-js/internals/internal-metadata.js","../internals/internal-state":"../../../node_modules/core-js/internals/internal-state.js"}],"../../../node_modules/core-js/modules/es.map.js":[function(require,module,exports) {
'use strict';
var collection = require('../internals/collection');
var collectionStrong = require('../internals/collection-strong');

// `Map` constructor
// https://tc39.github.io/ecma262/#sec-map-objects
module.exports = collection('Map', function (get) {
  return function Map() { return get(this, arguments.length ? arguments[0] : undefined); };
}, collectionStrong, true);

},{"../internals/collection":"../../../node_modules/core-js/internals/collection.js","../internals/collection-strong":"../../../node_modules/core-js/internals/collection-strong.js"}],"../../../node_modules/core-js/modules/es.set.js":[function(require,module,exports) {
'use strict';
var collection = require('../internals/collection');
var collectionStrong = require('../internals/collection-strong');

// `Set` constructor
// https://tc39.github.io/ecma262/#sec-set-objects
module.exports = collection('Set', function (get) {
  return function Set() { return get(this, arguments.length ? arguments[0] : undefined); };
}, collectionStrong);

},{"../internals/collection":"../../../node_modules/core-js/internals/collection.js","../internals/collection-strong":"../../../node_modules/core-js/internals/collection-strong.js"}],"../../../node_modules/core-js/internals/collection-weak.js":[function(require,module,exports) {
var define;
'use strict';
var redefineAll = require('../internals/redefine-all');
var getWeakData = require('../internals/internal-metadata').getWeakData;
var anObject = require('../internals/an-object');
var isObject = require('../internals/is-object');
var anInstance = require('../internals/an-instance');
var iterate = require('../internals/iterate');
var ArrayIterationModule = require('../internals/array-iteration');
var $has = require('../internals/has');
var InternalStateModule = require('../internals/internal-state');

var setInternalState = InternalStateModule.set;
var internalStateGetterFor = InternalStateModule.getterFor;
var find = ArrayIterationModule.find;
var findIndex = ArrayIterationModule.findIndex;
var id = 0;

// fallback for uncaught frozen keys
var uncaughtFrozenStore = function (store) {
  return store.frozen || (store.frozen = new UncaughtFrozenStore());
};

var UncaughtFrozenStore = function () {
  this.entries = [];
};

var findUncaughtFrozen = function (store, key) {
  return find(store.entries, function (it) {
    return it[0] === key;
  });
};

UncaughtFrozenStore.prototype = {
  get: function (key) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) return entry[1];
  },
  has: function (key) {
    return !!findUncaughtFrozen(this, key);
  },
  set: function (key, value) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) entry[1] = value;
    else this.entries.push([key, value]);
  },
  'delete': function (key) {
    var index = findIndex(this.entries, function (it) {
      return it[0] === key;
    });
    if (~index) this.entries.splice(index, 1);
    return !!~index;
  }
};

module.exports = {
  getConstructor: function (wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, CONSTRUCTOR_NAME);
      setInternalState(that, {
        type: CONSTRUCTOR_NAME,
        id: id++,
        frozen: undefined
      });
      if (iterable != undefined) iterate(iterable, that[ADDER], that, IS_MAP);
    });

    var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);

    var define = function (that, key, value) {
      var state = getInternalState(that);
      var data = getWeakData(anObject(key), true);
      if (data === true) uncaughtFrozenStore(state).set(key, value);
      else data[state.id] = value;
      return that;
    };

    redefineAll(C.prototype, {
      // 23.3.3.2 WeakMap.prototype.delete(key)
      // 23.4.3.3 WeakSet.prototype.delete(value)
      'delete': function (key) {
        var state = getInternalState(this);
        if (!isObject(key)) return false;
        var data = getWeakData(key);
        if (data === true) return uncaughtFrozenStore(state)['delete'](key);
        return data && $has(data, state.id) && delete data[state.id];
      },
      // 23.3.3.4 WeakMap.prototype.has(key)
      // 23.4.3.4 WeakSet.prototype.has(value)
      has: function has(key) {
        var state = getInternalState(this);
        if (!isObject(key)) return false;
        var data = getWeakData(key);
        if (data === true) return uncaughtFrozenStore(state).has(key);
        return data && $has(data, state.id);
      }
    });

    redefineAll(C.prototype, IS_MAP ? {
      // 23.3.3.3 WeakMap.prototype.get(key)
      get: function get(key) {
        var state = getInternalState(this);
        if (isObject(key)) {
          var data = getWeakData(key);
          if (data === true) return uncaughtFrozenStore(state).get(key);
          return data ? data[state.id] : undefined;
        }
      },
      // 23.3.3.5 WeakMap.prototype.set(key, value)
      set: function set(key, value) {
        return define(this, key, value);
      }
    } : {
      // 23.4.3.1 WeakSet.prototype.add(value)
      add: function add(value) {
        return define(this, value, true);
      }
    });

    return C;
  }
};

},{"../internals/redefine-all":"../../../node_modules/core-js/internals/redefine-all.js","../internals/internal-metadata":"../../../node_modules/core-js/internals/internal-metadata.js","../internals/an-object":"../../../node_modules/core-js/internals/an-object.js","../internals/is-object":"../../../node_modules/core-js/internals/is-object.js","../internals/an-instance":"../../../node_modules/core-js/internals/an-instance.js","../internals/iterate":"../../../node_modules/core-js/internals/iterate.js","../internals/array-iteration":"../../../node_modules/core-js/internals/array-iteration.js","../internals/has":"../../../node_modules/core-js/internals/has.js","../internals/internal-state":"../../../node_modules/core-js/internals/internal-state.js"}],"../../../node_modules/core-js/modules/es.weak-map.js":[function(require,module,exports) {

'use strict';
var global = require('../internals/global');
var redefineAll = require('../internals/redefine-all');
var InternalMetadataModule = require('../internals/internal-metadata');
var collection = require('../internals/collection');
var collectionWeak = require('../internals/collection-weak');
var isObject = require('../internals/is-object');
var enforceIternalState = require('../internals/internal-state').enforce;
var NATIVE_WEAK_MAP = require('../internals/native-weak-map');

var IS_IE11 = !global.ActiveXObject && 'ActiveXObject' in global;
var isExtensible = Object.isExtensible;
var InternalWeakMap;

var wrapper = function (get) {
  return function WeakMap() {
    return get(this, arguments.length ? arguments[0] : undefined);
  };
};

// `WeakMap` constructor
// https://tc39.github.io/ecma262/#sec-weakmap-constructor
var $WeakMap = module.exports = collection('WeakMap', wrapper, collectionWeak, true, true);

// IE11 WeakMap frozen keys fix
// We can't use feature detection because it crash some old IE builds
// https://github.com/zloirock/core-js/issues/485
if (NATIVE_WEAK_MAP && IS_IE11) {
  InternalWeakMap = collectionWeak.getConstructor(wrapper, 'WeakMap', true);
  InternalMetadataModule.REQUIRED = true;
  var WeakMapPrototype = $WeakMap.prototype;
  var nativeDelete = WeakMapPrototype['delete'];
  var nativeHas = WeakMapPrototype.has;
  var nativeGet = WeakMapPrototype.get;
  var nativeSet = WeakMapPrototype.set;
  redefineAll(WeakMapPrototype, {
    'delete': function (key) {
      if (isObject(key) && !isExtensible(key)) {
        var state = enforceIternalState(this);
        if (!state.frozen) state.frozen = new InternalWeakMap();
        return nativeDelete.call(this, key) || state.frozen['delete'](key);
      } return nativeDelete.call(this, key);
    },
    has: function has(key) {
      if (isObject(key) && !isExtensible(key)) {
        var state = enforceIternalState(this);
        if (!state.frozen) state.frozen = new InternalWeakMap();
        return nativeHas.call(this, key) || state.frozen.has(key);
      } return nativeHas.call(this, key);
    },
    get: function get(key) {
      if (isObject(key) && !isExtensible(key)) {
        var state = enforceIternalState(this);
        if (!state.frozen) state.frozen = new InternalWeakMap();
        return nativeHas.call(this, key) ? nativeGet.call(this, key) : state.frozen.get(key);
      } return nativeGet.call(this, key);
    },
    set: function set(key, value) {
      if (isObject(key) && !isExtensible(key)) {
        var state = enforceIternalState(this);
        if (!state.frozen) state.frozen = new InternalWeakMap();
        nativeHas.call(this, key) ? nativeSet.call(this, key, value) : state.frozen.set(key, value);
      } else nativeSet.call(this, key, value);
      return this;
    }
  });
}

},{"../internals/global":"../../../node_modules/core-js/internals/global.js","../internals/redefine-all":"../../../node_modules/core-js/internals/redefine-all.js","../internals/internal-metadata":"../../../node_modules/core-js/internals/internal-metadata.js","../internals/collection":"../../../node_modules/core-js/internals/collection.js","../internals/collection-weak":"../../../node_modules/core-js/internals/collection-weak.js","../internals/is-object":"../../../node_modules/core-js/internals/is-object.js","../internals/internal-state":"../../../node_modules/core-js/internals/internal-state.js","../internals/native-weak-map":"../../../node_modules/core-js/internals/native-weak-map.js"}],"../../../node_modules/core-js/modules/es.weak-set.js":[function(require,module,exports) {
'use strict';
var collection = require('../internals/collection');
var collectionWeak = require('../internals/collection-weak');

// `WeakSet` constructor
// https://tc39.github.io/ecma262/#sec-weakset-constructor
collection('WeakSet', function (get) {
  return function WeakSet() { return get(this, arguments.length ? arguments[0] : undefined); };
}, collectionWeak, false, true);

},{"../internals/collection":"../../../node_modules/core-js/internals/collection.js","../internals/collection-weak":"../../../node_modules/core-js/internals/collection-weak.js"}],"../../../node_modules/core-js/internals/array-buffer-view-core.js":[function(require,module,exports) {

'use strict';
var DESCRIPTORS = require('../internals/descriptors');
var global = require('../internals/global');
var isObject = require('../internals/is-object');
var has = require('../internals/has');
var classof = require('../internals/classof');
var hide = require('../internals/hide');
var redefine = require('../internals/redefine');
var defineProperty = require('../internals/object-define-property').f;
var getPrototypeOf = require('../internals/object-get-prototype-of');
var setPrototypeOf = require('../internals/object-set-prototype-of');
var wellKnownSymbol = require('../internals/well-known-symbol');
var uid = require('../internals/uid');

var DataView = global.DataView;
var DataViewPrototype = DataView && DataView.prototype;
var Int8Array = global.Int8Array;
var Int8ArrayPrototype = Int8Array && Int8Array.prototype;
var Uint8ClampedArray = global.Uint8ClampedArray;
var Uint8ClampedArrayPrototype = Uint8ClampedArray && Uint8ClampedArray.prototype;
var TypedArray = Int8Array && getPrototypeOf(Int8Array);
var TypedArrayPrototype = Int8ArrayPrototype && getPrototypeOf(Int8ArrayPrototype);
var ObjectPrototype = Object.prototype;
var isPrototypeOf = ObjectPrototype.isPrototypeOf;

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var TYPED_ARRAY_TAG = uid('TYPED_ARRAY_TAG');
var NATIVE_ARRAY_BUFFER = !!(global.ArrayBuffer && DataView);
var NATIVE_ARRAY_BUFFER_VIEWS = NATIVE_ARRAY_BUFFER && !!setPrototypeOf;
var TYPED_ARRAY_TAG_REQIRED = false;
var NAME;

var TypedArrayConstructorsList = {
  Int8Array: 1,
  Uint8Array: 1,
  Uint8ClampedArray: 1,
  Int16Array: 2,
  Uint16Array: 2,
  Int32Array: 4,
  Uint32Array: 4,
  Float32Array: 4,
  Float64Array: 8
};

var isView = function isView(it) {
  var klass = classof(it);
  return klass === 'DataView' || has(TypedArrayConstructorsList, klass);
};

var isTypedArray = function (it) {
  return isObject(it) && has(TypedArrayConstructorsList, classof(it));
};

var aTypedArray = function (it) {
  if (isTypedArray(it)) return it;
  throw TypeError('Target is not a typed array');
};

var aTypedArrayConstructor = function (C) {
  if (setPrototypeOf) {
    if (isPrototypeOf.call(TypedArray, C)) return C;
  } else for (var ARRAY in TypedArrayConstructorsList) if (has(TypedArrayConstructorsList, NAME)) {
    var TypedArrayConstructor = global[ARRAY];
    if (TypedArrayConstructor && (C === TypedArrayConstructor || isPrototypeOf.call(TypedArrayConstructor, C))) {
      return C;
    }
  } throw TypeError('Target is not a typed array constructor');
};

var exportProto = function (KEY, property, forced) {
  if (!DESCRIPTORS) return;
  if (forced) for (var ARRAY in TypedArrayConstructorsList) {
    var TypedArrayConstructor = global[ARRAY];
    if (TypedArrayConstructor && has(TypedArrayConstructor.prototype, KEY)) {
      delete TypedArrayConstructor.prototype[KEY];
    }
  }
  if (!TypedArrayPrototype[KEY] || forced) {
    redefine(TypedArrayPrototype, KEY, forced ? property
      : NATIVE_ARRAY_BUFFER_VIEWS && Int8ArrayPrototype[KEY] || property);
  }
};

var exportStatic = function (KEY, property, forced) {
  var ARRAY, TypedArrayConstructor;
  if (!DESCRIPTORS) return;
  if (setPrototypeOf) {
    if (forced) for (ARRAY in TypedArrayConstructorsList) {
      TypedArrayConstructor = global[ARRAY];
      if (TypedArrayConstructor && has(TypedArrayConstructor, KEY)) {
        delete TypedArrayConstructor[KEY];
      }
    }
    if (!TypedArray[KEY] || forced) {
      // V8 ~ Chrome 49-50 `%TypedArray%` methods are non-writable non-configurable
      try {
        return redefine(TypedArray, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS && Int8Array[KEY] || property);
      } catch (error) { /* empty */ }
    } else return;
  }
  for (ARRAY in TypedArrayConstructorsList) {
    TypedArrayConstructor = global[ARRAY];
    if (TypedArrayConstructor && (!TypedArrayConstructor[KEY] || forced)) {
      redefine(TypedArrayConstructor, KEY, property);
    }
  }
};

for (NAME in TypedArrayConstructorsList) {
  if (!global[NAME]) NATIVE_ARRAY_BUFFER_VIEWS = false;
}

// WebKit bug - typed arrays constructors prototype is Object.prototype
if (!NATIVE_ARRAY_BUFFER_VIEWS || typeof TypedArray != 'function' || TypedArray === Function.prototype) {
  // eslint-disable-next-line no-shadow
  TypedArray = function TypedArray() {
    throw TypeError('Incorrect invocation');
  };
  if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME in TypedArrayConstructorsList) {
    if (global[NAME]) setPrototypeOf(global[NAME], TypedArray);
  }
}

if (!NATIVE_ARRAY_BUFFER_VIEWS || !TypedArrayPrototype || TypedArrayPrototype === ObjectPrototype) {
  TypedArrayPrototype = TypedArray.prototype;
  if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME in TypedArrayConstructorsList) {
    if (global[NAME]) setPrototypeOf(global[NAME].prototype, TypedArrayPrototype);
  }
}

// WebKit bug - one more object in Uint8ClampedArray prototype chain
if (NATIVE_ARRAY_BUFFER_VIEWS && getPrototypeOf(Uint8ClampedArrayPrototype) !== TypedArrayPrototype) {
  setPrototypeOf(Uint8ClampedArrayPrototype, TypedArrayPrototype);
}

if (DESCRIPTORS && !has(TypedArrayPrototype, TO_STRING_TAG)) {
  TYPED_ARRAY_TAG_REQIRED = true;
  defineProperty(TypedArrayPrototype, TO_STRING_TAG, { get: function () {
    return isObject(this) ? this[TYPED_ARRAY_TAG] : undefined;
  } });
  for (NAME in TypedArrayConstructorsList) if (global[NAME]) {
    hide(global[NAME], TYPED_ARRAY_TAG, NAME);
  }
}

// WebKit bug - the same parent prototype for typed arrays and data view
if (NATIVE_ARRAY_BUFFER && setPrototypeOf && getPrototypeOf(DataViewPrototype) !== ObjectPrototype) {
  setPrototypeOf(DataViewPrototype, ObjectPrototype);
}

module.exports = {
  NATIVE_ARRAY_BUFFER: NATIVE_ARRAY_BUFFER,
  NATIVE_ARRAY_BUFFER_VIEWS: NATIVE_ARRAY_BUFFER_VIEWS,
  TYPED_ARRAY_TAG: TYPED_ARRAY_TAG_REQIRED && TYPED_ARRAY_TAG,
  aTypedArray: aTypedArray,
  aTypedArrayConstructor: aTypedArrayConstructor,
  exportProto: exportProto,
  exportStatic: exportStatic,
  isView: isView,
  isTypedArray: isTypedArray,
  TypedArray: TypedArray,
  TypedArrayPrototype: TypedArrayPrototype
};

},{"../internals/descriptors":"../../../node_modules/core-js/internals/descriptors.js","../internals/global":"../../../node_modules/core-js/internals/global.js","../internals/is-object":"../../../node_modules/core-js/internals/is-object.js","../internals/has":"../../../node_modules/core-js/internals/has.js","../internals/classof":"../../../node_modules/core-js/internals/classof.js","../internals/hide":"../../../node_modules/core-js/internals/hide.js","../internals/redefine":"../../../node_modules/core-js/internals/redefine.js","../internals/object-define-property":"../../../node_modules/core-js/internals/object-define-property.js","../internals/object-get-prototype-of":"../../../node_modules/core-js/internals/object-get-prototype-of.js","../internals/object-set-prototype-of":"../../../node_modules/core-js/internals/object-set-prototype-of.js","../internals/well-known-symbol":"../../../node_modules/core-js/internals/well-known-symbol.js","../internals/uid":"../../../node_modules/core-js/internals/uid.js"}],"../../../node_modules/core-js/internals/to-index.js":[function(require,module,exports) {
var toInteger = require('../internals/to-integer');
var toLength = require('../internals/to-length');

// `ToIndex` abstract operation
// https://tc39.github.io/ecma262/#sec-toindex
module.exports = function (it) {
  if (it === undefined) return 0;
  var number = toInteger(it);
  var length = toLength(number);
  if (number !== length) throw RangeError('Wrong length or index');
  return length;
};

},{"../internals/to-integer":"../../../node_modules/core-js/internals/to-integer.js","../internals/to-length":"../../../node_modules/core-js/internals/to-length.js"}],"../../../node_modules/core-js/internals/array-buffer.js":[function(require,module,exports) {

'use strict';
var global = require('../internals/global');
var DESCRIPTORS = require('../internals/descriptors');
var NATIVE_ARRAY_BUFFER = require('../internals/array-buffer-view-core').NATIVE_ARRAY_BUFFER;
var hide = require('../internals/hide');
var redefineAll = require('../internals/redefine-all');
var fails = require('../internals/fails');
var anInstance = require('../internals/an-instance');
var toInteger = require('../internals/to-integer');
var toLength = require('../internals/to-length');
var toIndex = require('../internals/to-index');
var getOwnPropertyNames = require('../internals/object-get-own-property-names').f;
var defineProperty = require('../internals/object-define-property').f;
var arrayFill = require('../internals/array-fill');
var setToStringTag = require('../internals/set-to-string-tag');
var InternalStateModule = require('../internals/internal-state');

var getInternalState = InternalStateModule.get;
var setInternalState = InternalStateModule.set;
var ARRAY_BUFFER = 'ArrayBuffer';
var DATA_VIEW = 'DataView';
var PROTOTYPE = 'prototype';
var WRONG_LENGTH = 'Wrong length';
var WRONG_INDEX = 'Wrong index';
var NativeArrayBuffer = global[ARRAY_BUFFER];
var $ArrayBuffer = NativeArrayBuffer;
var $DataView = global[DATA_VIEW];
var Math = global.Math;
var RangeError = global.RangeError;
// eslint-disable-next-line no-shadow-restricted-names
var Infinity = 1 / 0;
var abs = Math.abs;
var pow = Math.pow;
var floor = Math.floor;
var log = Math.log;
var LN2 = Math.LN2;

// IEEE754 conversions based on https://github.com/feross/ieee754
var packIEEE754 = function (number, mantissaLength, bytes) {
  var buffer = new Array(bytes);
  var exponentLength = bytes * 8 - mantissaLength - 1;
  var eMax = (1 << exponentLength) - 1;
  var eBias = eMax >> 1;
  var rt = mantissaLength === 23 ? pow(2, -24) - pow(2, -77) : 0;
  var sign = number < 0 || number === 0 && 1 / number < 0 ? 1 : 0;
  var index = 0;
  var exponent, mantissa, c;
  number = abs(number);
  // eslint-disable-next-line no-self-compare
  if (number != number || number === Infinity) {
    // eslint-disable-next-line no-self-compare
    mantissa = number != number ? 1 : 0;
    exponent = eMax;
  } else {
    exponent = floor(log(number) / LN2);
    if (number * (c = pow(2, -exponent)) < 1) {
      exponent--;
      c *= 2;
    }
    if (exponent + eBias >= 1) {
      number += rt / c;
    } else {
      number += rt * pow(2, 1 - eBias);
    }
    if (number * c >= 2) {
      exponent++;
      c /= 2;
    }
    if (exponent + eBias >= eMax) {
      mantissa = 0;
      exponent = eMax;
    } else if (exponent + eBias >= 1) {
      mantissa = (number * c - 1) * pow(2, mantissaLength);
      exponent = exponent + eBias;
    } else {
      mantissa = number * pow(2, eBias - 1) * pow(2, mantissaLength);
      exponent = 0;
    }
  }
  for (; mantissaLength >= 8; buffer[index++] = mantissa & 255, mantissa /= 256, mantissaLength -= 8);
  exponent = exponent << mantissaLength | mantissa;
  exponentLength += mantissaLength;
  for (; exponentLength > 0; buffer[index++] = exponent & 255, exponent /= 256, exponentLength -= 8);
  buffer[--index] |= sign * 128;
  return buffer;
};

var unpackIEEE754 = function (buffer, mantissaLength) {
  var bytes = buffer.length;
  var exponentLength = bytes * 8 - mantissaLength - 1;
  var eMax = (1 << exponentLength) - 1;
  var eBias = eMax >> 1;
  var nBits = exponentLength - 7;
  var index = bytes - 1;
  var sign = buffer[index--];
  var exponent = sign & 127;
  var mantissa;
  sign >>= 7;
  for (; nBits > 0; exponent = exponent * 256 + buffer[index], index--, nBits -= 8);
  mantissa = exponent & (1 << -nBits) - 1;
  exponent >>= -nBits;
  nBits += mantissaLength;
  for (; nBits > 0; mantissa = mantissa * 256 + buffer[index], index--, nBits -= 8);
  if (exponent === 0) {
    exponent = 1 - eBias;
  } else if (exponent === eMax) {
    return mantissa ? NaN : sign ? -Infinity : Infinity;
  } else {
    mantissa = mantissa + pow(2, mantissaLength);
    exponent = exponent - eBias;
  } return (sign ? -1 : 1) * mantissa * pow(2, exponent - mantissaLength);
};

var unpackInt32 = function (buffer) {
  return buffer[3] << 24 | buffer[2] << 16 | buffer[1] << 8 | buffer[0];
};

var packInt8 = function (number) {
  return [number & 0xFF];
};

var packInt16 = function (number) {
  return [number & 0xFF, number >> 8 & 0xFF];
};

var packInt32 = function (number) {
  return [number & 0xFF, number >> 8 & 0xFF, number >> 16 & 0xFF, number >> 24 & 0xFF];
};

var packFloat32 = function (number) {
  return packIEEE754(number, 23, 4);
};

var packFloat64 = function (number) {
  return packIEEE754(number, 52, 8);
};

var addGetter = function (Constructor, key) {
  defineProperty(Constructor[PROTOTYPE], key, { get: function () { return getInternalState(this)[key]; } });
};

var get = function (view, count, index, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  var store = getInternalState(view);
  if (intIndex + count > store.byteLength) throw RangeError(WRONG_INDEX);
  var bytes = getInternalState(store.buffer).bytes;
  var start = intIndex + store.byteOffset;
  var pack = bytes.slice(start, start + count);
  return isLittleEndian ? pack : pack.reverse();
};

var set = function (view, count, index, conversion, value, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  var store = getInternalState(view);
  if (intIndex + count > store.byteLength) throw RangeError(WRONG_INDEX);
  var bytes = getInternalState(store.buffer).bytes;
  var start = intIndex + store.byteOffset;
  var pack = conversion(+value);
  for (var i = 0; i < count; i++) bytes[start + i] = pack[isLittleEndian ? i : count - i - 1];
};

if (!NATIVE_ARRAY_BUFFER) {
  $ArrayBuffer = function ArrayBuffer(length) {
    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
    var byteLength = toIndex(length);
    setInternalState(this, {
      bytes: arrayFill.call(new Array(byteLength), 0),
      byteLength: byteLength
    });
    if (!DESCRIPTORS) this.byteLength = byteLength;
  };

  $DataView = function DataView(buffer, byteOffset, byteLength) {
    anInstance(this, $DataView, DATA_VIEW);
    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
    var bufferLength = getInternalState(buffer).byteLength;
    var offset = toInteger(byteOffset);
    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset');
    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
    setInternalState(this, {
      buffer: buffer,
      byteLength: byteLength,
      byteOffset: offset
    });
    if (!DESCRIPTORS) {
      this.buffer = buffer;
      this.byteLength = byteLength;
      this.byteOffset = offset;
    }
  };

  if (DESCRIPTORS) {
    addGetter($ArrayBuffer, 'byteLength');
    addGetter($DataView, 'buffer');
    addGetter($DataView, 'byteLength');
    addGetter($DataView, 'byteOffset');
  }

  redefineAll($DataView[PROTOTYPE], {
    getInt8: function getInt8(byteOffset) {
      return get(this, 1, byteOffset)[0] << 24 >> 24;
    },
    getUint8: function getUint8(byteOffset) {
      return get(this, 1, byteOffset)[0];
    },
    getInt16: function getInt16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);
      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
    },
    getUint16: function getUint16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);
      return bytes[1] << 8 | bytes[0];
    },
    getInt32: function getInt32(byteOffset /* , littleEndian */) {
      return unpackInt32(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined));
    },
    getUint32: function getUint32(byteOffset /* , littleEndian */) {
      return unpackInt32(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined)) >>> 0;
    },
    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 23);
    },
    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 8, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 52);
    },
    setInt8: function setInt8(byteOffset, value) {
      set(this, 1, byteOffset, packInt8, value);
    },
    setUint8: function setUint8(byteOffset, value) {
      set(this, 1, byteOffset, packInt8, value);
    },
    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);
    },
    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);
    },
    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);
    },
    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);
    },
    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packFloat32, value, arguments.length > 2 ? arguments[2] : undefined);
    },
    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
      set(this, 8, byteOffset, packFloat64, value, arguments.length > 2 ? arguments[2] : undefined);
    }
  });
} else {
  if (!fails(function () {
    NativeArrayBuffer(1);
  }) || !fails(function () {
    new NativeArrayBuffer(-1); // eslint-disable-line no-new
  }) || fails(function () {
    new NativeArrayBuffer(); // eslint-disable-line no-new
    new NativeArrayBuffer(1.5); // eslint-disable-line no-new
    new NativeArrayBuffer(NaN); // eslint-disable-line no-new
    return NativeArrayBuffer.name != ARRAY_BUFFER;
  })) {
    $ArrayBuffer = function ArrayBuffer(length) {
      anInstance(this, $ArrayBuffer);
      return new NativeArrayBuffer(toIndex(length));
    };
    var ArrayBufferPrototype = $ArrayBuffer[PROTOTYPE] = NativeArrayBuffer[PROTOTYPE];
    for (var keys = getOwnPropertyNames(NativeArrayBuffer), j = 0, key; keys.length > j;) {
      if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, NativeArrayBuffer[key]);
    }
    ArrayBufferPrototype.constructor = $ArrayBuffer;
  }
  // iOS Safari 7.x bug
  var testView = new $DataView(new $ArrayBuffer(2));
  var nativeSetInt8 = $DataView[PROTOTYPE].setInt8;
  testView.setInt8(0, 2147483648);
  testView.setInt8(1, 2147483649);
  if (testView.getInt8(0) || !testView.getInt8(1)) redefineAll($DataView[PROTOTYPE], {
    setInt8: function setInt8(byteOffset, value) {
      nativeSetInt8.call(this, byteOffset, value << 24 >> 24);
    },
    setUint8: function setUint8(byteOffset, value) {
      nativeSetInt8.call(this, byteOffset, value << 24 >> 24);
    }
  }, { unsafe: true });
}

setToStringTag($ArrayBuffer, ARRAY_BUFFER);
setToStringTag($DataView, DATA_VIEW);
exports[ARRAY_BUFFER] = $ArrayBuffer;
exports[DATA_VIEW] = $DataView;

},{"../internals/global":"../../../node_modules/core-js/internals/global.js","../internals/descriptors":"../../../node_modules/core-js/internals/descriptors.js","../internals/array-buffer-view-core":"../../../node_modules/core-js/internals/array-buffer-view-core.js","../internals/hide":"../../../node_modules/core-js/internals/hide.js","../internals/redefine-all":"../../../node_modules/core-js/internals/redefine-all.js","../internals/fails":"../../../node_modules/core-js/internals/fails.js","../internals/an-instance":"../../../node_modules/core-js/internals/an-instance.js","../internals/to-integer":"../../../node_modules/core-js/internals/to-integer.js","../internals/to-length":"../../../node_modules/core-js/internals/to-length.js","../internals/to-index":"../../../node_modules/core-js/internals/to-index.js","../internals/object-get-own-property-names":"../../../node_modules/core-js/internals/object-get-own-property-names.js","../internals/object-define-property":"../../../node_modules/core-js/internals/object-define-property.js","../internals/array-fill":"../../../node_modules/core-js/internals/array-fill.js","../internals/set-to-string-tag":"../../../node_modules/core-js/internals/set-to-string-tag.js","../internals/internal-state":"../../../node_modules/core-js/internals/internal-state.js"}],"../../../node_modules/core-js/modules/es.array-buffer.constructor.js":[function(require,module,exports) {

'use strict';
var $ = require('../internals/export');
var global = require('../internals/global');
var arrayBufferModule = require('../internals/array-buffer');
var setSpecies = require('../internals/set-species');

var ARRAY_BUFFER = 'ArrayBuffer';
var ArrayBuffer = arrayBufferModule[ARRAY_BUFFER];
var NativeArrayBuffer = global[ARRAY_BUFFER];

// `ArrayBuffer` constructor
// https://tc39.github.io/ecma262/#sec-arraybuffer-constructor
$({ global: true, forced: NativeArrayBuffer !== ArrayBuffer }, {
  ArrayBuffer: ArrayBuffer
});

setSpecies(ARRAY_BUFFER);

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/global":"../../../node_modules/core-js/internals/global.js","../internals/array-buffer":"../../../node_modules/core-js/internals/array-buffer.js","../internals/set-species":"../../../node_modules/core-js/internals/set-species.js"}],"../../../node_modules/core-js/modules/es.array-buffer.is-view.js":[function(require,module,exports) {
var $ = require('../internals/export');
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');

var NATIVE_ARRAY_BUFFER_VIEWS = ArrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;

// `ArrayBuffer.isView` method
// https://tc39.github.io/ecma262/#sec-arraybuffer.isview
$({ target: 'ArrayBuffer', stat: true, forced: !NATIVE_ARRAY_BUFFER_VIEWS }, {
  isView: ArrayBufferViewCore.isView
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/array-buffer-view-core":"../../../node_modules/core-js/internals/array-buffer-view-core.js"}],"../../../node_modules/core-js/modules/es.array-buffer.slice.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var fails = require('../internals/fails');
var ArrayBufferModule = require('../internals/array-buffer');
var anObject = require('../internals/an-object');
var toAbsoluteIndex = require('../internals/to-absolute-index');
var toLength = require('../internals/to-length');
var speciesConstructor = require('../internals/species-constructor');

var ArrayBuffer = ArrayBufferModule.ArrayBuffer;
var DataView = ArrayBufferModule.DataView;
var nativeArrayBufferSlice = ArrayBuffer.prototype.slice;

var INCORRECT_SLICE = fails(function () {
  return !new ArrayBuffer(2).slice(1, undefined).byteLength;
});

// `ArrayBuffer.prototype.slice` method
// https://tc39.github.io/ecma262/#sec-arraybuffer.prototype.slice
$({ target: 'ArrayBuffer', proto: true, unsafe: true, forced: INCORRECT_SLICE }, {
  slice: function slice(start, end) {
    if (nativeArrayBufferSlice !== undefined && end === undefined) {
      return nativeArrayBufferSlice.call(anObject(this), start); // FF fix
    }
    var length = anObject(this).byteLength;
    var first = toAbsoluteIndex(start, length);
    var fin = toAbsoluteIndex(end === undefined ? length : end, length);
    var result = new (speciesConstructor(this, ArrayBuffer))(toLength(fin - first));
    var viewSource = new DataView(this);
    var viewTarget = new DataView(result);
    var index = 0;
    while (first < fin) {
      viewTarget.setUint8(index++, viewSource.getUint8(first++));
    } return result;
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/fails":"../../../node_modules/core-js/internals/fails.js","../internals/array-buffer":"../../../node_modules/core-js/internals/array-buffer.js","../internals/an-object":"../../../node_modules/core-js/internals/an-object.js","../internals/to-absolute-index":"../../../node_modules/core-js/internals/to-absolute-index.js","../internals/to-length":"../../../node_modules/core-js/internals/to-length.js","../internals/species-constructor":"../../../node_modules/core-js/internals/species-constructor.js"}],"../../../node_modules/core-js/modules/es.data-view.js":[function(require,module,exports) {
var $ = require('../internals/export');
var ArrayBufferModule = require('../internals/array-buffer');
var NATIVE_ARRAY_BUFFER = require('../internals/array-buffer-view-core').NATIVE_ARRAY_BUFFER;

// `DataView` constructor
// https://tc39.github.io/ecma262/#sec-dataview-constructor
$({ global: true, forced: !NATIVE_ARRAY_BUFFER }, {
  DataView: ArrayBufferModule.DataView
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/array-buffer":"../../../node_modules/core-js/internals/array-buffer.js","../internals/array-buffer-view-core":"../../../node_modules/core-js/internals/array-buffer-view-core.js"}],"../../../node_modules/core-js/internals/typed-arrays-constructors-requires-wrappers.js":[function(require,module,exports) {

/* eslint-disable no-new */
var global = require('../internals/global');
var fails = require('../internals/fails');
var checkCorrectnessOfIteration = require('../internals/check-correctness-of-iteration');
var NATIVE_ARRAY_BUFFER_VIEWS = require('../internals/array-buffer-view-core').NATIVE_ARRAY_BUFFER_VIEWS;

var ArrayBuffer = global.ArrayBuffer;
var Int8Array = global.Int8Array;

module.exports = !NATIVE_ARRAY_BUFFER_VIEWS || !fails(function () {
  Int8Array(1);
}) || !fails(function () {
  new Int8Array(-1);
}) || !checkCorrectnessOfIteration(function (iterable) {
  new Int8Array();
  new Int8Array(null);
  new Int8Array(1.5);
  new Int8Array(iterable);
}, true) || fails(function () {
  // Safari 11 bug
  return new Int8Array(new ArrayBuffer(2), 1, undefined).length !== 1;
});

},{"../internals/global":"../../../node_modules/core-js/internals/global.js","../internals/fails":"../../../node_modules/core-js/internals/fails.js","../internals/check-correctness-of-iteration":"../../../node_modules/core-js/internals/check-correctness-of-iteration.js","../internals/array-buffer-view-core":"../../../node_modules/core-js/internals/array-buffer-view-core.js"}],"../../../node_modules/core-js/internals/to-offset.js":[function(require,module,exports) {
var toInteger = require('../internals/to-integer');

module.exports = function (it, BYTES) {
  var offset = toInteger(it);
  if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset');
  return offset;
};

},{"../internals/to-integer":"../../../node_modules/core-js/internals/to-integer.js"}],"../../../node_modules/core-js/internals/typed-array-from.js":[function(require,module,exports) {
var toObject = require('../internals/to-object');
var toLength = require('../internals/to-length');
var getIteratorMethod = require('../internals/get-iterator-method');
var isArrayIteratorMethod = require('../internals/is-array-iterator-method');
var bind = require('../internals/bind-context');
var aTypedArrayConstructor = require('../internals/array-buffer-view-core').aTypedArrayConstructor;

module.exports = function from(source /* , mapfn, thisArg */) {
  var O = toObject(source);
  var argumentsLength = arguments.length;
  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
  var mapping = mapfn !== undefined;
  var iteratorMethod = getIteratorMethod(O);
  var i, length, result, step, iterator;
  if (iteratorMethod != undefined && !isArrayIteratorMethod(iteratorMethod)) {
    iterator = iteratorMethod.call(O);
    O = [];
    while (!(step = iterator.next()).done) {
      O.push(step.value);
    }
  }
  if (mapping && argumentsLength > 2) {
    mapfn = bind(mapfn, arguments[2], 2);
  }
  length = toLength(O.length);
  result = new (aTypedArrayConstructor(this))(length);
  for (i = 0; length > i; i++) {
    result[i] = mapping ? mapfn(O[i], i) : O[i];
  }
  return result;
};

},{"../internals/to-object":"../../../node_modules/core-js/internals/to-object.js","../internals/to-length":"../../../node_modules/core-js/internals/to-length.js","../internals/get-iterator-method":"../../../node_modules/core-js/internals/get-iterator-method.js","../internals/is-array-iterator-method":"../../../node_modules/core-js/internals/is-array-iterator-method.js","../internals/bind-context":"../../../node_modules/core-js/internals/bind-context.js","../internals/array-buffer-view-core":"../../../node_modules/core-js/internals/array-buffer-view-core.js"}],"../../../node_modules/core-js/internals/typed-array-constructor.js":[function(require,module,exports) {

'use strict';
var $ = require('../internals/export');
var global = require('../internals/global');
var DESCRIPTORS = require('../internals/descriptors');
var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = require('../internals/typed-arrays-constructors-requires-wrappers');
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var ArrayBufferModule = require('../internals/array-buffer');
var anInstance = require('../internals/an-instance');
var createPropertyDescriptor = require('../internals/create-property-descriptor');
var hide = require('../internals/hide');
var toLength = require('../internals/to-length');
var toIndex = require('../internals/to-index');
var toOffset = require('../internals/to-offset');
var toPrimitive = require('../internals/to-primitive');
var has = require('../internals/has');
var classof = require('../internals/classof');
var isObject = require('../internals/is-object');
var create = require('../internals/object-create');
var setPrototypeOf = require('../internals/object-set-prototype-of');
var getOwnPropertyNames = require('../internals/object-get-own-property-names').f;
var typedArrayFrom = require('../internals/typed-array-from');
var forEach = require('../internals/array-iteration').forEach;
var setSpecies = require('../internals/set-species');
var definePropertyModule = require('../internals/object-define-property');
var getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');
var InternalStateModule = require('../internals/internal-state');

var getInternalState = InternalStateModule.get;
var setInternalState = InternalStateModule.set;
var nativeDefineProperty = definePropertyModule.f;
var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
var round = Math.round;
var RangeError = global.RangeError;
var ArrayBuffer = ArrayBufferModule.ArrayBuffer;
var DataView = ArrayBufferModule.DataView;
var NATIVE_ARRAY_BUFFER_VIEWS = ArrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;
var TYPED_ARRAY_TAG = ArrayBufferViewCore.TYPED_ARRAY_TAG;
var TypedArray = ArrayBufferViewCore.TypedArray;
var TypedArrayPrototype = ArrayBufferViewCore.TypedArrayPrototype;
var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
var isTypedArray = ArrayBufferViewCore.isTypedArray;
var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
var WRONG_LENGTH = 'Wrong length';

var fromList = function (C, list) {
  var index = 0;
  var length = list.length;
  var result = new (aTypedArrayConstructor(C))(length);
  while (length > index) result[index] = list[index++];
  return result;
};

var addGetter = function (it, key) {
  nativeDefineProperty(it, key, { get: function () {
    return getInternalState(this)[key];
  } });
};

var isArrayBuffer = function (it) {
  var klass;
  return it instanceof ArrayBuffer || (klass = classof(it)) == 'ArrayBuffer' || klass == 'SharedArrayBuffer';
};

var isTypedArrayIndex = function (target, key) {
  return isTypedArray(target)
    && typeof key != 'symbol'
    && key in target
    && String(+key) == String(key);
};

var wrappedGetOwnPropertyDescriptor = function getOwnPropertyDescriptor(target, key) {
  return isTypedArrayIndex(target, key = toPrimitive(key, true))
    ? createPropertyDescriptor(2, target[key])
    : nativeGetOwnPropertyDescriptor(target, key);
};

var wrappedDefineProperty = function defineProperty(target, key, descriptor) {
  if (isTypedArrayIndex(target, key = toPrimitive(key, true))
    && isObject(descriptor)
    && has(descriptor, 'value')
    && !has(descriptor, 'get')
    && !has(descriptor, 'set')
    // TODO: add validation descriptor w/o calling accessors
    && !descriptor.configurable
    && (!has(descriptor, 'writable') || descriptor.writable)
    && (!has(descriptor, 'enumerable') || descriptor.enumerable)
  ) {
    target[key] = descriptor.value;
    return target;
  } return nativeDefineProperty(target, key, descriptor);
};

if (DESCRIPTORS) {
  if (!NATIVE_ARRAY_BUFFER_VIEWS) {
    getOwnPropertyDescriptorModule.f = wrappedGetOwnPropertyDescriptor;
    definePropertyModule.f = wrappedDefineProperty;
    addGetter(TypedArrayPrototype, 'buffer');
    addGetter(TypedArrayPrototype, 'byteOffset');
    addGetter(TypedArrayPrototype, 'byteLength');
    addGetter(TypedArrayPrototype, 'length');
  }

  $({ target: 'Object', stat: true, forced: !NATIVE_ARRAY_BUFFER_VIEWS }, {
    getOwnPropertyDescriptor: wrappedGetOwnPropertyDescriptor,
    defineProperty: wrappedDefineProperty
  });

  // eslint-disable-next-line max-statements
  module.exports = function (TYPE, BYTES, wrapper, CLAMPED) {
    var CONSTRUCTOR_NAME = TYPE + (CLAMPED ? 'Clamped' : '') + 'Array';
    var GETTER = 'get' + TYPE;
    var SETTER = 'set' + TYPE;
    var NativeTypedArrayConstructor = global[CONSTRUCTOR_NAME];
    var TypedArrayConstructor = NativeTypedArrayConstructor;
    var TypedArrayConstructorPrototype = TypedArrayConstructor && TypedArrayConstructor.prototype;
    var exported = {};

    var getter = function (that, index) {
      var data = getInternalState(that);
      return data.view[GETTER](index * BYTES + data.byteOffset, true);
    };

    var setter = function (that, index, value) {
      var data = getInternalState(that);
      if (CLAMPED) value = (value = round(value)) < 0 ? 0 : value > 0xFF ? 0xFF : value & 0xFF;
      data.view[SETTER](index * BYTES + data.byteOffset, value, true);
    };

    var addElement = function (that, index) {
      nativeDefineProperty(that, index, {
        get: function () {
          return getter(this, index);
        },
        set: function (value) {
          return setter(this, index, value);
        },
        enumerable: true
      });
    };

    if (!NATIVE_ARRAY_BUFFER_VIEWS) {
      TypedArrayConstructor = wrapper(function (that, data, offset, $length) {
        anInstance(that, TypedArrayConstructor, CONSTRUCTOR_NAME);
        var index = 0;
        var byteOffset = 0;
        var buffer, byteLength, length;
        if (!isObject(data)) {
          length = toIndex(data);
          byteLength = length * BYTES;
          buffer = new ArrayBuffer(byteLength);
        } else if (isArrayBuffer(data)) {
          buffer = data;
          byteOffset = toOffset(offset, BYTES);
          var $len = data.byteLength;
          if ($length === undefined) {
            if ($len % BYTES) throw RangeError(WRONG_LENGTH);
            byteLength = $len - byteOffset;
            if (byteLength < 0) throw RangeError(WRONG_LENGTH);
          } else {
            byteLength = toLength($length) * BYTES;
            if (byteLength + byteOffset > $len) throw RangeError(WRONG_LENGTH);
          }
          length = byteLength / BYTES;
        } else if (isTypedArray(data)) {
          return fromList(TypedArrayConstructor, data);
        } else {
          return typedArrayFrom.call(TypedArrayConstructor, data);
        }
        setInternalState(that, {
          buffer: buffer,
          byteOffset: byteOffset,
          byteLength: byteLength,
          length: length,
          view: new DataView(buffer)
        });
        while (index < length) addElement(that, index++);
      });

      if (setPrototypeOf) setPrototypeOf(TypedArrayConstructor, TypedArray);
      TypedArrayConstructorPrototype = TypedArrayConstructor.prototype = create(TypedArrayPrototype);
    } else if (TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS) {
      TypedArrayConstructor = wrapper(function (dummy, data, typedArrayOffset, $length) {
        anInstance(dummy, TypedArrayConstructor, CONSTRUCTOR_NAME);
        if (!isObject(data)) return new NativeTypedArrayConstructor(toIndex(data));
        if (isArrayBuffer(data)) return $length !== undefined
          ? new NativeTypedArrayConstructor(data, toOffset(typedArrayOffset, BYTES), $length)
          : typedArrayOffset !== undefined
            ? new NativeTypedArrayConstructor(data, toOffset(typedArrayOffset, BYTES))
            : new NativeTypedArrayConstructor(data);
        if (isTypedArray(data)) return fromList(TypedArrayConstructor, data);
        return typedArrayFrom.call(TypedArrayConstructor, data);
      });

      if (setPrototypeOf) setPrototypeOf(TypedArrayConstructor, TypedArray);
      forEach(getOwnPropertyNames(NativeTypedArrayConstructor), function (key) {
        if (!(key in TypedArrayConstructor)) hide(TypedArrayConstructor, key, NativeTypedArrayConstructor[key]);
      });
      TypedArrayConstructor.prototype = TypedArrayConstructorPrototype;
    }

    if (TypedArrayConstructorPrototype.constructor !== TypedArrayConstructor) {
      hide(TypedArrayConstructorPrototype, 'constructor', TypedArrayConstructor);
    }

    if (TYPED_ARRAY_TAG) hide(TypedArrayConstructorPrototype, TYPED_ARRAY_TAG, CONSTRUCTOR_NAME);

    exported[CONSTRUCTOR_NAME] = TypedArrayConstructor;

    $({
      global: true, forced: TypedArrayConstructor != NativeTypedArrayConstructor, sham: !NATIVE_ARRAY_BUFFER_VIEWS
    }, exported);

    if (!(BYTES_PER_ELEMENT in TypedArrayConstructor)) {
      hide(TypedArrayConstructor, BYTES_PER_ELEMENT, BYTES);
    }

    if (!(BYTES_PER_ELEMENT in TypedArrayConstructorPrototype)) {
      hide(TypedArrayConstructorPrototype, BYTES_PER_ELEMENT, BYTES);
    }

    setSpecies(CONSTRUCTOR_NAME);
  };
} else module.exports = function () { /* empty */ };

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/global":"../../../node_modules/core-js/internals/global.js","../internals/descriptors":"../../../node_modules/core-js/internals/descriptors.js","../internals/typed-arrays-constructors-requires-wrappers":"../../../node_modules/core-js/internals/typed-arrays-constructors-requires-wrappers.js","../internals/array-buffer-view-core":"../../../node_modules/core-js/internals/array-buffer-view-core.js","../internals/array-buffer":"../../../node_modules/core-js/internals/array-buffer.js","../internals/an-instance":"../../../node_modules/core-js/internals/an-instance.js","../internals/create-property-descriptor":"../../../node_modules/core-js/internals/create-property-descriptor.js","../internals/hide":"../../../node_modules/core-js/internals/hide.js","../internals/to-length":"../../../node_modules/core-js/internals/to-length.js","../internals/to-index":"../../../node_modules/core-js/internals/to-index.js","../internals/to-offset":"../../../node_modules/core-js/internals/to-offset.js","../internals/to-primitive":"../../../node_modules/core-js/internals/to-primitive.js","../internals/has":"../../../node_modules/core-js/internals/has.js","../internals/classof":"../../../node_modules/core-js/internals/classof.js","../internals/is-object":"../../../node_modules/core-js/internals/is-object.js","../internals/object-create":"../../../node_modules/core-js/internals/object-create.js","../internals/object-set-prototype-of":"../../../node_modules/core-js/internals/object-set-prototype-of.js","../internals/object-get-own-property-names":"../../../node_modules/core-js/internals/object-get-own-property-names.js","../internals/typed-array-from":"../../../node_modules/core-js/internals/typed-array-from.js","../internals/array-iteration":"../../../node_modules/core-js/internals/array-iteration.js","../internals/set-species":"../../../node_modules/core-js/internals/set-species.js","../internals/object-define-property":"../../../node_modules/core-js/internals/object-define-property.js","../internals/object-get-own-property-descriptor":"../../../node_modules/core-js/internals/object-get-own-property-descriptor.js","../internals/internal-state":"../../../node_modules/core-js/internals/internal-state.js"}],"../../../node_modules/core-js/modules/es.typed-array.int8-array.js":[function(require,module,exports) {
var typedArrayConstructor = require('../internals/typed-array-constructor');

// `Int8Array` constructor
// https://tc39.github.io/ecma262/#sec-typedarray-objects
typedArrayConstructor('Int8', 1, function (init) {
  return function Int8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"../internals/typed-array-constructor":"../../../node_modules/core-js/internals/typed-array-constructor.js"}],"../../../node_modules/core-js/modules/es.typed-array.uint8-array.js":[function(require,module,exports) {
var typedArrayConstructor = require('../internals/typed-array-constructor');

// `Uint8Array` constructor
// https://tc39.github.io/ecma262/#sec-typedarray-objects
typedArrayConstructor('Uint8', 1, function (init) {
  return function Uint8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"../internals/typed-array-constructor":"../../../node_modules/core-js/internals/typed-array-constructor.js"}],"../../../node_modules/core-js/modules/es.typed-array.uint8-clamped-array.js":[function(require,module,exports) {
var typedArrayConstructor = require('../internals/typed-array-constructor');

// `Uint8ClampedArray` constructor
// https://tc39.github.io/ecma262/#sec-typedarray-objects
typedArrayConstructor('Uint8', 1, function (init) {
  return function Uint8ClampedArray(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
}, true);

},{"../internals/typed-array-constructor":"../../../node_modules/core-js/internals/typed-array-constructor.js"}],"../../../node_modules/core-js/modules/es.typed-array.int16-array.js":[function(require,module,exports) {
var typedArrayConstructor = require('../internals/typed-array-constructor');

// `Int16Array` constructor
// https://tc39.github.io/ecma262/#sec-typedarray-objects
typedArrayConstructor('Int16', 2, function (init) {
  return function Int16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"../internals/typed-array-constructor":"../../../node_modules/core-js/internals/typed-array-constructor.js"}],"../../../node_modules/core-js/modules/es.typed-array.uint16-array.js":[function(require,module,exports) {
var typedArrayConstructor = require('../internals/typed-array-constructor');

// `Uint16Array` constructor
// https://tc39.github.io/ecma262/#sec-typedarray-objects
typedArrayConstructor('Uint16', 2, function (init) {
  return function Uint16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"../internals/typed-array-constructor":"../../../node_modules/core-js/internals/typed-array-constructor.js"}],"../../../node_modules/core-js/modules/es.typed-array.int32-array.js":[function(require,module,exports) {
var typedArrayConstructor = require('../internals/typed-array-constructor');

// `Int32Array` constructor
// https://tc39.github.io/ecma262/#sec-typedarray-objects
typedArrayConstructor('Int32', 4, function (init) {
  return function Int32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"../internals/typed-array-constructor":"../../../node_modules/core-js/internals/typed-array-constructor.js"}],"../../../node_modules/core-js/modules/es.typed-array.uint32-array.js":[function(require,module,exports) {
var typedArrayConstructor = require('../internals/typed-array-constructor');

// `Uint32Array` constructor
// https://tc39.github.io/ecma262/#sec-typedarray-objects
typedArrayConstructor('Uint32', 4, function (init) {
  return function Uint32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"../internals/typed-array-constructor":"../../../node_modules/core-js/internals/typed-array-constructor.js"}],"../../../node_modules/core-js/modules/es.typed-array.float32-array.js":[function(require,module,exports) {
var typedArrayConstructor = require('../internals/typed-array-constructor');

// `Float32Array` constructor
// https://tc39.github.io/ecma262/#sec-typedarray-objects
typedArrayConstructor('Float32', 4, function (init) {
  return function Float32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"../internals/typed-array-constructor":"../../../node_modules/core-js/internals/typed-array-constructor.js"}],"../../../node_modules/core-js/modules/es.typed-array.float64-array.js":[function(require,module,exports) {
var typedArrayConstructor = require('../internals/typed-array-constructor');

// `Float64Array` constructor
// https://tc39.github.io/ecma262/#sec-typedarray-objects
typedArrayConstructor('Float64', 8, function (init) {
  return function Float64Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"../internals/typed-array-constructor":"../../../node_modules/core-js/internals/typed-array-constructor.js"}],"../../../node_modules/core-js/modules/es.typed-array.from.js":[function(require,module,exports) {
'use strict';
var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = require('../internals/typed-arrays-constructors-requires-wrappers');
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var typedArrayFrom = require('../internals/typed-array-from');

// `%TypedArray%.from` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.from
ArrayBufferViewCore.exportStatic('from', typedArrayFrom, TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS);

},{"../internals/typed-arrays-constructors-requires-wrappers":"../../../node_modules/core-js/internals/typed-arrays-constructors-requires-wrappers.js","../internals/array-buffer-view-core":"../../../node_modules/core-js/internals/array-buffer-view-core.js","../internals/typed-array-from":"../../../node_modules/core-js/internals/typed-array-from.js"}],"../../../node_modules/core-js/modules/es.typed-array.of.js":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = require('../internals/typed-arrays-constructors-requires-wrappers');

var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;

// `%TypedArray%.of` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.of
ArrayBufferViewCore.exportStatic('of', function of(/* ...items */) {
  var index = 0;
  var length = arguments.length;
  var result = new (aTypedArrayConstructor(this))(length);
  while (length > index) result[index] = arguments[index++];
  return result;
}, TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS);

},{"../internals/array-buffer-view-core":"../../../node_modules/core-js/internals/array-buffer-view-core.js","../internals/typed-arrays-constructors-requires-wrappers":"../../../node_modules/core-js/internals/typed-arrays-constructors-requires-wrappers.js"}],"../../../node_modules/core-js/modules/es.typed-array.copy-within.js":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $copyWithin = require('../internals/array-copy-within');

var aTypedArray = ArrayBufferViewCore.aTypedArray;

// `%TypedArray%.prototype.copyWithin` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.copywithin
ArrayBufferViewCore.exportProto('copyWithin', function copyWithin(target, start /* , end */) {
  return $copyWithin.call(aTypedArray(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
});

},{"../internals/array-buffer-view-core":"../../../node_modules/core-js/internals/array-buffer-view-core.js","../internals/array-copy-within":"../../../node_modules/core-js/internals/array-copy-within.js"}],"../../../node_modules/core-js/modules/es.typed-array.every.js":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $every = require('../internals/array-iteration').every;

var aTypedArray = ArrayBufferViewCore.aTypedArray;

// `%TypedArray%.prototype.every` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.every
ArrayBufferViewCore.exportProto('every', function every(callbackfn /* , thisArg */) {
  return $every(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
});

},{"../internals/array-buffer-view-core":"../../../node_modules/core-js/internals/array-buffer-view-core.js","../internals/array-iteration":"../../../node_modules/core-js/internals/array-iteration.js"}],"../../../node_modules/core-js/modules/es.typed-array.fill.js":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $fill = require('../internals/array-fill');

var aTypedArray = ArrayBufferViewCore.aTypedArray;

// `%TypedArray%.prototype.fill` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.fill
// eslint-disable-next-line no-unused-vars
ArrayBufferViewCore.exportProto('fill', function fill(value /* , start, end */) {
  return $fill.apply(aTypedArray(this), arguments);
});

},{"../internals/array-buffer-view-core":"../../../node_modules/core-js/internals/array-buffer-view-core.js","../internals/array-fill":"../../../node_modules/core-js/internals/array-fill.js"}],"../../../node_modules/core-js/modules/es.typed-array.filter.js":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $filter = require('../internals/array-iteration').filter;
var speciesConstructor = require('../internals/species-constructor');

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;

// `%TypedArray%.prototype.filter` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.filter
ArrayBufferViewCore.exportProto('filter', function filter(callbackfn /* , thisArg */) {
  var list = $filter(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  var C = speciesConstructor(this, this.constructor);
  var index = 0;
  var length = list.length;
  var result = new (aTypedArrayConstructor(C))(length);
  while (length > index) result[index] = list[index++];
  return result;
});

},{"../internals/array-buffer-view-core":"../../../node_modules/core-js/internals/array-buffer-view-core.js","../internals/array-iteration":"../../../node_modules/core-js/internals/array-iteration.js","../internals/species-constructor":"../../../node_modules/core-js/internals/species-constructor.js"}],"../../../node_modules/core-js/modules/es.typed-array.find.js":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $find = require('../internals/array-iteration').find;

var aTypedArray = ArrayBufferViewCore.aTypedArray;

// `%TypedArray%.prototype.find` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.find
ArrayBufferViewCore.exportProto('find', function find(predicate /* , thisArg */) {
  return $find(aTypedArray(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
});

},{"../internals/array-buffer-view-core":"../../../node_modules/core-js/internals/array-buffer-view-core.js","../internals/array-iteration":"../../../node_modules/core-js/internals/array-iteration.js"}],"../../../node_modules/core-js/modules/es.typed-array.find-index.js":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $findIndex = require('../internals/array-iteration').findIndex;

var aTypedArray = ArrayBufferViewCore.aTypedArray;

// `%TypedArray%.prototype.findIndex` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.findindex
ArrayBufferViewCore.exportProto('findIndex', function findIndex(predicate /* , thisArg */) {
  return $findIndex(aTypedArray(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
});

},{"../internals/array-buffer-view-core":"../../../node_modules/core-js/internals/array-buffer-view-core.js","../internals/array-iteration":"../../../node_modules/core-js/internals/array-iteration.js"}],"../../../node_modules/core-js/modules/es.typed-array.for-each.js":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $forEach = require('../internals/array-iteration').forEach;

var aTypedArray = ArrayBufferViewCore.aTypedArray;

// `%TypedArray%.prototype.forEach` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.foreach
ArrayBufferViewCore.exportProto('forEach', function forEach(callbackfn /* , thisArg */) {
  $forEach(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
});

},{"../internals/array-buffer-view-core":"../../../node_modules/core-js/internals/array-buffer-view-core.js","../internals/array-iteration":"../../../node_modules/core-js/internals/array-iteration.js"}],"../../../node_modules/core-js/modules/es.typed-array.includes.js":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $includes = require('../internals/array-includes').includes;

var aTypedArray = ArrayBufferViewCore.aTypedArray;

// `%TypedArray%.prototype.includes` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.includes
ArrayBufferViewCore.exportProto('includes', function includes(searchElement /* , fromIndex */) {
  return $includes(aTypedArray(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
});

},{"../internals/array-buffer-view-core":"../../../node_modules/core-js/internals/array-buffer-view-core.js","../internals/array-includes":"../../../node_modules/core-js/internals/array-includes.js"}],"../../../node_modules/core-js/modules/es.typed-array.index-of.js":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $indexOf = require('../internals/array-includes').indexOf;

var aTypedArray = ArrayBufferViewCore.aTypedArray;

// `%TypedArray%.prototype.indexOf` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.indexof
ArrayBufferViewCore.exportProto('indexOf', function indexOf(searchElement /* , fromIndex */) {
  return $indexOf(aTypedArray(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
});

},{"../internals/array-buffer-view-core":"../../../node_modules/core-js/internals/array-buffer-view-core.js","../internals/array-includes":"../../../node_modules/core-js/internals/array-includes.js"}],"../../../node_modules/core-js/modules/es.typed-array.iterator.js":[function(require,module,exports) {

'use strict';
var global = require('../internals/global');
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var ArrayIterators = require('../modules/es.array.iterator');
var wellKnownSymbol = require('../internals/well-known-symbol');

var ITERATOR = wellKnownSymbol('iterator');
var Uint8Array = global.Uint8Array;
var arrayValues = ArrayIterators.values;
var arrayKeys = ArrayIterators.keys;
var arrayEntries = ArrayIterators.entries;
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportProto = ArrayBufferViewCore.exportProto;
var nativeTypedArrayIterator = Uint8Array && Uint8Array.prototype[ITERATOR];

var CORRECT_ITER_NAME = !!nativeTypedArrayIterator
  && (nativeTypedArrayIterator.name == 'values' || nativeTypedArrayIterator.name == undefined);

var typedArrayValues = function values() {
  return arrayValues.call(aTypedArray(this));
};

// `%TypedArray%.prototype.entries` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.entries
exportProto('entries', function entries() {
  return arrayEntries.call(aTypedArray(this));
});
// `%TypedArray%.prototype.keys` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.keys
exportProto('keys', function keys() {
  return arrayKeys.call(aTypedArray(this));
});
// `%TypedArray%.prototype.values` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.values
exportProto('values', typedArrayValues, !CORRECT_ITER_NAME);
// `%TypedArray%.prototype[@@iterator]` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype-@@iterator
exportProto(ITERATOR, typedArrayValues, !CORRECT_ITER_NAME);

},{"../internals/global":"../../../node_modules/core-js/internals/global.js","../internals/array-buffer-view-core":"../../../node_modules/core-js/internals/array-buffer-view-core.js","../modules/es.array.iterator":"../../../node_modules/core-js/modules/es.array.iterator.js","../internals/well-known-symbol":"../../../node_modules/core-js/internals/well-known-symbol.js"}],"../../../node_modules/core-js/modules/es.typed-array.join.js":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var $join = [].join;

// `%TypedArray%.prototype.join` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.join
// eslint-disable-next-line no-unused-vars
ArrayBufferViewCore.exportProto('join', function join(separator) {
  return $join.apply(aTypedArray(this), arguments);
});

},{"../internals/array-buffer-view-core":"../../../node_modules/core-js/internals/array-buffer-view-core.js"}],"../../../node_modules/core-js/modules/es.typed-array.last-index-of.js":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $lastIndexOf = require('../internals/array-last-index-of');

var aTypedArray = ArrayBufferViewCore.aTypedArray;

// `%TypedArray%.prototype.lastIndexOf` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.lastindexof
// eslint-disable-next-line no-unused-vars
ArrayBufferViewCore.exportProto('lastIndexOf', function lastIndexOf(searchElement /* , fromIndex */) {
  return $lastIndexOf.apply(aTypedArray(this), arguments);
});

},{"../internals/array-buffer-view-core":"../../../node_modules/core-js/internals/array-buffer-view-core.js","../internals/array-last-index-of":"../../../node_modules/core-js/internals/array-last-index-of.js"}],"../../../node_modules/core-js/modules/es.typed-array.map.js":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $map = require('../internals/array-iteration').map;
var speciesConstructor = require('../internals/species-constructor');

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;

// `%TypedArray%.prototype.map` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.map
ArrayBufferViewCore.exportProto('map', function map(mapfn /* , thisArg */) {
  return $map(aTypedArray(this), mapfn, arguments.length > 1 ? arguments[1] : undefined, function (O, length) {
    return new (aTypedArrayConstructor(speciesConstructor(O, O.constructor)))(length);
  });
});

},{"../internals/array-buffer-view-core":"../../../node_modules/core-js/internals/array-buffer-view-core.js","../internals/array-iteration":"../../../node_modules/core-js/internals/array-iteration.js","../internals/species-constructor":"../../../node_modules/core-js/internals/species-constructor.js"}],"../../../node_modules/core-js/modules/es.typed-array.reduce.js":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $reduce = require('../internals/array-reduce').left;

var aTypedArray = ArrayBufferViewCore.aTypedArray;

// `%TypedArray%.prototype.reduce` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.reduce
ArrayBufferViewCore.exportProto('reduce', function reduce(callbackfn /* , initialValue */) {
  return $reduce(aTypedArray(this), callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
});

},{"../internals/array-buffer-view-core":"../../../node_modules/core-js/internals/array-buffer-view-core.js","../internals/array-reduce":"../../../node_modules/core-js/internals/array-reduce.js"}],"../../../node_modules/core-js/modules/es.typed-array.reduce-right.js":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $reduceRight = require('../internals/array-reduce').right;

var aTypedArray = ArrayBufferViewCore.aTypedArray;

// `%TypedArray%.prototype.reduceRicht` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.reduceright
ArrayBufferViewCore.exportProto('reduceRight', function reduceRight(callbackfn /* , initialValue */) {
  return $reduceRight(aTypedArray(this), callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
});

},{"../internals/array-buffer-view-core":"../../../node_modules/core-js/internals/array-buffer-view-core.js","../internals/array-reduce":"../../../node_modules/core-js/internals/array-reduce.js"}],"../../../node_modules/core-js/modules/es.typed-array.reverse.js":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var floor = Math.floor;

// `%TypedArray%.prototype.reverse` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.reverse
ArrayBufferViewCore.exportProto('reverse', function reverse() {
  var that = this;
  var length = aTypedArray(that).length;
  var middle = floor(length / 2);
  var index = 0;
  var value;
  while (index < middle) {
    value = that[index];
    that[index++] = that[--length];
    that[length] = value;
  } return that;
});

},{"../internals/array-buffer-view-core":"../../../node_modules/core-js/internals/array-buffer-view-core.js"}],"../../../node_modules/core-js/modules/es.typed-array.set.js":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var toLength = require('../internals/to-length');
var toOffset = require('../internals/to-offset');
var toObject = require('../internals/to-object');
var fails = require('../internals/fails');

var aTypedArray = ArrayBufferViewCore.aTypedArray;

var FORCED = fails(function () {
  // eslint-disable-next-line no-undef
  new Int8Array(1).set({});
});

// `%TypedArray%.prototype.set` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.set
ArrayBufferViewCore.exportProto('set', function set(arrayLike /* , offset */) {
  aTypedArray(this);
  var offset = toOffset(arguments.length > 1 ? arguments[1] : undefined, 1);
  var length = this.length;
  var src = toObject(arrayLike);
  var len = toLength(src.length);
  var index = 0;
  if (len + offset > length) throw RangeError('Wrong length');
  while (index < len) this[offset + index] = src[index++];
}, FORCED);

},{"../internals/array-buffer-view-core":"../../../node_modules/core-js/internals/array-buffer-view-core.js","../internals/to-length":"../../../node_modules/core-js/internals/to-length.js","../internals/to-offset":"../../../node_modules/core-js/internals/to-offset.js","../internals/to-object":"../../../node_modules/core-js/internals/to-object.js","../internals/fails":"../../../node_modules/core-js/internals/fails.js"}],"../../../node_modules/core-js/modules/es.typed-array.slice.js":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var speciesConstructor = require('../internals/species-constructor');
var fails = require('../internals/fails');

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
var $slice = [].slice;

var FORCED = fails(function () {
  // eslint-disable-next-line no-undef
  new Int8Array(1).slice();
});

// `%TypedArray%.prototype.slice` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.slice
ArrayBufferViewCore.exportProto('slice', function slice(start, end) {
  var list = $slice.call(aTypedArray(this), start, end);
  var C = speciesConstructor(this, this.constructor);
  var index = 0;
  var length = list.length;
  var result = new (aTypedArrayConstructor(C))(length);
  while (length > index) result[index] = list[index++];
  return result;
}, FORCED);

},{"../internals/array-buffer-view-core":"../../../node_modules/core-js/internals/array-buffer-view-core.js","../internals/species-constructor":"../../../node_modules/core-js/internals/species-constructor.js","../internals/fails":"../../../node_modules/core-js/internals/fails.js"}],"../../../node_modules/core-js/modules/es.typed-array.some.js":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $some = require('../internals/array-iteration').some;

var aTypedArray = ArrayBufferViewCore.aTypedArray;

// `%TypedArray%.prototype.some` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.some
ArrayBufferViewCore.exportProto('some', function some(callbackfn /* , thisArg */) {
  return $some(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
});

},{"../internals/array-buffer-view-core":"../../../node_modules/core-js/internals/array-buffer-view-core.js","../internals/array-iteration":"../../../node_modules/core-js/internals/array-iteration.js"}],"../../../node_modules/core-js/modules/es.typed-array.sort.js":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var $sort = [].sort;

// `%TypedArray%.prototype.sort` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.sort
ArrayBufferViewCore.exportProto('sort', function sort(comparefn) {
  return $sort.call(aTypedArray(this), comparefn);
});

},{"../internals/array-buffer-view-core":"../../../node_modules/core-js/internals/array-buffer-view-core.js"}],"../../../node_modules/core-js/modules/es.typed-array.subarray.js":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var toLength = require('../internals/to-length');
var toAbsoluteIndex = require('../internals/to-absolute-index');
var speciesConstructor = require('../internals/species-constructor');

var aTypedArray = ArrayBufferViewCore.aTypedArray;

// `%TypedArray%.prototype.subarray` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.subarray
ArrayBufferViewCore.exportProto('subarray', function subarray(begin, end) {
  var O = aTypedArray(this);
  var length = O.length;
  var beginIndex = toAbsoluteIndex(begin, length);
  return new (speciesConstructor(O, O.constructor))(
    O.buffer,
    O.byteOffset + beginIndex * O.BYTES_PER_ELEMENT,
    toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - beginIndex)
  );
});

},{"../internals/array-buffer-view-core":"../../../node_modules/core-js/internals/array-buffer-view-core.js","../internals/to-length":"../../../node_modules/core-js/internals/to-length.js","../internals/to-absolute-index":"../../../node_modules/core-js/internals/to-absolute-index.js","../internals/species-constructor":"../../../node_modules/core-js/internals/species-constructor.js"}],"../../../node_modules/core-js/modules/es.typed-array.to-locale-string.js":[function(require,module,exports) {

'use strict';
var global = require('../internals/global');
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var fails = require('../internals/fails');

var Int8Array = global.Int8Array;
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var $toLocaleString = [].toLocaleString;
var $slice = [].slice;

// iOS Safari 6.x fails here
var TO_LOCALE_STRING_BUG = !!Int8Array && fails(function () {
  $toLocaleString.call(new Int8Array(1));
});

var FORCED = fails(function () {
  return [1, 2].toLocaleString() != new Int8Array([1, 2]).toLocaleString();
}) || !fails(function () {
  Int8Array.prototype.toLocaleString.call([1, 2]);
});

// `%TypedArray%.prototype.toLocaleString` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.tolocalestring
ArrayBufferViewCore.exportProto('toLocaleString', function toLocaleString() {
  return $toLocaleString.apply(TO_LOCALE_STRING_BUG ? $slice.call(aTypedArray(this)) : aTypedArray(this), arguments);
}, FORCED);

},{"../internals/global":"../../../node_modules/core-js/internals/global.js","../internals/array-buffer-view-core":"../../../node_modules/core-js/internals/array-buffer-view-core.js","../internals/fails":"../../../node_modules/core-js/internals/fails.js"}],"../../../node_modules/core-js/modules/es.typed-array.to-string.js":[function(require,module,exports) {

'use strict';
var global = require('../internals/global');
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var fails = require('../internals/fails');

var Uint8Array = global.Uint8Array;
var Uint8ArrayPrototype = Uint8Array && Uint8Array.prototype;
var arrayToString = [].toString;
var arrayJoin = [].join;

if (fails(function () { arrayToString.call({}); })) {
  arrayToString = function toString() {
    return arrayJoin.call(this);
  };
}

// `%TypedArray%.prototype.toString` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.tostring
ArrayBufferViewCore.exportProto('toString', arrayToString, (Uint8ArrayPrototype || {}).toString != arrayToString);

},{"../internals/global":"../../../node_modules/core-js/internals/global.js","../internals/array-buffer-view-core":"../../../node_modules/core-js/internals/array-buffer-view-core.js","../internals/fails":"../../../node_modules/core-js/internals/fails.js"}],"../../../node_modules/core-js/modules/es.reflect.apply.js":[function(require,module,exports) {
var $ = require('../internals/export');
var getBuiltIn = require('../internals/get-built-in');
var aFunction = require('../internals/a-function');
var anObject = require('../internals/an-object');
var fails = require('../internals/fails');

var nativeApply = getBuiltIn('Reflect', 'apply');
var functionApply = Function.apply;

// MS Edge argumentsList argument is optional
var OPTIONAL_ARGUMENTS_LIST = !fails(function () {
  nativeApply(function () { /* empty */ });
});

// `Reflect.apply` method
// https://tc39.github.io/ecma262/#sec-reflect.apply
$({ target: 'Reflect', stat: true, forced: OPTIONAL_ARGUMENTS_LIST }, {
  apply: function apply(target, thisArgument, argumentsList) {
    aFunction(target);
    anObject(argumentsList);
    return nativeApply
      ? nativeApply(target, thisArgument, argumentsList)
      : functionApply.call(target, thisArgument, argumentsList);
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/get-built-in":"../../../node_modules/core-js/internals/get-built-in.js","../internals/a-function":"../../../node_modules/core-js/internals/a-function.js","../internals/an-object":"../../../node_modules/core-js/internals/an-object.js","../internals/fails":"../../../node_modules/core-js/internals/fails.js"}],"../../../node_modules/core-js/modules/es.reflect.construct.js":[function(require,module,exports) {
var $ = require('../internals/export');
var getBuiltIn = require('../internals/get-built-in');
var aFunction = require('../internals/a-function');
var anObject = require('../internals/an-object');
var isObject = require('../internals/is-object');
var create = require('../internals/object-create');
var bind = require('../internals/function-bind');
var fails = require('../internals/fails');

var nativeConstruct = getBuiltIn('Reflect', 'construct');

// `Reflect.construct` method
// https://tc39.github.io/ecma262/#sec-reflect.construct
// MS Edge supports only 2 arguments and argumentsList argument is optional
// FF Nightly sets third argument as `new.target`, but does not create `this` from it
var NEW_TARGET_BUG = fails(function () {
  function F() { /* empty */ }
  return !(nativeConstruct(function () { /* empty */ }, [], F) instanceof F);
});
var ARGS_BUG = !fails(function () {
  nativeConstruct(function () { /* empty */ });
});
var FORCED = NEW_TARGET_BUG || ARGS_BUG;

$({ target: 'Reflect', stat: true, forced: FORCED, sham: FORCED }, {
  construct: function construct(Target, args /* , newTarget */) {
    aFunction(Target);
    anObject(args);
    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
    if (ARGS_BUG && !NEW_TARGET_BUG) return nativeConstruct(Target, args, newTarget);
    if (Target == newTarget) {
      // w/o altered newTarget, optimization for 0-4 arguments
      switch (args.length) {
        case 0: return new Target();
        case 1: return new Target(args[0]);
        case 2: return new Target(args[0], args[1]);
        case 3: return new Target(args[0], args[1], args[2]);
        case 4: return new Target(args[0], args[1], args[2], args[3]);
      }
      // w/o altered newTarget, lot of arguments case
      var $args = [null];
      $args.push.apply($args, args);
      return new (bind.apply(Target, $args))();
    }
    // with altered newTarget, not support built-in constructors
    var proto = newTarget.prototype;
    var instance = create(isObject(proto) ? proto : Object.prototype);
    var result = Function.apply.call(Target, instance, args);
    return isObject(result) ? result : instance;
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/get-built-in":"../../../node_modules/core-js/internals/get-built-in.js","../internals/a-function":"../../../node_modules/core-js/internals/a-function.js","../internals/an-object":"../../../node_modules/core-js/internals/an-object.js","../internals/is-object":"../../../node_modules/core-js/internals/is-object.js","../internals/object-create":"../../../node_modules/core-js/internals/object-create.js","../internals/function-bind":"../../../node_modules/core-js/internals/function-bind.js","../internals/fails":"../../../node_modules/core-js/internals/fails.js"}],"../../../node_modules/core-js/modules/es.reflect.define-property.js":[function(require,module,exports) {
var $ = require('../internals/export');
var DESCRIPTORS = require('../internals/descriptors');
var anObject = require('../internals/an-object');
var toPrimitive = require('../internals/to-primitive');
var definePropertyModule = require('../internals/object-define-property');
var fails = require('../internals/fails');

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
var ERROR_INSTEAD_OF_FALSE = fails(function () {
  // eslint-disable-next-line no-undef
  Reflect.defineProperty(definePropertyModule.f({}, 1, { value: 1 }), 1, { value: 2 });
});

// `Reflect.defineProperty` method
// https://tc39.github.io/ecma262/#sec-reflect.defineproperty
$({ target: 'Reflect', stat: true, forced: ERROR_INSTEAD_OF_FALSE, sham: !DESCRIPTORS }, {
  defineProperty: function defineProperty(target, propertyKey, attributes) {
    anObject(target);
    var key = toPrimitive(propertyKey, true);
    anObject(attributes);
    try {
      definePropertyModule.f(target, key, attributes);
      return true;
    } catch (error) {
      return false;
    }
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/descriptors":"../../../node_modules/core-js/internals/descriptors.js","../internals/an-object":"../../../node_modules/core-js/internals/an-object.js","../internals/to-primitive":"../../../node_modules/core-js/internals/to-primitive.js","../internals/object-define-property":"../../../node_modules/core-js/internals/object-define-property.js","../internals/fails":"../../../node_modules/core-js/internals/fails.js"}],"../../../node_modules/core-js/modules/es.reflect.delete-property.js":[function(require,module,exports) {
var $ = require('../internals/export');
var anObject = require('../internals/an-object');
var getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;

// `Reflect.deleteProperty` method
// https://tc39.github.io/ecma262/#sec-reflect.deleteproperty
$({ target: 'Reflect', stat: true }, {
  deleteProperty: function deleteProperty(target, propertyKey) {
    var descriptor = getOwnPropertyDescriptor(anObject(target), propertyKey);
    return descriptor && !descriptor.configurable ? false : delete target[propertyKey];
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/an-object":"../../../node_modules/core-js/internals/an-object.js","../internals/object-get-own-property-descriptor":"../../../node_modules/core-js/internals/object-get-own-property-descriptor.js"}],"../../../node_modules/core-js/modules/es.reflect.get.js":[function(require,module,exports) {
var $ = require('../internals/export');
var isObject = require('../internals/is-object');
var anObject = require('../internals/an-object');
var has = require('../internals/has');
var getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');
var getPrototypeOf = require('../internals/object-get-prototype-of');

// `Reflect.get` method
// https://tc39.github.io/ecma262/#sec-reflect.get
function get(target, propertyKey /* , receiver */) {
  var receiver = arguments.length < 3 ? target : arguments[2];
  var descriptor, prototype;
  if (anObject(target) === receiver) return target[propertyKey];
  if (descriptor = getOwnPropertyDescriptorModule.f(target, propertyKey)) return has(descriptor, 'value')
    ? descriptor.value
    : descriptor.get === undefined
      ? undefined
      : descriptor.get.call(receiver);
  if (isObject(prototype = getPrototypeOf(target))) return get(prototype, propertyKey, receiver);
}

$({ target: 'Reflect', stat: true }, {
  get: get
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/is-object":"../../../node_modules/core-js/internals/is-object.js","../internals/an-object":"../../../node_modules/core-js/internals/an-object.js","../internals/has":"../../../node_modules/core-js/internals/has.js","../internals/object-get-own-property-descriptor":"../../../node_modules/core-js/internals/object-get-own-property-descriptor.js","../internals/object-get-prototype-of":"../../../node_modules/core-js/internals/object-get-prototype-of.js"}],"../../../node_modules/core-js/modules/es.reflect.get-own-property-descriptor.js":[function(require,module,exports) {
var $ = require('../internals/export');
var DESCRIPTORS = require('../internals/descriptors');
var anObject = require('../internals/an-object');
var getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');

// `Reflect.getOwnPropertyDescriptor` method
// https://tc39.github.io/ecma262/#sec-reflect.getownpropertydescriptor
$({ target: 'Reflect', stat: true, sham: !DESCRIPTORS }, {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
    return getOwnPropertyDescriptorModule.f(anObject(target), propertyKey);
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/descriptors":"../../../node_modules/core-js/internals/descriptors.js","../internals/an-object":"../../../node_modules/core-js/internals/an-object.js","../internals/object-get-own-property-descriptor":"../../../node_modules/core-js/internals/object-get-own-property-descriptor.js"}],"../../../node_modules/core-js/modules/es.reflect.get-prototype-of.js":[function(require,module,exports) {
var $ = require('../internals/export');
var anObject = require('../internals/an-object');
var objectGetPrototypeOf = require('../internals/object-get-prototype-of');
var CORRECT_PROTOTYPE_GETTER = require('../internals/correct-prototype-getter');

// `Reflect.getPrototypeOf` method
// https://tc39.github.io/ecma262/#sec-reflect.getprototypeof
$({ target: 'Reflect', stat: true, sham: !CORRECT_PROTOTYPE_GETTER }, {
  getPrototypeOf: function getPrototypeOf(target) {
    return objectGetPrototypeOf(anObject(target));
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/an-object":"../../../node_modules/core-js/internals/an-object.js","../internals/object-get-prototype-of":"../../../node_modules/core-js/internals/object-get-prototype-of.js","../internals/correct-prototype-getter":"../../../node_modules/core-js/internals/correct-prototype-getter.js"}],"../../../node_modules/core-js/modules/es.reflect.has.js":[function(require,module,exports) {
var $ = require('../internals/export');

// `Reflect.has` method
// https://tc39.github.io/ecma262/#sec-reflect.has
$({ target: 'Reflect', stat: true }, {
  has: function has(target, propertyKey) {
    return propertyKey in target;
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js"}],"../../../node_modules/core-js/modules/es.reflect.is-extensible.js":[function(require,module,exports) {
var $ = require('../internals/export');
var anObject = require('../internals/an-object');

var objectIsExtensible = Object.isExtensible;

// `Reflect.isExtensible` method
// https://tc39.github.io/ecma262/#sec-reflect.isextensible
$({ target: 'Reflect', stat: true }, {
  isExtensible: function isExtensible(target) {
    anObject(target);
    return objectIsExtensible ? objectIsExtensible(target) : true;
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/an-object":"../../../node_modules/core-js/internals/an-object.js"}],"../../../node_modules/core-js/modules/es.reflect.own-keys.js":[function(require,module,exports) {
var $ = require('../internals/export');
var ownKeys = require('../internals/own-keys');

// `Reflect.ownKeys` method
// https://tc39.github.io/ecma262/#sec-reflect.ownkeys
$({ target: 'Reflect', stat: true }, {
  ownKeys: ownKeys
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/own-keys":"../../../node_modules/core-js/internals/own-keys.js"}],"../../../node_modules/core-js/modules/es.reflect.prevent-extensions.js":[function(require,module,exports) {
var $ = require('../internals/export');
var getBuiltIn = require('../internals/get-built-in');
var anObject = require('../internals/an-object');
var FREEZING = require('../internals/freezing');

// `Reflect.preventExtensions` method
// https://tc39.github.io/ecma262/#sec-reflect.preventextensions
$({ target: 'Reflect', stat: true, sham: !FREEZING }, {
  preventExtensions: function preventExtensions(target) {
    anObject(target);
    try {
      var objectPreventExtensions = getBuiltIn('Object', 'preventExtensions');
      if (objectPreventExtensions) objectPreventExtensions(target);
      return true;
    } catch (error) {
      return false;
    }
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/get-built-in":"../../../node_modules/core-js/internals/get-built-in.js","../internals/an-object":"../../../node_modules/core-js/internals/an-object.js","../internals/freezing":"../../../node_modules/core-js/internals/freezing.js"}],"../../../node_modules/core-js/modules/es.reflect.set.js":[function(require,module,exports) {
var $ = require('../internals/export');
var anObject = require('../internals/an-object');
var isObject = require('../internals/is-object');
var has = require('../internals/has');
var definePropertyModule = require('../internals/object-define-property');
var getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');
var getPrototypeOf = require('../internals/object-get-prototype-of');
var createPropertyDescriptor = require('../internals/create-property-descriptor');

// `Reflect.set` method
// https://tc39.github.io/ecma262/#sec-reflect.set
function set(target, propertyKey, V /* , receiver */) {
  var receiver = arguments.length < 4 ? target : arguments[3];
  var ownDescriptor = getOwnPropertyDescriptorModule.f(anObject(target), propertyKey);
  var existingDescriptor, prototype;
  if (!ownDescriptor) {
    if (isObject(prototype = getPrototypeOf(target))) {
      return set(prototype, propertyKey, V, receiver);
    }
    ownDescriptor = createPropertyDescriptor(0);
  }
  if (has(ownDescriptor, 'value')) {
    if (ownDescriptor.writable === false || !isObject(receiver)) return false;
    if (existingDescriptor = getOwnPropertyDescriptorModule.f(receiver, propertyKey)) {
      if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;
      existingDescriptor.value = V;
      definePropertyModule.f(receiver, propertyKey, existingDescriptor);
    } else definePropertyModule.f(receiver, propertyKey, createPropertyDescriptor(0, V));
    return true;
  }
  return ownDescriptor.set === undefined ? false : (ownDescriptor.set.call(receiver, V), true);
}

$({ target: 'Reflect', stat: true }, {
  set: set
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/an-object":"../../../node_modules/core-js/internals/an-object.js","../internals/is-object":"../../../node_modules/core-js/internals/is-object.js","../internals/has":"../../../node_modules/core-js/internals/has.js","../internals/object-define-property":"../../../node_modules/core-js/internals/object-define-property.js","../internals/object-get-own-property-descriptor":"../../../node_modules/core-js/internals/object-get-own-property-descriptor.js","../internals/object-get-prototype-of":"../../../node_modules/core-js/internals/object-get-prototype-of.js","../internals/create-property-descriptor":"../../../node_modules/core-js/internals/create-property-descriptor.js"}],"../../../node_modules/core-js/modules/es.reflect.set-prototype-of.js":[function(require,module,exports) {
var $ = require('../internals/export');
var anObject = require('../internals/an-object');
var aPossiblePrototype = require('../internals/a-possible-prototype');
var objectSetPrototypeOf = require('../internals/object-set-prototype-of');

// `Reflect.setPrototypeOf` method
// https://tc39.github.io/ecma262/#sec-reflect.setprototypeof
if (objectSetPrototypeOf) $({ target: 'Reflect', stat: true }, {
  setPrototypeOf: function setPrototypeOf(target, proto) {
    anObject(target);
    aPossiblePrototype(proto);
    try {
      objectSetPrototypeOf(target, proto);
      return true;
    } catch (error) {
      return false;
    }
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/an-object":"../../../node_modules/core-js/internals/an-object.js","../internals/a-possible-prototype":"../../../node_modules/core-js/internals/a-possible-prototype.js","../internals/object-set-prototype-of":"../../../node_modules/core-js/internals/object-set-prototype-of.js"}],"../../../node_modules/core-js/es/index.js":[function(require,module,exports) {
require('../modules/es.symbol');
require('../modules/es.symbol.async-iterator');
require('../modules/es.symbol.description');
require('../modules/es.symbol.has-instance');
require('../modules/es.symbol.is-concat-spreadable');
require('../modules/es.symbol.iterator');
require('../modules/es.symbol.match');
require('../modules/es.symbol.match-all');
require('../modules/es.symbol.replace');
require('../modules/es.symbol.search');
require('../modules/es.symbol.species');
require('../modules/es.symbol.split');
require('../modules/es.symbol.to-primitive');
require('../modules/es.symbol.to-string-tag');
require('../modules/es.symbol.unscopables');
require('../modules/es.object.assign');
require('../modules/es.object.create');
require('../modules/es.object.define-property');
require('../modules/es.object.define-properties');
require('../modules/es.object.entries');
require('../modules/es.object.freeze');
require('../modules/es.object.from-entries');
require('../modules/es.object.get-own-property-descriptor');
require('../modules/es.object.get-own-property-descriptors');
require('../modules/es.object.get-own-property-names');
require('../modules/es.object.get-prototype-of');
require('../modules/es.object.is');
require('../modules/es.object.is-extensible');
require('../modules/es.object.is-frozen');
require('../modules/es.object.is-sealed');
require('../modules/es.object.keys');
require('../modules/es.object.prevent-extensions');
require('../modules/es.object.seal');
require('../modules/es.object.set-prototype-of');
require('../modules/es.object.values');
require('../modules/es.object.to-string');
require('../modules/es.object.define-getter');
require('../modules/es.object.define-setter');
require('../modules/es.object.lookup-getter');
require('../modules/es.object.lookup-setter');
require('../modules/es.function.bind');
require('../modules/es.function.name');
require('../modules/es.function.has-instance');
require('../modules/es.array.from');
require('../modules/es.array.is-array');
require('../modules/es.array.of');
require('../modules/es.array.concat');
require('../modules/es.array.copy-within');
require('../modules/es.array.every');
require('../modules/es.array.fill');
require('../modules/es.array.filter');
require('../modules/es.array.find');
require('../modules/es.array.find-index');
require('../modules/es.array.flat');
require('../modules/es.array.flat-map');
require('../modules/es.array.for-each');
require('../modules/es.array.includes');
require('../modules/es.array.index-of');
require('../modules/es.array.join');
require('../modules/es.array.last-index-of');
require('../modules/es.array.map');
require('../modules/es.array.reduce');
require('../modules/es.array.reduce-right');
require('../modules/es.array.reverse');
require('../modules/es.array.slice');
require('../modules/es.array.some');
require('../modules/es.array.sort');
require('../modules/es.array.splice');
require('../modules/es.array.species');
require('../modules/es.array.unscopables.flat');
require('../modules/es.array.unscopables.flat-map');
require('../modules/es.array.iterator');
require('../modules/es.string.from-code-point');
require('../modules/es.string.raw');
require('../modules/es.string.code-point-at');
require('../modules/es.string.ends-with');
require('../modules/es.string.includes');
require('../modules/es.string.match');
require('../modules/es.string.match-all');
require('../modules/es.string.pad-end');
require('../modules/es.string.pad-start');
require('../modules/es.string.repeat');
require('../modules/es.string.replace');
require('../modules/es.string.search');
require('../modules/es.string.split');
require('../modules/es.string.starts-with');
require('../modules/es.string.trim');
require('../modules/es.string.trim-start');
require('../modules/es.string.trim-end');
require('../modules/es.string.iterator');
require('../modules/es.string.anchor');
require('../modules/es.string.big');
require('../modules/es.string.blink');
require('../modules/es.string.bold');
require('../modules/es.string.fixed');
require('../modules/es.string.fontcolor');
require('../modules/es.string.fontsize');
require('../modules/es.string.italics');
require('../modules/es.string.link');
require('../modules/es.string.small');
require('../modules/es.string.strike');
require('../modules/es.string.sub');
require('../modules/es.string.sup');
require('../modules/es.regexp.constructor');
require('../modules/es.regexp.exec');
require('../modules/es.regexp.flags');
require('../modules/es.regexp.to-string');
require('../modules/es.parse-int');
require('../modules/es.parse-float');
require('../modules/es.number.constructor');
require('../modules/es.number.epsilon');
require('../modules/es.number.is-finite');
require('../modules/es.number.is-integer');
require('../modules/es.number.is-nan');
require('../modules/es.number.is-safe-integer');
require('../modules/es.number.max-safe-integer');
require('../modules/es.number.min-safe-integer');
require('../modules/es.number.parse-float');
require('../modules/es.number.parse-int');
require('../modules/es.number.to-fixed');
require('../modules/es.number.to-precision');
require('../modules/es.math.acosh');
require('../modules/es.math.asinh');
require('../modules/es.math.atanh');
require('../modules/es.math.cbrt');
require('../modules/es.math.clz32');
require('../modules/es.math.cosh');
require('../modules/es.math.expm1');
require('../modules/es.math.fround');
require('../modules/es.math.hypot');
require('../modules/es.math.imul');
require('../modules/es.math.log10');
require('../modules/es.math.log1p');
require('../modules/es.math.log2');
require('../modules/es.math.sign');
require('../modules/es.math.sinh');
require('../modules/es.math.tanh');
require('../modules/es.math.to-string-tag');
require('../modules/es.math.trunc');
require('../modules/es.date.now');
require('../modules/es.date.to-json');
require('../modules/es.date.to-iso-string');
require('../modules/es.date.to-string');
require('../modules/es.date.to-primitive');
require('../modules/es.json.to-string-tag');
require('../modules/es.promise');
require('../modules/es.promise.finally');
require('../modules/es.map');
require('../modules/es.set');
require('../modules/es.weak-map');
require('../modules/es.weak-set');
require('../modules/es.array-buffer.constructor');
require('../modules/es.array-buffer.is-view');
require('../modules/es.array-buffer.slice');
require('../modules/es.data-view');
require('../modules/es.typed-array.int8-array');
require('../modules/es.typed-array.uint8-array');
require('../modules/es.typed-array.uint8-clamped-array');
require('../modules/es.typed-array.int16-array');
require('../modules/es.typed-array.uint16-array');
require('../modules/es.typed-array.int32-array');
require('../modules/es.typed-array.uint32-array');
require('../modules/es.typed-array.float32-array');
require('../modules/es.typed-array.float64-array');
require('../modules/es.typed-array.from');
require('../modules/es.typed-array.of');
require('../modules/es.typed-array.copy-within');
require('../modules/es.typed-array.every');
require('../modules/es.typed-array.fill');
require('../modules/es.typed-array.filter');
require('../modules/es.typed-array.find');
require('../modules/es.typed-array.find-index');
require('../modules/es.typed-array.for-each');
require('../modules/es.typed-array.includes');
require('../modules/es.typed-array.index-of');
require('../modules/es.typed-array.iterator');
require('../modules/es.typed-array.join');
require('../modules/es.typed-array.last-index-of');
require('../modules/es.typed-array.map');
require('../modules/es.typed-array.reduce');
require('../modules/es.typed-array.reduce-right');
require('../modules/es.typed-array.reverse');
require('../modules/es.typed-array.set');
require('../modules/es.typed-array.slice');
require('../modules/es.typed-array.some');
require('../modules/es.typed-array.sort');
require('../modules/es.typed-array.subarray');
require('../modules/es.typed-array.to-locale-string');
require('../modules/es.typed-array.to-string');
require('../modules/es.reflect.apply');
require('../modules/es.reflect.construct');
require('../modules/es.reflect.define-property');
require('../modules/es.reflect.delete-property');
require('../modules/es.reflect.get');
require('../modules/es.reflect.get-own-property-descriptor');
require('../modules/es.reflect.get-prototype-of');
require('../modules/es.reflect.has');
require('../modules/es.reflect.is-extensible');
require('../modules/es.reflect.own-keys');
require('../modules/es.reflect.prevent-extensions');
require('../modules/es.reflect.set');
require('../modules/es.reflect.set-prototype-of');

module.exports = require('../internals/path');

},{"../modules/es.symbol":"../../../node_modules/core-js/modules/es.symbol.js","../modules/es.symbol.async-iterator":"../../../node_modules/core-js/modules/es.symbol.async-iterator.js","../modules/es.symbol.description":"../../../node_modules/core-js/modules/es.symbol.description.js","../modules/es.symbol.has-instance":"../../../node_modules/core-js/modules/es.symbol.has-instance.js","../modules/es.symbol.is-concat-spreadable":"../../../node_modules/core-js/modules/es.symbol.is-concat-spreadable.js","../modules/es.symbol.iterator":"../../../node_modules/core-js/modules/es.symbol.iterator.js","../modules/es.symbol.match":"../../../node_modules/core-js/modules/es.symbol.match.js","../modules/es.symbol.match-all":"../../../node_modules/core-js/modules/es.symbol.match-all.js","../modules/es.symbol.replace":"../../../node_modules/core-js/modules/es.symbol.replace.js","../modules/es.symbol.search":"../../../node_modules/core-js/modules/es.symbol.search.js","../modules/es.symbol.species":"../../../node_modules/core-js/modules/es.symbol.species.js","../modules/es.symbol.split":"../../../node_modules/core-js/modules/es.symbol.split.js","../modules/es.symbol.to-primitive":"../../../node_modules/core-js/modules/es.symbol.to-primitive.js","../modules/es.symbol.to-string-tag":"../../../node_modules/core-js/modules/es.symbol.to-string-tag.js","../modules/es.symbol.unscopables":"../../../node_modules/core-js/modules/es.symbol.unscopables.js","../modules/es.object.assign":"../../../node_modules/core-js/modules/es.object.assign.js","../modules/es.object.create":"../../../node_modules/core-js/modules/es.object.create.js","../modules/es.object.define-property":"../../../node_modules/core-js/modules/es.object.define-property.js","../modules/es.object.define-properties":"../../../node_modules/core-js/modules/es.object.define-properties.js","../modules/es.object.entries":"../../../node_modules/core-js/modules/es.object.entries.js","../modules/es.object.freeze":"../../../node_modules/core-js/modules/es.object.freeze.js","../modules/es.object.from-entries":"../../../node_modules/core-js/modules/es.object.from-entries.js","../modules/es.object.get-own-property-descriptor":"../../../node_modules/core-js/modules/es.object.get-own-property-descriptor.js","../modules/es.object.get-own-property-descriptors":"../../../node_modules/core-js/modules/es.object.get-own-property-descriptors.js","../modules/es.object.get-own-property-names":"../../../node_modules/core-js/modules/es.object.get-own-property-names.js","../modules/es.object.get-prototype-of":"../../../node_modules/core-js/modules/es.object.get-prototype-of.js","../modules/es.object.is":"../../../node_modules/core-js/modules/es.object.is.js","../modules/es.object.is-extensible":"../../../node_modules/core-js/modules/es.object.is-extensible.js","../modules/es.object.is-frozen":"../../../node_modules/core-js/modules/es.object.is-frozen.js","../modules/es.object.is-sealed":"../../../node_modules/core-js/modules/es.object.is-sealed.js","../modules/es.object.keys":"../../../node_modules/core-js/modules/es.object.keys.js","../modules/es.object.prevent-extensions":"../../../node_modules/core-js/modules/es.object.prevent-extensions.js","../modules/es.object.seal":"../../../node_modules/core-js/modules/es.object.seal.js","../modules/es.object.set-prototype-of":"../../../node_modules/core-js/modules/es.object.set-prototype-of.js","../modules/es.object.values":"../../../node_modules/core-js/modules/es.object.values.js","../modules/es.object.to-string":"../../../node_modules/core-js/modules/es.object.to-string.js","../modules/es.object.define-getter":"../../../node_modules/core-js/modules/es.object.define-getter.js","../modules/es.object.define-setter":"../../../node_modules/core-js/modules/es.object.define-setter.js","../modules/es.object.lookup-getter":"../../../node_modules/core-js/modules/es.object.lookup-getter.js","../modules/es.object.lookup-setter":"../../../node_modules/core-js/modules/es.object.lookup-setter.js","../modules/es.function.bind":"../../../node_modules/core-js/modules/es.function.bind.js","../modules/es.function.name":"../../../node_modules/core-js/modules/es.function.name.js","../modules/es.function.has-instance":"../../../node_modules/core-js/modules/es.function.has-instance.js","../modules/es.array.from":"../../../node_modules/core-js/modules/es.array.from.js","../modules/es.array.is-array":"../../../node_modules/core-js/modules/es.array.is-array.js","../modules/es.array.of":"../../../node_modules/core-js/modules/es.array.of.js","../modules/es.array.concat":"../../../node_modules/core-js/modules/es.array.concat.js","../modules/es.array.copy-within":"../../../node_modules/core-js/modules/es.array.copy-within.js","../modules/es.array.every":"../../../node_modules/core-js/modules/es.array.every.js","../modules/es.array.fill":"../../../node_modules/core-js/modules/es.array.fill.js","../modules/es.array.filter":"../../../node_modules/core-js/modules/es.array.filter.js","../modules/es.array.find":"../../../node_modules/core-js/modules/es.array.find.js","../modules/es.array.find-index":"../../../node_modules/core-js/modules/es.array.find-index.js","../modules/es.array.flat":"../../../node_modules/core-js/modules/es.array.flat.js","../modules/es.array.flat-map":"../../../node_modules/core-js/modules/es.array.flat-map.js","../modules/es.array.for-each":"../../../node_modules/core-js/modules/es.array.for-each.js","../modules/es.array.includes":"../../../node_modules/core-js/modules/es.array.includes.js","../modules/es.array.index-of":"../../../node_modules/core-js/modules/es.array.index-of.js","../modules/es.array.join":"../../../node_modules/core-js/modules/es.array.join.js","../modules/es.array.last-index-of":"../../../node_modules/core-js/modules/es.array.last-index-of.js","../modules/es.array.map":"../../../node_modules/core-js/modules/es.array.map.js","../modules/es.array.reduce":"../../../node_modules/core-js/modules/es.array.reduce.js","../modules/es.array.reduce-right":"../../../node_modules/core-js/modules/es.array.reduce-right.js","../modules/es.array.reverse":"../../../node_modules/core-js/modules/es.array.reverse.js","../modules/es.array.slice":"../../../node_modules/core-js/modules/es.array.slice.js","../modules/es.array.some":"../../../node_modules/core-js/modules/es.array.some.js","../modules/es.array.sort":"../../../node_modules/core-js/modules/es.array.sort.js","../modules/es.array.splice":"../../../node_modules/core-js/modules/es.array.splice.js","../modules/es.array.species":"../../../node_modules/core-js/modules/es.array.species.js","../modules/es.array.unscopables.flat":"../../../node_modules/core-js/modules/es.array.unscopables.flat.js","../modules/es.array.unscopables.flat-map":"../../../node_modules/core-js/modules/es.array.unscopables.flat-map.js","../modules/es.array.iterator":"../../../node_modules/core-js/modules/es.array.iterator.js","../modules/es.string.from-code-point":"../../../node_modules/core-js/modules/es.string.from-code-point.js","../modules/es.string.raw":"../../../node_modules/core-js/modules/es.string.raw.js","../modules/es.string.code-point-at":"../../../node_modules/core-js/modules/es.string.code-point-at.js","../modules/es.string.ends-with":"../../../node_modules/core-js/modules/es.string.ends-with.js","../modules/es.string.includes":"../../../node_modules/core-js/modules/es.string.includes.js","../modules/es.string.match":"../../../node_modules/core-js/modules/es.string.match.js","../modules/es.string.match-all":"../../../node_modules/core-js/modules/es.string.match-all.js","../modules/es.string.pad-end":"../../../node_modules/core-js/modules/es.string.pad-end.js","../modules/es.string.pad-start":"../../../node_modules/core-js/modules/es.string.pad-start.js","../modules/es.string.repeat":"../../../node_modules/core-js/modules/es.string.repeat.js","../modules/es.string.replace":"../../../node_modules/core-js/modules/es.string.replace.js","../modules/es.string.search":"../../../node_modules/core-js/modules/es.string.search.js","../modules/es.string.split":"../../../node_modules/core-js/modules/es.string.split.js","../modules/es.string.starts-with":"../../../node_modules/core-js/modules/es.string.starts-with.js","../modules/es.string.trim":"../../../node_modules/core-js/modules/es.string.trim.js","../modules/es.string.trim-start":"../../../node_modules/core-js/modules/es.string.trim-start.js","../modules/es.string.trim-end":"../../../node_modules/core-js/modules/es.string.trim-end.js","../modules/es.string.iterator":"../../../node_modules/core-js/modules/es.string.iterator.js","../modules/es.string.anchor":"../../../node_modules/core-js/modules/es.string.anchor.js","../modules/es.string.big":"../../../node_modules/core-js/modules/es.string.big.js","../modules/es.string.blink":"../../../node_modules/core-js/modules/es.string.blink.js","../modules/es.string.bold":"../../../node_modules/core-js/modules/es.string.bold.js","../modules/es.string.fixed":"../../../node_modules/core-js/modules/es.string.fixed.js","../modules/es.string.fontcolor":"../../../node_modules/core-js/modules/es.string.fontcolor.js","../modules/es.string.fontsize":"../../../node_modules/core-js/modules/es.string.fontsize.js","../modules/es.string.italics":"../../../node_modules/core-js/modules/es.string.italics.js","../modules/es.string.link":"../../../node_modules/core-js/modules/es.string.link.js","../modules/es.string.small":"../../../node_modules/core-js/modules/es.string.small.js","../modules/es.string.strike":"../../../node_modules/core-js/modules/es.string.strike.js","../modules/es.string.sub":"../../../node_modules/core-js/modules/es.string.sub.js","../modules/es.string.sup":"../../../node_modules/core-js/modules/es.string.sup.js","../modules/es.regexp.constructor":"../../../node_modules/core-js/modules/es.regexp.constructor.js","../modules/es.regexp.exec":"../../../node_modules/core-js/modules/es.regexp.exec.js","../modules/es.regexp.flags":"../../../node_modules/core-js/modules/es.regexp.flags.js","../modules/es.regexp.to-string":"../../../node_modules/core-js/modules/es.regexp.to-string.js","../modules/es.parse-int":"../../../node_modules/core-js/modules/es.parse-int.js","../modules/es.parse-float":"../../../node_modules/core-js/modules/es.parse-float.js","../modules/es.number.constructor":"../../../node_modules/core-js/modules/es.number.constructor.js","../modules/es.number.epsilon":"../../../node_modules/core-js/modules/es.number.epsilon.js","../modules/es.number.is-finite":"../../../node_modules/core-js/modules/es.number.is-finite.js","../modules/es.number.is-integer":"../../../node_modules/core-js/modules/es.number.is-integer.js","../modules/es.number.is-nan":"../../../node_modules/core-js/modules/es.number.is-nan.js","../modules/es.number.is-safe-integer":"../../../node_modules/core-js/modules/es.number.is-safe-integer.js","../modules/es.number.max-safe-integer":"../../../node_modules/core-js/modules/es.number.max-safe-integer.js","../modules/es.number.min-safe-integer":"../../../node_modules/core-js/modules/es.number.min-safe-integer.js","../modules/es.number.parse-float":"../../../node_modules/core-js/modules/es.number.parse-float.js","../modules/es.number.parse-int":"../../../node_modules/core-js/modules/es.number.parse-int.js","../modules/es.number.to-fixed":"../../../node_modules/core-js/modules/es.number.to-fixed.js","../modules/es.number.to-precision":"../../../node_modules/core-js/modules/es.number.to-precision.js","../modules/es.math.acosh":"../../../node_modules/core-js/modules/es.math.acosh.js","../modules/es.math.asinh":"../../../node_modules/core-js/modules/es.math.asinh.js","../modules/es.math.atanh":"../../../node_modules/core-js/modules/es.math.atanh.js","../modules/es.math.cbrt":"../../../node_modules/core-js/modules/es.math.cbrt.js","../modules/es.math.clz32":"../../../node_modules/core-js/modules/es.math.clz32.js","../modules/es.math.cosh":"../../../node_modules/core-js/modules/es.math.cosh.js","../modules/es.math.expm1":"../../../node_modules/core-js/modules/es.math.expm1.js","../modules/es.math.fround":"../../../node_modules/core-js/modules/es.math.fround.js","../modules/es.math.hypot":"../../../node_modules/core-js/modules/es.math.hypot.js","../modules/es.math.imul":"../../../node_modules/core-js/modules/es.math.imul.js","../modules/es.math.log10":"../../../node_modules/core-js/modules/es.math.log10.js","../modules/es.math.log1p":"../../../node_modules/core-js/modules/es.math.log1p.js","../modules/es.math.log2":"../../../node_modules/core-js/modules/es.math.log2.js","../modules/es.math.sign":"../../../node_modules/core-js/modules/es.math.sign.js","../modules/es.math.sinh":"../../../node_modules/core-js/modules/es.math.sinh.js","../modules/es.math.tanh":"../../../node_modules/core-js/modules/es.math.tanh.js","../modules/es.math.to-string-tag":"../../../node_modules/core-js/modules/es.math.to-string-tag.js","../modules/es.math.trunc":"../../../node_modules/core-js/modules/es.math.trunc.js","../modules/es.date.now":"../../../node_modules/core-js/modules/es.date.now.js","../modules/es.date.to-json":"../../../node_modules/core-js/modules/es.date.to-json.js","../modules/es.date.to-iso-string":"../../../node_modules/core-js/modules/es.date.to-iso-string.js","../modules/es.date.to-string":"../../../node_modules/core-js/modules/es.date.to-string.js","../modules/es.date.to-primitive":"../../../node_modules/core-js/modules/es.date.to-primitive.js","../modules/es.json.to-string-tag":"../../../node_modules/core-js/modules/es.json.to-string-tag.js","../modules/es.promise":"../../../node_modules/core-js/modules/es.promise.js","../modules/es.promise.finally":"../../../node_modules/core-js/modules/es.promise.finally.js","../modules/es.map":"../../../node_modules/core-js/modules/es.map.js","../modules/es.set":"../../../node_modules/core-js/modules/es.set.js","../modules/es.weak-map":"../../../node_modules/core-js/modules/es.weak-map.js","../modules/es.weak-set":"../../../node_modules/core-js/modules/es.weak-set.js","../modules/es.array-buffer.constructor":"../../../node_modules/core-js/modules/es.array-buffer.constructor.js","../modules/es.array-buffer.is-view":"../../../node_modules/core-js/modules/es.array-buffer.is-view.js","../modules/es.array-buffer.slice":"../../../node_modules/core-js/modules/es.array-buffer.slice.js","../modules/es.data-view":"../../../node_modules/core-js/modules/es.data-view.js","../modules/es.typed-array.int8-array":"../../../node_modules/core-js/modules/es.typed-array.int8-array.js","../modules/es.typed-array.uint8-array":"../../../node_modules/core-js/modules/es.typed-array.uint8-array.js","../modules/es.typed-array.uint8-clamped-array":"../../../node_modules/core-js/modules/es.typed-array.uint8-clamped-array.js","../modules/es.typed-array.int16-array":"../../../node_modules/core-js/modules/es.typed-array.int16-array.js","../modules/es.typed-array.uint16-array":"../../../node_modules/core-js/modules/es.typed-array.uint16-array.js","../modules/es.typed-array.int32-array":"../../../node_modules/core-js/modules/es.typed-array.int32-array.js","../modules/es.typed-array.uint32-array":"../../../node_modules/core-js/modules/es.typed-array.uint32-array.js","../modules/es.typed-array.float32-array":"../../../node_modules/core-js/modules/es.typed-array.float32-array.js","../modules/es.typed-array.float64-array":"../../../node_modules/core-js/modules/es.typed-array.float64-array.js","../modules/es.typed-array.from":"../../../node_modules/core-js/modules/es.typed-array.from.js","../modules/es.typed-array.of":"../../../node_modules/core-js/modules/es.typed-array.of.js","../modules/es.typed-array.copy-within":"../../../node_modules/core-js/modules/es.typed-array.copy-within.js","../modules/es.typed-array.every":"../../../node_modules/core-js/modules/es.typed-array.every.js","../modules/es.typed-array.fill":"../../../node_modules/core-js/modules/es.typed-array.fill.js","../modules/es.typed-array.filter":"../../../node_modules/core-js/modules/es.typed-array.filter.js","../modules/es.typed-array.find":"../../../node_modules/core-js/modules/es.typed-array.find.js","../modules/es.typed-array.find-index":"../../../node_modules/core-js/modules/es.typed-array.find-index.js","../modules/es.typed-array.for-each":"../../../node_modules/core-js/modules/es.typed-array.for-each.js","../modules/es.typed-array.includes":"../../../node_modules/core-js/modules/es.typed-array.includes.js","../modules/es.typed-array.index-of":"../../../node_modules/core-js/modules/es.typed-array.index-of.js","../modules/es.typed-array.iterator":"../../../node_modules/core-js/modules/es.typed-array.iterator.js","../modules/es.typed-array.join":"../../../node_modules/core-js/modules/es.typed-array.join.js","../modules/es.typed-array.last-index-of":"../../../node_modules/core-js/modules/es.typed-array.last-index-of.js","../modules/es.typed-array.map":"../../../node_modules/core-js/modules/es.typed-array.map.js","../modules/es.typed-array.reduce":"../../../node_modules/core-js/modules/es.typed-array.reduce.js","../modules/es.typed-array.reduce-right":"../../../node_modules/core-js/modules/es.typed-array.reduce-right.js","../modules/es.typed-array.reverse":"../../../node_modules/core-js/modules/es.typed-array.reverse.js","../modules/es.typed-array.set":"../../../node_modules/core-js/modules/es.typed-array.set.js","../modules/es.typed-array.slice":"../../../node_modules/core-js/modules/es.typed-array.slice.js","../modules/es.typed-array.some":"../../../node_modules/core-js/modules/es.typed-array.some.js","../modules/es.typed-array.sort":"../../../node_modules/core-js/modules/es.typed-array.sort.js","../modules/es.typed-array.subarray":"../../../node_modules/core-js/modules/es.typed-array.subarray.js","../modules/es.typed-array.to-locale-string":"../../../node_modules/core-js/modules/es.typed-array.to-locale-string.js","../modules/es.typed-array.to-string":"../../../node_modules/core-js/modules/es.typed-array.to-string.js","../modules/es.reflect.apply":"../../../node_modules/core-js/modules/es.reflect.apply.js","../modules/es.reflect.construct":"../../../node_modules/core-js/modules/es.reflect.construct.js","../modules/es.reflect.define-property":"../../../node_modules/core-js/modules/es.reflect.define-property.js","../modules/es.reflect.delete-property":"../../../node_modules/core-js/modules/es.reflect.delete-property.js","../modules/es.reflect.get":"../../../node_modules/core-js/modules/es.reflect.get.js","../modules/es.reflect.get-own-property-descriptor":"../../../node_modules/core-js/modules/es.reflect.get-own-property-descriptor.js","../modules/es.reflect.get-prototype-of":"../../../node_modules/core-js/modules/es.reflect.get-prototype-of.js","../modules/es.reflect.has":"../../../node_modules/core-js/modules/es.reflect.has.js","../modules/es.reflect.is-extensible":"../../../node_modules/core-js/modules/es.reflect.is-extensible.js","../modules/es.reflect.own-keys":"../../../node_modules/core-js/modules/es.reflect.own-keys.js","../modules/es.reflect.prevent-extensions":"../../../node_modules/core-js/modules/es.reflect.prevent-extensions.js","../modules/es.reflect.set":"../../../node_modules/core-js/modules/es.reflect.set.js","../modules/es.reflect.set-prototype-of":"../../../node_modules/core-js/modules/es.reflect.set-prototype-of.js","../internals/path":"../../../node_modules/core-js/internals/path.js"}],"../../../node_modules/core-js/internals/dom-iterables.js":[function(require,module,exports) {
// iterable DOM collections
// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
module.exports = {
  CSSRuleList: 0,
  CSSStyleDeclaration: 0,
  CSSValueList: 0,
  ClientRectList: 0,
  DOMRectList: 0,
  DOMStringList: 0,
  DOMTokenList: 1,
  DataTransferItemList: 0,
  FileList: 0,
  HTMLAllCollection: 0,
  HTMLCollection: 0,
  HTMLFormElement: 0,
  HTMLSelectElement: 0,
  MediaList: 0,
  MimeTypeArray: 0,
  NamedNodeMap: 0,
  NodeList: 1,
  PaintRequestList: 0,
  Plugin: 0,
  PluginArray: 0,
  SVGLengthList: 0,
  SVGNumberList: 0,
  SVGPathSegList: 0,
  SVGPointList: 0,
  SVGStringList: 0,
  SVGTransformList: 0,
  SourceBufferList: 0,
  StyleSheetList: 0,
  TextTrackCueList: 0,
  TextTrackList: 0,
  TouchList: 0
};

},{}],"../../../node_modules/core-js/modules/web.dom-collections.for-each.js":[function(require,module,exports) {

var global = require('../internals/global');
var DOMIterables = require('../internals/dom-iterables');
var forEach = require('../internals/array-for-each');
var hide = require('../internals/hide');

for (var COLLECTION_NAME in DOMIterables) {
  var Collection = global[COLLECTION_NAME];
  var CollectionPrototype = Collection && Collection.prototype;
  // some Chrome versions have non-configurable methods on DOMTokenList
  if (CollectionPrototype && CollectionPrototype.forEach !== forEach) try {
    hide(CollectionPrototype, 'forEach', forEach);
  } catch (error) {
    CollectionPrototype.forEach = forEach;
  }
}

},{"../internals/global":"../../../node_modules/core-js/internals/global.js","../internals/dom-iterables":"../../../node_modules/core-js/internals/dom-iterables.js","../internals/array-for-each":"../../../node_modules/core-js/internals/array-for-each.js","../internals/hide":"../../../node_modules/core-js/internals/hide.js"}],"../../../node_modules/core-js/modules/web.dom-collections.iterator.js":[function(require,module,exports) {

var global = require('../internals/global');
var DOMIterables = require('../internals/dom-iterables');
var ArrayIteratorMethods = require('../modules/es.array.iterator');
var hide = require('../internals/hide');
var wellKnownSymbol = require('../internals/well-known-symbol');

var ITERATOR = wellKnownSymbol('iterator');
var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var ArrayValues = ArrayIteratorMethods.values;

for (var COLLECTION_NAME in DOMIterables) {
  var Collection = global[COLLECTION_NAME];
  var CollectionPrototype = Collection && Collection.prototype;
  if (CollectionPrototype) {
    // some Chrome versions have non-configurable methods on DOMTokenList
    if (CollectionPrototype[ITERATOR] !== ArrayValues) try {
      hide(CollectionPrototype, ITERATOR, ArrayValues);
    } catch (error) {
      CollectionPrototype[ITERATOR] = ArrayValues;
    }
    if (!CollectionPrototype[TO_STRING_TAG]) hide(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);
    if (DOMIterables[COLLECTION_NAME]) for (var METHOD_NAME in ArrayIteratorMethods) {
      // some Chrome versions have non-configurable methods on DOMTokenList
      if (CollectionPrototype[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME]) try {
        hide(CollectionPrototype, METHOD_NAME, ArrayIteratorMethods[METHOD_NAME]);
      } catch (error) {
        CollectionPrototype[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];
      }
    }
  }
}

},{"../internals/global":"../../../node_modules/core-js/internals/global.js","../internals/dom-iterables":"../../../node_modules/core-js/internals/dom-iterables.js","../modules/es.array.iterator":"../../../node_modules/core-js/modules/es.array.iterator.js","../internals/hide":"../../../node_modules/core-js/internals/hide.js","../internals/well-known-symbol":"../../../node_modules/core-js/internals/well-known-symbol.js"}],"../../../node_modules/core-js/modules/web.immediate.js":[function(require,module,exports) {

var global = require('../internals/global');
var task = require('../internals/task');

var FORCED = !global.setImmediate || !global.clearImmediate;

// http://w3c.github.io/setImmediate/
require('../internals/export')({ global: true, bind: true, enumerable: true, forced: FORCED }, {
  // `setImmediate` method
  // http://w3c.github.io/setImmediate/#si-setImmediate
  setImmediate: task.set,
  // `clearImmediate` method
  // http://w3c.github.io/setImmediate/#si-clearImmediate
  clearImmediate: task.clear
});

},{"../internals/global":"../../../node_modules/core-js/internals/global.js","../internals/task":"../../../node_modules/core-js/internals/task.js","../internals/export":"../../../node_modules/core-js/internals/export.js"}],"../../../node_modules/core-js/modules/web.queue-microtask.js":[function(require,module,exports) {


var $ = require('../internals/export');
var global = require('../internals/global');
var microtask = require('../internals/microtask');
var classof = require('../internals/classof-raw');

var process = global.process;
var isNode = classof(process) == 'process';

// `queueMicrotask` method
// https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-queuemicrotask
$({ global: true, enumerable: true, noTargetGet: true }, {
  queueMicrotask: function queueMicrotask(fn) {
    var domain = isNode && process.domain;
    microtask(domain ? domain.bind(fn) : fn);
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/global":"../../../node_modules/core-js/internals/global.js","../internals/microtask":"../../../node_modules/core-js/internals/microtask.js","../internals/classof-raw":"../../../node_modules/core-js/internals/classof-raw.js"}],"../../../node_modules/core-js/modules/web.timers.js":[function(require,module,exports) {

var $ = require('../internals/export');
var global = require('../internals/global');
var userAgent = require('../internals/user-agent');

var slice = [].slice;
var MSIE = /MSIE .\./.test(userAgent); // <- dirty ie9- check

var wrap = function (scheduler) {
  return function (handler, timeout /* , ...arguments */) {
    var boundArgs = arguments.length > 2;
    var args = boundArgs ? slice.call(arguments, 2) : undefined;
    return scheduler(boundArgs ? function () {
      // eslint-disable-next-line no-new-func
      (typeof handler == 'function' ? handler : Function(handler)).apply(this, args);
    } : handler, timeout);
  };
};

// ie9- setTimeout & setInterval additional parameters fix
// https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#timers
$({ global: true, bind: true, forced: MSIE }, {
  // `setTimeout` method
  // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout
  setTimeout: wrap(global.setTimeout),
  // `setInterval` method
  // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-setinterval
  setInterval: wrap(global.setInterval)
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/global":"../../../node_modules/core-js/internals/global.js","../internals/user-agent":"../../../node_modules/core-js/internals/user-agent.js"}],"../../../node_modules/core-js/internals/native-url.js":[function(require,module,exports) {
var fails = require('../internals/fails');
var wellKnownSymbol = require('../internals/well-known-symbol');
var IS_PURE = require('../internals/is-pure');

var ITERATOR = wellKnownSymbol('iterator');

module.exports = !fails(function () {
  var url = new URL('b?e=1', 'http://a');
  var searchParams = url.searchParams;
  url.pathname = 'c%20d';
  return (IS_PURE && !url.toJSON)
    || !searchParams.sort
    || url.href !== 'http://a/c%20d?e=1'
    || searchParams.get('e') !== '1'
    || String(new URLSearchParams('?a=1')) !== 'a=1'
    || !searchParams[ITERATOR]
    // throws in Edge
    || new URL('https://a@b').username !== 'a'
    || new URLSearchParams(new URLSearchParams('a=b')).get('a') !== 'b'
    // not punycoded in Edge
    || new URL('http://тест').host !== 'xn--e1aybc'
    // not escaped in Chrome 62-
    || new URL('http://a#б').hash !== '#%D0%B1';
});

},{"../internals/fails":"../../../node_modules/core-js/internals/fails.js","../internals/well-known-symbol":"../../../node_modules/core-js/internals/well-known-symbol.js","../internals/is-pure":"../../../node_modules/core-js/internals/is-pure.js"}],"../../../node_modules/core-js/internals/punycode-to-ascii.js":[function(require,module,exports) {
'use strict';
// based on https://github.com/bestiejs/punycode.js/blob/master/punycode.js
var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1
var base = 36;
var tMin = 1;
var tMax = 26;
var skew = 38;
var damp = 700;
var initialBias = 72;
var initialN = 128; // 0x80
var delimiter = '-'; // '\x2D'
var regexNonASCII = /[^\0-\u007E]/; // non-ASCII chars
var regexSeparators = /[.\u3002\uFF0E\uFF61]/g; // RFC 3490 separators
var OVERFLOW_ERROR = 'Overflow: input needs wider integers to process';
var baseMinusTMin = base - tMin;
var floor = Math.floor;
var stringFromCharCode = String.fromCharCode;

/**
 * Creates an array containing the numeric code points of each Unicode
 * character in the string. While JavaScript uses UCS-2 internally,
 * this function will convert a pair of surrogate halves (each of which
 * UCS-2 exposes as separate characters) into a single code point,
 * matching UTF-16.
 */
var ucs2decode = function (string) {
  var output = [];
  var counter = 0;
  var length = string.length;
  while (counter < length) {
    var value = string.charCodeAt(counter++);
    if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
      // It's a high surrogate, and there is a next character.
      var extra = string.charCodeAt(counter++);
      if ((extra & 0xFC00) == 0xDC00) { // Low surrogate.
        output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
      } else {
        // It's an unmatched surrogate; only append this code unit, in case the
        // next code unit is the high surrogate of a surrogate pair.
        output.push(value);
        counter--;
      }
    } else {
      output.push(value);
    }
  }
  return output;
};

/**
 * Converts a digit/integer into a basic code point.
 */
var digitToBasic = function (digit) {
  //  0..25 map to ASCII a..z or A..Z
  // 26..35 map to ASCII 0..9
  return digit + 22 + 75 * (digit < 26);
};

/**
 * Bias adaptation function as per section 3.4 of RFC 3492.
 * https://tools.ietf.org/html/rfc3492#section-3.4
 */
var adapt = function (delta, numPoints, firstTime) {
  var k = 0;
  delta = firstTime ? floor(delta / damp) : delta >> 1;
  delta += floor(delta / numPoints);
  for (; delta > baseMinusTMin * tMax >> 1; k += base) {
    delta = floor(delta / baseMinusTMin);
  }
  return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
};

/**
 * Converts a string of Unicode symbols (e.g. a domain name label) to a
 * Punycode string of ASCII-only symbols.
 */
// eslint-disable-next-line  max-statements
var encode = function (input) {
  var output = [];

  // Convert the input in UCS-2 to an array of Unicode code points.
  input = ucs2decode(input);

  // Cache the length.
  var inputLength = input.length;

  // Initialize the state.
  var n = initialN;
  var delta = 0;
  var bias = initialBias;
  var i, currentValue;

  // Handle the basic code points.
  for (i = 0; i < input.length; i++) {
    currentValue = input[i];
    if (currentValue < 0x80) {
      output.push(stringFromCharCode(currentValue));
    }
  }

  var basicLength = output.length; // number of basic code points.
  var handledCPCount = basicLength; // number of code points that have been handled;

  // Finish the basic string with a delimiter unless it's empty.
  if (basicLength) {
    output.push(delimiter);
  }

  // Main encoding loop:
  while (handledCPCount < inputLength) {
    // All non-basic code points < n have been handled already. Find the next larger one:
    var m = maxInt;
    for (i = 0; i < input.length; i++) {
      currentValue = input[i];
      if (currentValue >= n && currentValue < m) {
        m = currentValue;
      }
    }

    // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>, but guard against overflow.
    var handledCPCountPlusOne = handledCPCount + 1;
    if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
      throw RangeError(OVERFLOW_ERROR);
    }

    delta += (m - n) * handledCPCountPlusOne;
    n = m;

    for (i = 0; i < input.length; i++) {
      currentValue = input[i];
      if (currentValue < n && ++delta > maxInt) {
        throw RangeError(OVERFLOW_ERROR);
      }
      if (currentValue == n) {
        // Represent delta as a generalized variable-length integer.
        var q = delta;
        for (var k = base; /* no condition */; k += base) {
          var t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
          if (q < t) break;
          var qMinusT = q - t;
          var baseMinusT = base - t;
          output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT)));
          q = floor(qMinusT / baseMinusT);
        }

        output.push(stringFromCharCode(digitToBasic(q)));
        bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
        delta = 0;
        ++handledCPCount;
      }
    }

    ++delta;
    ++n;
  }
  return output.join('');
};

module.exports = function (input) {
  var encoded = [];
  var labels = input.toLowerCase().replace(regexSeparators, '\u002E').split('.');
  var i, label;
  for (i = 0; i < labels.length; i++) {
    label = labels[i];
    encoded.push(regexNonASCII.test(label) ? 'xn--' + encode(label) : label);
  }
  return encoded.join('.');
};

},{}],"../../../node_modules/core-js/internals/get-iterator.js":[function(require,module,exports) {
var anObject = require('../internals/an-object');
var getIteratorMethod = require('../internals/get-iterator-method');

module.exports = function (it) {
  var iteratorMethod = getIteratorMethod(it);
  if (typeof iteratorMethod != 'function') {
    throw TypeError(String(it) + ' is not iterable');
  } return anObject(iteratorMethod.call(it));
};

},{"../internals/an-object":"../../../node_modules/core-js/internals/an-object.js","../internals/get-iterator-method":"../../../node_modules/core-js/internals/get-iterator-method.js"}],"../../../node_modules/core-js/modules/web.url-search-params.js":[function(require,module,exports) {
'use strict';
// TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`
require('../modules/es.array.iterator');
var $ = require('../internals/export');
var USE_NATIVE_URL = require('../internals/native-url');
var redefine = require('../internals/redefine');
var redefineAll = require('../internals/redefine-all');
var setToStringTag = require('../internals/set-to-string-tag');
var createIteratorConstructor = require('../internals/create-iterator-constructor');
var InternalStateModule = require('../internals/internal-state');
var anInstance = require('../internals/an-instance');
var hasOwn = require('../internals/has');
var bind = require('../internals/bind-context');
var anObject = require('../internals/an-object');
var isObject = require('../internals/is-object');
var getIterator = require('../internals/get-iterator');
var getIteratorMethod = require('../internals/get-iterator-method');
var wellKnownSymbol = require('../internals/well-known-symbol');

var ITERATOR = wellKnownSymbol('iterator');
var URL_SEARCH_PARAMS = 'URLSearchParams';
var URL_SEARCH_PARAMS_ITERATOR = URL_SEARCH_PARAMS + 'Iterator';
var setInternalState = InternalStateModule.set;
var getInternalParamsState = InternalStateModule.getterFor(URL_SEARCH_PARAMS);
var getInternalIteratorState = InternalStateModule.getterFor(URL_SEARCH_PARAMS_ITERATOR);

var plus = /\+/g;
var sequences = Array(4);

var percentSequence = function (bytes) {
  return sequences[bytes - 1] || (sequences[bytes - 1] = RegExp('((?:%[\\da-f]{2}){' + bytes + '})', 'gi'));
};

var percentDecode = function (sequence) {
  try {
    return decodeURIComponent(sequence);
  } catch (error) {
    return sequence;
  }
};

var deserialize = function (it) {
  var result = it.replace(plus, ' ');
  var bytes = 4;
  try {
    return decodeURIComponent(result);
  } catch (error) {
    while (bytes) {
      result = result.replace(percentSequence(bytes--), percentDecode);
    }
    return result;
  }
};

var find = /[!'()~]|%20/g;

var replace = {
  '!': '%21',
  "'": '%27',
  '(': '%28',
  ')': '%29',
  '~': '%7E',
  '%20': '+'
};

var replacer = function (match) {
  return replace[match];
};

var serialize = function (it) {
  return encodeURIComponent(it).replace(find, replacer);
};

var parseSearchParams = function (result, query) {
  if (query) {
    var attributes = query.split('&');
    var index = 0;
    var attribute, entry;
    while (index < attributes.length) {
      attribute = attributes[index++];
      if (attribute.length) {
        entry = attribute.split('=');
        result.push({
          key: deserialize(entry.shift()),
          value: deserialize(entry.join('='))
        });
      }
    }
  }
};

var updateSearchParams = function (query) {
  this.entries.length = 0;
  parseSearchParams(this.entries, query);
};

var validateArgumentsLength = function (passed, required) {
  if (passed < required) throw TypeError('Not enough arguments');
};

var URLSearchParamsIterator = createIteratorConstructor(function Iterator(params, kind) {
  setInternalState(this, {
    type: URL_SEARCH_PARAMS_ITERATOR,
    iterator: getIterator(getInternalParamsState(params).entries),
    kind: kind
  });
}, 'Iterator', function next() {
  var state = getInternalIteratorState(this);
  var kind = state.kind;
  var step = state.iterator.next();
  var entry = step.value;
  if (!step.done) {
    step.value = kind === 'keys' ? entry.key : kind === 'values' ? entry.value : [entry.key, entry.value];
  } return step;
});

// `URLSearchParams` constructor
// https://url.spec.whatwg.org/#interface-urlsearchparams
var URLSearchParamsConstructor = function URLSearchParams(/* init */) {
  anInstance(this, URLSearchParamsConstructor, URL_SEARCH_PARAMS);
  var init = arguments.length > 0 ? arguments[0] : undefined;
  var that = this;
  var entries = [];
  var iteratorMethod, iterator, step, entryIterator, first, second, key;

  setInternalState(that, {
    type: URL_SEARCH_PARAMS,
    entries: entries,
    updateURL: function () { /* empty */ },
    updateSearchParams: updateSearchParams
  });

  if (init !== undefined) {
    if (isObject(init)) {
      iteratorMethod = getIteratorMethod(init);
      if (typeof iteratorMethod === 'function') {
        iterator = iteratorMethod.call(init);
        while (!(step = iterator.next()).done) {
          entryIterator = getIterator(anObject(step.value));
          if (
            (first = entryIterator.next()).done ||
            (second = entryIterator.next()).done ||
            !entryIterator.next().done
          ) throw TypeError('Expected sequence with length 2');
          entries.push({ key: first.value + '', value: second.value + '' });
        }
      } else for (key in init) if (hasOwn(init, key)) entries.push({ key: key, value: init[key] + '' });
    } else {
      parseSearchParams(entries, typeof init === 'string' ? init.charAt(0) === '?' ? init.slice(1) : init : init + '');
    }
  }
};

var URLSearchParamsPrototype = URLSearchParamsConstructor.prototype;

redefineAll(URLSearchParamsPrototype, {
  // `URLSearchParams.prototype.appent` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-append
  append: function append(name, value) {
    validateArgumentsLength(arguments.length, 2);
    var state = getInternalParamsState(this);
    state.entries.push({ key: name + '', value: value + '' });
    state.updateURL();
  },
  // `URLSearchParams.prototype.delete` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-delete
  'delete': function (name) {
    validateArgumentsLength(arguments.length, 1);
    var state = getInternalParamsState(this);
    var entries = state.entries;
    var key = name + '';
    var index = 0;
    while (index < entries.length) {
      if (entries[index].key === key) entries.splice(index, 1);
      else index++;
    }
    state.updateURL();
  },
  // `URLSearchParams.prototype.get` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-get
  get: function get(name) {
    validateArgumentsLength(arguments.length, 1);
    var entries = getInternalParamsState(this).entries;
    var key = name + '';
    var index = 0;
    for (; index < entries.length; index++) {
      if (entries[index].key === key) return entries[index].value;
    }
    return null;
  },
  // `URLSearchParams.prototype.getAll` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-getall
  getAll: function getAll(name) {
    validateArgumentsLength(arguments.length, 1);
    var entries = getInternalParamsState(this).entries;
    var key = name + '';
    var result = [];
    var index = 0;
    for (; index < entries.length; index++) {
      if (entries[index].key === key) result.push(entries[index].value);
    }
    return result;
  },
  // `URLSearchParams.prototype.has` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-has
  has: function has(name) {
    validateArgumentsLength(arguments.length, 1);
    var entries = getInternalParamsState(this).entries;
    var key = name + '';
    var index = 0;
    while (index < entries.length) {
      if (entries[index++].key === key) return true;
    }
    return false;
  },
  // `URLSearchParams.prototype.set` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-set
  set: function set(name, value) {
    validateArgumentsLength(arguments.length, 1);
    var state = getInternalParamsState(this);
    var entries = state.entries;
    var found = false;
    var key = name + '';
    var val = value + '';
    var index = 0;
    var entry;
    for (; index < entries.length; index++) {
      entry = entries[index];
      if (entry.key === key) {
        if (found) entries.splice(index--, 1);
        else {
          found = true;
          entry.value = val;
        }
      }
    }
    if (!found) entries.push({ key: key, value: val });
    state.updateURL();
  },
  // `URLSearchParams.prototype.sort` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-sort
  sort: function sort() {
    var state = getInternalParamsState(this);
    var entries = state.entries;
    // Array#sort is not stable in some engines
    var slice = entries.slice();
    var entry, entriesIndex, sliceIndex;
    entries.length = 0;
    for (sliceIndex = 0; sliceIndex < slice.length; sliceIndex++) {
      entry = slice[sliceIndex];
      for (entriesIndex = 0; entriesIndex < sliceIndex; entriesIndex++) {
        if (entries[entriesIndex].key > entry.key) {
          entries.splice(entriesIndex, 0, entry);
          break;
        }
      }
      if (entriesIndex === sliceIndex) entries.push(entry);
    }
    state.updateURL();
  },
  // `URLSearchParams.prototype.forEach` method
  forEach: function forEach(callback /* , thisArg */) {
    var entries = getInternalParamsState(this).entries;
    var boundFunction = bind(callback, arguments.length > 1 ? arguments[1] : undefined, 3);
    var index = 0;
    var entry;
    while (index < entries.length) {
      entry = entries[index++];
      boundFunction(entry.value, entry.key, this);
    }
  },
  // `URLSearchParams.prototype.keys` method
  keys: function keys() {
    return new URLSearchParamsIterator(this, 'keys');
  },
  // `URLSearchParams.prototype.values` method
  values: function values() {
    return new URLSearchParamsIterator(this, 'values');
  },
  // `URLSearchParams.prototype.entries` method
  entries: function entries() {
    return new URLSearchParamsIterator(this, 'entries');
  }
}, { enumerable: true });

// `URLSearchParams.prototype[@@iterator]` method
redefine(URLSearchParamsPrototype, ITERATOR, URLSearchParamsPrototype.entries);

// `URLSearchParams.prototype.toString` method
// https://url.spec.whatwg.org/#urlsearchparams-stringification-behavior
redefine(URLSearchParamsPrototype, 'toString', function toString() {
  var entries = getInternalParamsState(this).entries;
  var result = [];
  var index = 0;
  var entry;
  while (index < entries.length) {
    entry = entries[index++];
    result.push(serialize(entry.key) + '=' + serialize(entry.value));
  } return result.join('&');
}, { enumerable: true });

setToStringTag(URLSearchParamsConstructor, URL_SEARCH_PARAMS);

$({ global: true, forced: !USE_NATIVE_URL }, {
  URLSearchParams: URLSearchParamsConstructor
});

module.exports = {
  URLSearchParams: URLSearchParamsConstructor,
  getState: getInternalParamsState
};

},{"../modules/es.array.iterator":"../../../node_modules/core-js/modules/es.array.iterator.js","../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/native-url":"../../../node_modules/core-js/internals/native-url.js","../internals/redefine":"../../../node_modules/core-js/internals/redefine.js","../internals/redefine-all":"../../../node_modules/core-js/internals/redefine-all.js","../internals/set-to-string-tag":"../../../node_modules/core-js/internals/set-to-string-tag.js","../internals/create-iterator-constructor":"../../../node_modules/core-js/internals/create-iterator-constructor.js","../internals/internal-state":"../../../node_modules/core-js/internals/internal-state.js","../internals/an-instance":"../../../node_modules/core-js/internals/an-instance.js","../internals/has":"../../../node_modules/core-js/internals/has.js","../internals/bind-context":"../../../node_modules/core-js/internals/bind-context.js","../internals/an-object":"../../../node_modules/core-js/internals/an-object.js","../internals/is-object":"../../../node_modules/core-js/internals/is-object.js","../internals/get-iterator":"../../../node_modules/core-js/internals/get-iterator.js","../internals/get-iterator-method":"../../../node_modules/core-js/internals/get-iterator-method.js","../internals/well-known-symbol":"../../../node_modules/core-js/internals/well-known-symbol.js"}],"../../../node_modules/core-js/modules/web.url.js":[function(require,module,exports) {

'use strict';
// TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`
require('../modules/es.string.iterator');
var $ = require('../internals/export');
var DESCRIPTORS = require('../internals/descriptors');
var USE_NATIVE_URL = require('../internals/native-url');
var global = require('../internals/global');
var defineProperties = require('../internals/object-define-properties');
var redefine = require('../internals/redefine');
var anInstance = require('../internals/an-instance');
var has = require('../internals/has');
var assign = require('../internals/object-assign');
var arrayFrom = require('../internals/array-from');
var codeAt = require('../internals/string-multibyte').codeAt;
var toASCII = require('../internals/punycode-to-ascii');
var setToStringTag = require('../internals/set-to-string-tag');
var URLSearchParamsModule = require('../modules/web.url-search-params');
var InternalStateModule = require('../internals/internal-state');

var NativeURL = global.URL;
var URLSearchParams = URLSearchParamsModule.URLSearchParams;
var getInternalSearchParamsState = URLSearchParamsModule.getState;
var setInternalState = InternalStateModule.set;
var getInternalURLState = InternalStateModule.getterFor('URL');
var floor = Math.floor;
var pow = Math.pow;

var INVALID_AUTHORITY = 'Invalid authority';
var INVALID_SCHEME = 'Invalid scheme';
var INVALID_HOST = 'Invalid host';
var INVALID_PORT = 'Invalid port';

var ALPHA = /[A-Za-z]/;
var ALPHANUMERIC = /[\d+\-.A-Za-z]/;
var DIGIT = /\d/;
var HEX_START = /^(0x|0X)/;
var OCT = /^[0-7]+$/;
var DEC = /^\d+$/;
var HEX = /^[\dA-Fa-f]+$/;
// eslint-disable-next-line no-control-regex
var FORBIDDEN_HOST_CODE_POINT = /[\u0000\u0009\u000A\u000D #%/:?@[\\]]/;
// eslint-disable-next-line no-control-regex
var FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT = /[\u0000\u0009\u000A\u000D #/:?@[\\]]/;
// eslint-disable-next-line no-control-regex
var LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE = /^[\u0000-\u001F ]+|[\u0000-\u001F ]+$/g;
// eslint-disable-next-line no-control-regex
var TAB_AND_NEW_LINE = /[\u0009\u000A\u000D]/g;
var EOF;

var parseHost = function (url, input) {
  var result, codePoints, index;
  if (input.charAt(0) == '[') {
    if (input.charAt(input.length - 1) != ']') return INVALID_HOST;
    result = parseIPv6(input.slice(1, -1));
    if (!result) return INVALID_HOST;
    url.host = result;
  // opaque host
  } else if (!isSpecial(url)) {
    if (FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT.test(input)) return INVALID_HOST;
    result = '';
    codePoints = arrayFrom(input);
    for (index = 0; index < codePoints.length; index++) {
      result += percentEncode(codePoints[index], C0ControlPercentEncodeSet);
    }
    url.host = result;
  } else {
    input = toASCII(input);
    if (FORBIDDEN_HOST_CODE_POINT.test(input)) return INVALID_HOST;
    result = parseIPv4(input);
    if (result === null) return INVALID_HOST;
    url.host = result;
  }
};

var parseIPv4 = function (input) {
  var parts = input.split('.');
  var partsLength, numbers, index, part, radix, number, ipv4;
  if (parts.length && parts[parts.length - 1] == '') {
    parts.pop();
  }
  partsLength = parts.length;
  if (partsLength > 4) return input;
  numbers = [];
  for (index = 0; index < partsLength; index++) {
    part = parts[index];
    if (part == '') return input;
    radix = 10;
    if (part.length > 1 && part.charAt(0) == '0') {
      radix = HEX_START.test(part) ? 16 : 8;
      part = part.slice(radix == 8 ? 1 : 2);
    }
    if (part === '') {
      number = 0;
    } else {
      if (!(radix == 10 ? DEC : radix == 8 ? OCT : HEX).test(part)) return input;
      number = parseInt(part, radix);
    }
    numbers.push(number);
  }
  for (index = 0; index < partsLength; index++) {
    number = numbers[index];
    if (index == partsLength - 1) {
      if (number >= pow(256, 5 - partsLength)) return null;
    } else if (number > 255) return null;
  }
  ipv4 = numbers.pop();
  for (index = 0; index < numbers.length; index++) {
    ipv4 += numbers[index] * pow(256, 3 - index);
  }
  return ipv4;
};

// eslint-disable-next-line max-statements
var parseIPv6 = function (input) {
  var address = [0, 0, 0, 0, 0, 0, 0, 0];
  var pieceIndex = 0;
  var compress = null;
  var pointer = 0;
  var value, length, numbersSeen, ipv4Piece, number, swaps, swap;

  var char = function () {
    return input.charAt(pointer);
  };

  if (char() == ':') {
    if (input.charAt(1) != ':') return;
    pointer += 2;
    pieceIndex++;
    compress = pieceIndex;
  }
  while (char()) {
    if (pieceIndex == 8) return;
    if (char() == ':') {
      if (compress !== null) return;
      pointer++;
      pieceIndex++;
      compress = pieceIndex;
      continue;
    }
    value = length = 0;
    while (length < 4 && HEX.test(char())) {
      value = value * 16 + parseInt(char(), 16);
      pointer++;
      length++;
    }
    if (char() == '.') {
      if (length == 0) return;
      pointer -= length;
      if (pieceIndex > 6) return;
      numbersSeen = 0;
      while (char()) {
        ipv4Piece = null;
        if (numbersSeen > 0) {
          if (char() == '.' && numbersSeen < 4) pointer++;
          else return;
        }
        if (!DIGIT.test(char())) return;
        while (DIGIT.test(char())) {
          number = parseInt(char(), 10);
          if (ipv4Piece === null) ipv4Piece = number;
          else if (ipv4Piece == 0) return;
          else ipv4Piece = ipv4Piece * 10 + number;
          if (ipv4Piece > 255) return;
          pointer++;
        }
        address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;
        numbersSeen++;
        if (numbersSeen == 2 || numbersSeen == 4) pieceIndex++;
      }
      if (numbersSeen != 4) return;
      break;
    } else if (char() == ':') {
      pointer++;
      if (!char()) return;
    } else if (char()) return;
    address[pieceIndex++] = value;
  }
  if (compress !== null) {
    swaps = pieceIndex - compress;
    pieceIndex = 7;
    while (pieceIndex != 0 && swaps > 0) {
      swap = address[pieceIndex];
      address[pieceIndex--] = address[compress + swaps - 1];
      address[compress + --swaps] = swap;
    }
  } else if (pieceIndex != 8) return;
  return address;
};

var findLongestZeroSequence = function (ipv6) {
  var maxIndex = null;
  var maxLength = 1;
  var currStart = null;
  var currLength = 0;
  var index = 0;
  for (; index < 8; index++) {
    if (ipv6[index] !== 0) {
      if (currLength > maxLength) {
        maxIndex = currStart;
        maxLength = currLength;
      }
      currStart = null;
      currLength = 0;
    } else {
      if (currStart === null) currStart = index;
      ++currLength;
    }
  }
  if (currLength > maxLength) {
    maxIndex = currStart;
    maxLength = currLength;
  }
  return maxIndex;
};

var serializeHost = function (host) {
  var result, index, compress, ignore0;
  // ipv4
  if (typeof host == 'number') {
    result = [];
    for (index = 0; index < 4; index++) {
      result.unshift(host % 256);
      host = floor(host / 256);
    } return result.join('.');
  // ipv6
  } else if (typeof host == 'object') {
    result = '';
    compress = findLongestZeroSequence(host);
    for (index = 0; index < 8; index++) {
      if (ignore0 && host[index] === 0) continue;
      if (ignore0) ignore0 = false;
      if (compress === index) {
        result += index ? ':' : '::';
        ignore0 = true;
      } else {
        result += host[index].toString(16);
        if (index < 7) result += ':';
      }
    }
    return '[' + result + ']';
  } return host;
};

var C0ControlPercentEncodeSet = {};
var fragmentPercentEncodeSet = assign({}, C0ControlPercentEncodeSet, {
  ' ': 1, '"': 1, '<': 1, '>': 1, '`': 1
});
var pathPercentEncodeSet = assign({}, fragmentPercentEncodeSet, {
  '#': 1, '?': 1, '{': 1, '}': 1
});
var userinfoPercentEncodeSet = assign({}, pathPercentEncodeSet, {
  '/': 1, ':': 1, ';': 1, '=': 1, '@': 1, '[': 1, '\\': 1, ']': 1, '^': 1, '|': 1
});

var percentEncode = function (char, set) {
  var code = codeAt(char, 0);
  return code > 0x20 && code < 0x7F && !has(set, char) ? char : encodeURIComponent(char);
};

var specialSchemes = {
  ftp: 21,
  file: null,
  gopher: 70,
  http: 80,
  https: 443,
  ws: 80,
  wss: 443
};

var isSpecial = function (url) {
  return has(specialSchemes, url.scheme);
};

var includesCredentials = function (url) {
  return url.username != '' || url.password != '';
};

var cannotHaveUsernamePasswordPort = function (url) {
  return !url.host || url.cannotBeABaseURL || url.scheme == 'file';
};

var isWindowsDriveLetter = function (string, normalized) {
  var second;
  return string.length == 2 && ALPHA.test(string.charAt(0))
    && ((second = string.charAt(1)) == ':' || (!normalized && second == '|'));
};

var startsWithWindowsDriveLetter = function (string) {
  var third;
  return string.length > 1 && isWindowsDriveLetter(string.slice(0, 2)) && (
    string.length == 2 ||
    ((third = string.charAt(2)) === '/' || third === '\\' || third === '?' || third === '#')
  );
};

var shortenURLsPath = function (url) {
  var path = url.path;
  var pathSize = path.length;
  if (pathSize && (url.scheme != 'file' || pathSize != 1 || !isWindowsDriveLetter(path[0], true))) {
    path.pop();
  }
};

var isSingleDot = function (segment) {
  return segment === '.' || segment.toLowerCase() === '%2e';
};

var isDoubleDot = function (segment) {
  segment = segment.toLowerCase();
  return segment === '..' || segment === '%2e.' || segment === '.%2e' || segment === '%2e%2e';
};

// States:
var SCHEME_START = {};
var SCHEME = {};
var NO_SCHEME = {};
var SPECIAL_RELATIVE_OR_AUTHORITY = {};
var PATH_OR_AUTHORITY = {};
var RELATIVE = {};
var RELATIVE_SLASH = {};
var SPECIAL_AUTHORITY_SLASHES = {};
var SPECIAL_AUTHORITY_IGNORE_SLASHES = {};
var AUTHORITY = {};
var HOST = {};
var HOSTNAME = {};
var PORT = {};
var FILE = {};
var FILE_SLASH = {};
var FILE_HOST = {};
var PATH_START = {};
var PATH = {};
var CANNOT_BE_A_BASE_URL_PATH = {};
var QUERY = {};
var FRAGMENT = {};

// eslint-disable-next-line max-statements
var parseURL = function (url, input, stateOverride, base) {
  var state = stateOverride || SCHEME_START;
  var pointer = 0;
  var buffer = '';
  var seenAt = false;
  var seenBracket = false;
  var seenPasswordToken = false;
  var codePoints, char, bufferCodePoints, failure;

  if (!stateOverride) {
    url.scheme = '';
    url.username = '';
    url.password = '';
    url.host = null;
    url.port = null;
    url.path = [];
    url.query = null;
    url.fragment = null;
    url.cannotBeABaseURL = false;
    input = input.replace(LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE, '');
  }

  input = input.replace(TAB_AND_NEW_LINE, '');

  codePoints = arrayFrom(input);

  while (pointer <= codePoints.length) {
    char = codePoints[pointer];
    switch (state) {
      case SCHEME_START:
        if (char && ALPHA.test(char)) {
          buffer += char.toLowerCase();
          state = SCHEME;
        } else if (!stateOverride) {
          state = NO_SCHEME;
          continue;
        } else return INVALID_SCHEME;
        break;

      case SCHEME:
        if (char && (ALPHANUMERIC.test(char) || char == '+' || char == '-' || char == '.')) {
          buffer += char.toLowerCase();
        } else if (char == ':') {
          if (stateOverride && (
            (isSpecial(url) != has(specialSchemes, buffer)) ||
            (buffer == 'file' && (includesCredentials(url) || url.port !== null)) ||
            (url.scheme == 'file' && !url.host)
          )) return;
          url.scheme = buffer;
          if (stateOverride) {
            if (isSpecial(url) && specialSchemes[url.scheme] == url.port) url.port = null;
            return;
          }
          buffer = '';
          if (url.scheme == 'file') {
            state = FILE;
          } else if (isSpecial(url) && base && base.scheme == url.scheme) {
            state = SPECIAL_RELATIVE_OR_AUTHORITY;
          } else if (isSpecial(url)) {
            state = SPECIAL_AUTHORITY_SLASHES;
          } else if (codePoints[pointer + 1] == '/') {
            state = PATH_OR_AUTHORITY;
            pointer++;
          } else {
            url.cannotBeABaseURL = true;
            url.path.push('');
            state = CANNOT_BE_A_BASE_URL_PATH;
          }
        } else if (!stateOverride) {
          buffer = '';
          state = NO_SCHEME;
          pointer = 0;
          continue;
        } else return INVALID_SCHEME;
        break;

      case NO_SCHEME:
        if (!base || (base.cannotBeABaseURL && char != '#')) return INVALID_SCHEME;
        if (base.cannotBeABaseURL && char == '#') {
          url.scheme = base.scheme;
          url.path = base.path.slice();
          url.query = base.query;
          url.fragment = '';
          url.cannotBeABaseURL = true;
          state = FRAGMENT;
          break;
        }
        state = base.scheme == 'file' ? FILE : RELATIVE;
        continue;

      case SPECIAL_RELATIVE_OR_AUTHORITY:
        if (char == '/' && codePoints[pointer + 1] == '/') {
          state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
          pointer++;
        } else {
          state = RELATIVE;
          continue;
        } break;

      case PATH_OR_AUTHORITY:
        if (char == '/') {
          state = AUTHORITY;
          break;
        } else {
          state = PATH;
          continue;
        }

      case RELATIVE:
        url.scheme = base.scheme;
        if (char == EOF) {
          url.username = base.username;
          url.password = base.password;
          url.host = base.host;
          url.port = base.port;
          url.path = base.path.slice();
          url.query = base.query;
        } else if (char == '/' || (char == '\\' && isSpecial(url))) {
          state = RELATIVE_SLASH;
        } else if (char == '?') {
          url.username = base.username;
          url.password = base.password;
          url.host = base.host;
          url.port = base.port;
          url.path = base.path.slice();
          url.query = '';
          state = QUERY;
        } else if (char == '#') {
          url.username = base.username;
          url.password = base.password;
          url.host = base.host;
          url.port = base.port;
          url.path = base.path.slice();
          url.query = base.query;
          url.fragment = '';
          state = FRAGMENT;
        } else {
          url.username = base.username;
          url.password = base.password;
          url.host = base.host;
          url.port = base.port;
          url.path = base.path.slice();
          url.path.pop();
          state = PATH;
          continue;
        } break;

      case RELATIVE_SLASH:
        if (isSpecial(url) && (char == '/' || char == '\\')) {
          state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
        } else if (char == '/') {
          state = AUTHORITY;
        } else {
          url.username = base.username;
          url.password = base.password;
          url.host = base.host;
          url.port = base.port;
          state = PATH;
          continue;
        } break;

      case SPECIAL_AUTHORITY_SLASHES:
        state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
        if (char != '/' || buffer.charAt(pointer + 1) != '/') continue;
        pointer++;
        break;

      case SPECIAL_AUTHORITY_IGNORE_SLASHES:
        if (char != '/' && char != '\\') {
          state = AUTHORITY;
          continue;
        } break;

      case AUTHORITY:
        if (char == '@') {
          if (seenAt) buffer = '%40' + buffer;
          seenAt = true;
          bufferCodePoints = arrayFrom(buffer);
          for (var i = 0; i < bufferCodePoints.length; i++) {
            var codePoint = bufferCodePoints[i];
            if (codePoint == ':' && !seenPasswordToken) {
              seenPasswordToken = true;
              continue;
            }
            var encodedCodePoints = percentEncode(codePoint, userinfoPercentEncodeSet);
            if (seenPasswordToken) url.password += encodedCodePoints;
            else url.username += encodedCodePoints;
          }
          buffer = '';
        } else if (
          char == EOF || char == '/' || char == '?' || char == '#' ||
          (char == '\\' && isSpecial(url))
        ) {
          if (seenAt && buffer == '') return INVALID_AUTHORITY;
          pointer -= arrayFrom(buffer).length + 1;
          buffer = '';
          state = HOST;
        } else buffer += char;
        break;

      case HOST:
      case HOSTNAME:
        if (stateOverride && url.scheme == 'file') {
          state = FILE_HOST;
          continue;
        } else if (char == ':' && !seenBracket) {
          if (buffer == '') return INVALID_HOST;
          failure = parseHost(url, buffer);
          if (failure) return failure;
          buffer = '';
          state = PORT;
          if (stateOverride == HOSTNAME) return;
        } else if (
          char == EOF || char == '/' || char == '?' || char == '#' ||
          (char == '\\' && isSpecial(url))
        ) {
          if (isSpecial(url) && buffer == '') return INVALID_HOST;
          if (stateOverride && buffer == '' && (includesCredentials(url) || url.port !== null)) return;
          failure = parseHost(url, buffer);
          if (failure) return failure;
          buffer = '';
          state = PATH_START;
          if (stateOverride) return;
          continue;
        } else {
          if (char == '[') seenBracket = true;
          else if (char == ']') seenBracket = false;
          buffer += char;
        } break;

      case PORT:
        if (DIGIT.test(char)) {
          buffer += char;
        } else if (
          char == EOF || char == '/' || char == '?' || char == '#' ||
          (char == '\\' && isSpecial(url)) ||
          stateOverride
        ) {
          if (buffer != '') {
            var port = parseInt(buffer, 10);
            if (port > 0xFFFF) return INVALID_PORT;
            url.port = (isSpecial(url) && port === specialSchemes[url.scheme]) ? null : port;
            buffer = '';
          }
          if (stateOverride) return;
          state = PATH_START;
          continue;
        } else return INVALID_PORT;
        break;

      case FILE:
        url.scheme = 'file';
        if (char == '/' || char == '\\') state = FILE_SLASH;
        else if (base && base.scheme == 'file') {
          if (char == EOF) {
            url.host = base.host;
            url.path = base.path.slice();
            url.query = base.query;
          } else if (char == '?') {
            url.host = base.host;
            url.path = base.path.slice();
            url.query = '';
            state = QUERY;
          } else if (char == '#') {
            url.host = base.host;
            url.path = base.path.slice();
            url.query = base.query;
            url.fragment = '';
            state = FRAGMENT;
          } else {
            if (!startsWithWindowsDriveLetter(codePoints.slice(pointer).join(''))) {
              url.host = base.host;
              url.path = base.path.slice();
              shortenURLsPath(url);
            }
            state = PATH;
            continue;
          }
        } else {
          state = PATH;
          continue;
        } break;

      case FILE_SLASH:
        if (char == '/' || char == '\\') {
          state = FILE_HOST;
          break;
        }
        if (base && base.scheme == 'file' && !startsWithWindowsDriveLetter(codePoints.slice(pointer).join(''))) {
          if (isWindowsDriveLetter(base.path[0], true)) url.path.push(base.path[0]);
          else url.host = base.host;
        }
        state = PATH;
        continue;

      case FILE_HOST:
        if (char == EOF || char == '/' || char == '\\' || char == '?' || char == '#') {
          if (!stateOverride && isWindowsDriveLetter(buffer)) {
            state = PATH;
          } else if (buffer == '') {
            url.host = '';
            if (stateOverride) return;
            state = PATH_START;
          } else {
            failure = parseHost(url, buffer);
            if (failure) return failure;
            if (url.host == 'localhost') url.host = '';
            if (stateOverride) return;
            buffer = '';
            state = PATH_START;
          } continue;
        } else buffer += char;
        break;

      case PATH_START:
        if (isSpecial(url)) {
          state = PATH;
          if (char != '/' && char != '\\') continue;
        } else if (!stateOverride && char == '?') {
          url.query = '';
          state = QUERY;
        } else if (!stateOverride && char == '#') {
          url.fragment = '';
          state = FRAGMENT;
        } else if (char != EOF) {
          state = PATH;
          if (char != '/') continue;
        } break;

      case PATH:
        if (
          char == EOF || char == '/' ||
          (char == '\\' && isSpecial(url)) ||
          (!stateOverride && (char == '?' || char == '#'))
        ) {
          if (isDoubleDot(buffer)) {
            shortenURLsPath(url);
            if (char != '/' && !(char == '\\' && isSpecial(url))) {
              url.path.push('');
            }
          } else if (isSingleDot(buffer)) {
            if (char != '/' && !(char == '\\' && isSpecial(url))) {
              url.path.push('');
            }
          } else {
            if (url.scheme == 'file' && !url.path.length && isWindowsDriveLetter(buffer)) {
              if (url.host) url.host = '';
              buffer = buffer.charAt(0) + ':'; // normalize windows drive letter
            }
            url.path.push(buffer);
          }
          buffer = '';
          if (url.scheme == 'file' && (char == EOF || char == '?' || char == '#')) {
            while (url.path.length > 1 && url.path[0] === '') {
              url.path.shift();
            }
          }
          if (char == '?') {
            url.query = '';
            state = QUERY;
          } else if (char == '#') {
            url.fragment = '';
            state = FRAGMENT;
          }
        } else {
          buffer += percentEncode(char, pathPercentEncodeSet);
        } break;

      case CANNOT_BE_A_BASE_URL_PATH:
        if (char == '?') {
          url.query = '';
          state = QUERY;
        } else if (char == '#') {
          url.fragment = '';
          state = FRAGMENT;
        } else if (char != EOF) {
          url.path[0] += percentEncode(char, C0ControlPercentEncodeSet);
        } break;

      case QUERY:
        if (!stateOverride && char == '#') {
          url.fragment = '';
          state = FRAGMENT;
        } else if (char != EOF) {
          if (char == "'" && isSpecial(url)) url.query += '%27';
          else if (char == '#') url.query += '%23';
          else url.query += percentEncode(char, C0ControlPercentEncodeSet);
        } break;

      case FRAGMENT:
        if (char != EOF) url.fragment += percentEncode(char, fragmentPercentEncodeSet);
        break;
    }

    pointer++;
  }
};

// `URL` constructor
// https://url.spec.whatwg.org/#url-class
var URLConstructor = function URL(url /* , base */) {
  var that = anInstance(this, URLConstructor, 'URL');
  var base = arguments.length > 1 ? arguments[1] : undefined;
  var urlString = String(url);
  var state = setInternalState(that, { type: 'URL' });
  var baseState, failure;
  if (base !== undefined) {
    if (base instanceof URLConstructor) baseState = getInternalURLState(base);
    else {
      failure = parseURL(baseState = {}, String(base));
      if (failure) throw TypeError(failure);
    }
  }
  failure = parseURL(state, urlString, null, baseState);
  if (failure) throw TypeError(failure);
  var searchParams = state.searchParams = new URLSearchParams();
  var searchParamsState = getInternalSearchParamsState(searchParams);
  searchParamsState.updateSearchParams(state.query);
  searchParamsState.updateURL = function () {
    state.query = String(searchParams) || null;
  };
  if (!DESCRIPTORS) {
    that.href = serializeURL.call(that);
    that.origin = getOrigin.call(that);
    that.protocol = getProtocol.call(that);
    that.username = getUsername.call(that);
    that.password = getPassword.call(that);
    that.host = getHost.call(that);
    that.hostname = getHostname.call(that);
    that.port = getPort.call(that);
    that.pathname = getPathname.call(that);
    that.search = getSearch.call(that);
    that.searchParams = getSearchParams.call(that);
    that.hash = getHash.call(that);
  }
};

var URLPrototype = URLConstructor.prototype;

var serializeURL = function () {
  var url = getInternalURLState(this);
  var scheme = url.scheme;
  var username = url.username;
  var password = url.password;
  var host = url.host;
  var port = url.port;
  var path = url.path;
  var query = url.query;
  var fragment = url.fragment;
  var output = scheme + ':';
  if (host !== null) {
    output += '//';
    if (includesCredentials(url)) {
      output += username + (password ? ':' + password : '') + '@';
    }
    output += serializeHost(host);
    if (port !== null) output += ':' + port;
  } else if (scheme == 'file') output += '//';
  output += url.cannotBeABaseURL ? path[0] : path.length ? '/' + path.join('/') : '';
  if (query !== null) output += '?' + query;
  if (fragment !== null) output += '#' + fragment;
  return output;
};

var getOrigin = function () {
  var url = getInternalURLState(this);
  var scheme = url.scheme;
  var port = url.port;
  if (scheme == 'blob') try {
    return new URL(scheme.path[0]).origin;
  } catch (error) {
    return 'null';
  }
  if (scheme == 'file' || !isSpecial(url)) return 'null';
  return scheme + '://' + serializeHost(url.host) + (port !== null ? ':' + port : '');
};

var getProtocol = function () {
  return getInternalURLState(this).scheme + ':';
};

var getUsername = function () {
  return getInternalURLState(this).username;
};

var getPassword = function () {
  return getInternalURLState(this).password;
};

var getHost = function () {
  var url = getInternalURLState(this);
  var host = url.host;
  var port = url.port;
  return host === null ? ''
    : port === null ? serializeHost(host)
    : serializeHost(host) + ':' + port;
};

var getHostname = function () {
  var host = getInternalURLState(this).host;
  return host === null ? '' : serializeHost(host);
};

var getPort = function () {
  var port = getInternalURLState(this).port;
  return port === null ? '' : String(port);
};

var getPathname = function () {
  var url = getInternalURLState(this);
  var path = url.path;
  return url.cannotBeABaseURL ? path[0] : path.length ? '/' + path.join('/') : '';
};

var getSearch = function () {
  var query = getInternalURLState(this).query;
  return query ? '?' + query : '';
};

var getSearchParams = function () {
  return getInternalURLState(this).searchParams;
};

var getHash = function () {
  var fragment = getInternalURLState(this).fragment;
  return fragment ? '#' + fragment : '';
};

var accessorDescriptor = function (getter, setter) {
  return { get: getter, set: setter, configurable: true, enumerable: true };
};

if (DESCRIPTORS) {
  defineProperties(URLPrototype, {
    // `URL.prototype.href` accessors pair
    // https://url.spec.whatwg.org/#dom-url-href
    href: accessorDescriptor(serializeURL, function (href) {
      var url = getInternalURLState(this);
      var urlString = String(href);
      var failure = parseURL(url, urlString);
      if (failure) throw TypeError(failure);
      getInternalSearchParamsState(url.searchParams).updateSearchParams(url.query);
    }),
    // `URL.prototype.origin` getter
    // https://url.spec.whatwg.org/#dom-url-origin
    origin: accessorDescriptor(getOrigin),
    // `URL.prototype.protocol` accessors pair
    // https://url.spec.whatwg.org/#dom-url-protocol
    protocol: accessorDescriptor(getProtocol, function (protocol) {
      var url = getInternalURLState(this);
      parseURL(url, String(protocol) + ':', SCHEME_START);
    }),
    // `URL.prototype.username` accessors pair
    // https://url.spec.whatwg.org/#dom-url-username
    username: accessorDescriptor(getUsername, function (username) {
      var url = getInternalURLState(this);
      var codePoints = arrayFrom(String(username));
      if (cannotHaveUsernamePasswordPort(url)) return;
      url.username = '';
      for (var i = 0; i < codePoints.length; i++) {
        url.username += percentEncode(codePoints[i], userinfoPercentEncodeSet);
      }
    }),
    // `URL.prototype.password` accessors pair
    // https://url.spec.whatwg.org/#dom-url-password
    password: accessorDescriptor(getPassword, function (password) {
      var url = getInternalURLState(this);
      var codePoints = arrayFrom(String(password));
      if (cannotHaveUsernamePasswordPort(url)) return;
      url.password = '';
      for (var i = 0; i < codePoints.length; i++) {
        url.password += percentEncode(codePoints[i], userinfoPercentEncodeSet);
      }
    }),
    // `URL.prototype.host` accessors pair
    // https://url.spec.whatwg.org/#dom-url-host
    host: accessorDescriptor(getHost, function (host) {
      var url = getInternalURLState(this);
      if (url.cannotBeABaseURL) return;
      parseURL(url, String(host), HOST);
    }),
    // `URL.prototype.hostname` accessors pair
    // https://url.spec.whatwg.org/#dom-url-hostname
    hostname: accessorDescriptor(getHostname, function (hostname) {
      var url = getInternalURLState(this);
      if (url.cannotBeABaseURL) return;
      parseURL(url, String(hostname), HOSTNAME);
    }),
    // `URL.prototype.port` accessors pair
    // https://url.spec.whatwg.org/#dom-url-port
    port: accessorDescriptor(getPort, function (port) {
      var url = getInternalURLState(this);
      if (cannotHaveUsernamePasswordPort(url)) return;
      port = String(port);
      if (port == '') url.port = null;
      else parseURL(url, port, PORT);
    }),
    // `URL.prototype.pathname` accessors pair
    // https://url.spec.whatwg.org/#dom-url-pathname
    pathname: accessorDescriptor(getPathname, function (pathname) {
      var url = getInternalURLState(this);
      if (url.cannotBeABaseURL) return;
      url.path = [];
      parseURL(url, pathname + '', PATH_START);
    }),
    // `URL.prototype.search` accessors pair
    // https://url.spec.whatwg.org/#dom-url-search
    search: accessorDescriptor(getSearch, function (search) {
      var url = getInternalURLState(this);
      search = String(search);
      if (search == '') {
        url.query = null;
      } else {
        if ('?' == search.charAt(0)) search = search.slice(1);
        url.query = '';
        parseURL(url, search, QUERY);
      }
      getInternalSearchParamsState(url.searchParams).updateSearchParams(url.query);
    }),
    // `URL.prototype.searchParams` getter
    // https://url.spec.whatwg.org/#dom-url-searchparams
    searchParams: accessorDescriptor(getSearchParams),
    // `URL.prototype.hash` accessors pair
    // https://url.spec.whatwg.org/#dom-url-hash
    hash: accessorDescriptor(getHash, function (hash) {
      var url = getInternalURLState(this);
      hash = String(hash);
      if (hash == '') {
        url.fragment = null;
        return;
      }
      if ('#' == hash.charAt(0)) hash = hash.slice(1);
      url.fragment = '';
      parseURL(url, hash, FRAGMENT);
    })
  });
}

// `URL.prototype.toJSON` method
// https://url.spec.whatwg.org/#dom-url-tojson
redefine(URLPrototype, 'toJSON', function toJSON() {
  return serializeURL.call(this);
}, { enumerable: true });

// `URL.prototype.toString` method
// https://url.spec.whatwg.org/#URL-stringification-behavior
redefine(URLPrototype, 'toString', function toString() {
  return serializeURL.call(this);
}, { enumerable: true });

if (NativeURL) {
  var nativeCreateObjectURL = NativeURL.createObjectURL;
  var nativeRevokeObjectURL = NativeURL.revokeObjectURL;
  // `URL.createObjectURL` method
  // https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL
  // eslint-disable-next-line no-unused-vars
  if (nativeCreateObjectURL) redefine(URLConstructor, 'createObjectURL', function createObjectURL(blob) {
    return nativeCreateObjectURL.apply(NativeURL, arguments);
  });
  // `URL.revokeObjectURL` method
  // https://developer.mozilla.org/en-US/docs/Web/API/URL/revokeObjectURL
  // eslint-disable-next-line no-unused-vars
  if (nativeRevokeObjectURL) redefine(URLConstructor, 'revokeObjectURL', function revokeObjectURL(url) {
    return nativeRevokeObjectURL.apply(NativeURL, arguments);
  });
}

setToStringTag(URLConstructor, 'URL');

$({ global: true, forced: !USE_NATIVE_URL, sham: !DESCRIPTORS }, {
  URL: URLConstructor
});

},{"../modules/es.string.iterator":"../../../node_modules/core-js/modules/es.string.iterator.js","../internals/export":"../../../node_modules/core-js/internals/export.js","../internals/descriptors":"../../../node_modules/core-js/internals/descriptors.js","../internals/native-url":"../../../node_modules/core-js/internals/native-url.js","../internals/global":"../../../node_modules/core-js/internals/global.js","../internals/object-define-properties":"../../../node_modules/core-js/internals/object-define-properties.js","../internals/redefine":"../../../node_modules/core-js/internals/redefine.js","../internals/an-instance":"../../../node_modules/core-js/internals/an-instance.js","../internals/has":"../../../node_modules/core-js/internals/has.js","../internals/object-assign":"../../../node_modules/core-js/internals/object-assign.js","../internals/array-from":"../../../node_modules/core-js/internals/array-from.js","../internals/string-multibyte":"../../../node_modules/core-js/internals/string-multibyte.js","../internals/punycode-to-ascii":"../../../node_modules/core-js/internals/punycode-to-ascii.js","../internals/set-to-string-tag":"../../../node_modules/core-js/internals/set-to-string-tag.js","../modules/web.url-search-params":"../../../node_modules/core-js/modules/web.url-search-params.js","../internals/internal-state":"../../../node_modules/core-js/internals/internal-state.js"}],"../../../node_modules/core-js/modules/web.url.to-json.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');

// `URL.prototype.toJSON` method
// https://url.spec.whatwg.org/#dom-url-tojson
$({ target: 'URL', proto: true, enumerable: true }, {
  toJSON: function toJSON() {
    return URL.prototype.toString.call(this);
  }
});

},{"../internals/export":"../../../node_modules/core-js/internals/export.js"}],"../../../node_modules/core-js/web/index.js":[function(require,module,exports) {
require('../modules/web.dom-collections.for-each');
require('../modules/web.dom-collections.iterator');
require('../modules/web.immediate');
require('../modules/web.queue-microtask');
require('../modules/web.timers');
require('../modules/web.url');
require('../modules/web.url.to-json');
require('../modules/web.url-search-params');

module.exports = require('../internals/path');

},{"../modules/web.dom-collections.for-each":"../../../node_modules/core-js/modules/web.dom-collections.for-each.js","../modules/web.dom-collections.iterator":"../../../node_modules/core-js/modules/web.dom-collections.iterator.js","../modules/web.immediate":"../../../node_modules/core-js/modules/web.immediate.js","../modules/web.queue-microtask":"../../../node_modules/core-js/modules/web.queue-microtask.js","../modules/web.timers":"../../../node_modules/core-js/modules/web.timers.js","../modules/web.url":"../../../node_modules/core-js/modules/web.url.js","../modules/web.url.to-json":"../../../node_modules/core-js/modules/web.url.to-json.js","../modules/web.url-search-params":"../../../node_modules/core-js/modules/web.url-search-params.js","../internals/path":"../../../node_modules/core-js/internals/path.js"}],"../../../node_modules/core-js/stable/index.js":[function(require,module,exports) {
require('../es');
require('../web');

module.exports = require('../internals/path');

},{"../es":"../../../node_modules/core-js/es/index.js","../web":"../../../node_modules/core-js/web/index.js","../internals/path":"../../../node_modules/core-js/internals/path.js"}],"../../../node_modules/regenerator-runtime/runtime.js":[function(require,module,exports) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
  typeof module === "object" ? module.exports : {}
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}

},{}],"../../../node_modules/@neft/core/src/log/marker/browser.coffee":[function(require,module,exports) {
(function() {
  // when=NEFT_BROWSER;
  'use strict';
  var styleMsg, withStyle;

  styleMsg = function(msg, context, style) {
    context.styles.push(style);
    return "%c" + msg + "%r";
  };

  withStyle = function(style) {
    return function(msg, context) {
      return styleMsg(msg, context, style);
    };
  };

  exports.bold = withStyle('font-weight:bold');

  exports.italic = withStyle('font-style:italic');

  exports.strikethrough = withStyle('text-decoration:line-through');

  exports.underline = withStyle('text-decoration:underline');

  exports.code = withStyle('padding: 2px 4px;font-size: 90%;color: #c7254e;background-color: #f9f2f4;border-radius: 4px');

  exports.red = withStyle('color:red');

  exports.green = withStyle('color:green');

  exports.yellow = withStyle('color:orange');

  exports.blue = withStyle('color:blue');

  exports.white = withStyle('color:white');

  exports.cyan = withStyle('color:#00caca');

  exports.gray = withStyle('color:gray');

  exports.hex = function(msg, hex, context) {
    return styleMsg(msg, context, "color:" + hex);
  };

}).call(this);

},{}],"../../../node_modules/@neft/core/src/log/marker/index.coffee":[function(require,module,exports) {
(function () {
  'use strict';

  var canUseBrowser, loadCustomMarker, noMarker;

  noMarker = function (msg) {
    return msg;
  };

  exports.bold = noMarker;
  exports.italic = noMarker;
  exports.strikethrough = noMarker;
  exports.underline = noMarker;
  exports.code = noMarker;
  exports.red = noMarker;
  exports.green = noMarker;
  exports.yellow = noMarker;
  exports.blue = noMarker;
  exports.white = noMarker;
  exports.cyan = noMarker;
  exports.gray = noMarker;
  exports.hex = noMarker;
  canUseBrowser = typeof navigator !== "undefined" && navigator !== null;
  canUseBrowser && (canUseBrowser = /chrome|safari|firefox/i.test(navigator.userAgent));
  canUseBrowser && (canUseBrowser = !/edge/i.test(navigator.userAgent));

  loadCustomMarker = function (marker) {
    var func, key;

    for (key in marker) {
      func = marker[key];

      if (!exports[key]) {
        throw new Error("Unrecognized marker function '" + key + "'");
      }

      exports[key] = func;
    }
  };

  if ("1") {
    if (canUseBrowser) {
      loadCustomMarker(require('./browser'));
    }
  }

  if ("") {
    loadCustomMarker(require('./node'));
  }
}).call(this);
},{"./browser":"../../../node_modules/@neft/core/src/log/marker/browser.coffee"}],"../../../node_modules/@neft/core/src/log/parser.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  var RULES, delimeterRegexp, marker;

  marker = require('./marker');

  delimeterRegexp = function(start, end, prefix, suffix) {
    if (end == null) {
      end = start;
    }
    if (prefix == null) {
      prefix = '';
    }
    if (suffix == null) {
      suffix = '';
    }
    return new RegExp("(" + prefix + ")" + start + "(.+?)" + end + "(" + suffix + ")", 'g');
  };

  RULES = [
    {
      regexp: delimeterRegexp('__', '__', ' |^', ' |$'),
      replacer: marker.bold
    }, {
      regexp: delimeterRegexp('\\*\\*'),
      replacer: marker.bold
    }, {
      regexp: delimeterRegexp('_', '_', ' |^', ' |$'),
      replacer: marker.italic
    }, {
      regexp: delimeterRegexp('\\*'),
      replacer: marker.italic
    }, {
      regexp: delimeterRegexp('~~'),
      replacer: marker.strikethrough
    }, {
      regexp: delimeterRegexp('<u>', '<\\/u>'),
      replacer: marker.underline
    }, {
      regexp: delimeterRegexp('`'),
      replacer: marker.code
    }
  ];

  exports.parse = function(msg, context) {
    var i, len, rule;
    msg = String(msg);
    for (i = 0, len = RULES.length; i < len; i++) {
      rule = RULES[i];
      msg = msg.replace(rule.regexp, function(_, prefix, str, suffix) {
        return prefix + rule.replacer(str, context) + suffix;
      });
    }
    return msg;
  };

  exports.clear = function(msg) {
    var i, len, rule;
    for (i = 0, len = RULES.length; i < len; i++) {
      rule = RULES[i];
      msg = msg.replace(rule.regexp, '$1$2$3');
    }
    return msg;
  };

}).call(this);

},{"./marker":"../../../node_modules/@neft/core/src/log/marker/index.coffee"}],"../../../node_modules/@neft/core/src/log/printer/browser.coffee":[function(require,module,exports) {
(function() {
  var slice = [].slice;

  exports.createContext = function() {
    return {
      styles: []
    };
  };


  /*
  Prints given msg with styles defined in `ctx.styles`.
  `msg` describes start of a style with `%c` and ends with `%r`.
   */

  exports.stdout = function(msg, ctx) {
    var args, char, i, j, len, nextStyle, styledMsg, stylesStack;
    styledMsg = '';
    args = [];
    stylesStack = [];
    nextStyle = 0;
    for (i = j = 0, len = msg.length; j < len; i = ++j) {
      char = msg[i];
      if (i > 0 && msg[i - 1] === '%') {
        if (char === 'c') {
          stylesStack.push(ctx.styles[nextStyle++]);
        }
        if (char === 'r') {
          char = 'c';
          stylesStack.pop();
        }
        args.push(stylesStack.join(';'));
      }
      styledMsg += char;
    }
    console.log.apply(console, [styledMsg].concat(slice.call(args)));
  };

}).call(this);

},{}],"../../../node_modules/@neft/core/src/log/printer/index.coffee":[function(require,module,exports) {
(function () {
  var loadCustomPrinter;
  exports.allowsNoLine = false;

  exports.createContext = function () {
    return null;
  };

  exports.stdout = function (msg) {
    return console.log(msg);
  };

  loadCustomPrinter = function (printer) {
    var func, key;

    for (key in printer) {
      func = printer[key];

      if (!(key in exports)) {
        throw new Error("Unrecognized printer function '" + key + "'");
      }

      exports[key] = func;
    }
  };

  if ("1") {
    loadCustomPrinter(require('./browser'));
  }

  if ("") {
    loadCustomPrinter(require('./node'));
  }
}).call(this);
},{"./browser":"../../../node_modules/@neft/core/src/log/printer/browser.coffee"}],"../../../node_modules/@neft/core/src/log/repeat-logger.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  var DEFAULT_DELAY;

  DEFAULT_DELAY = 100;

  exports.createLogger = function(logger, opts) {
    var delay, printTasks, printlnTasks, repeatLogger, timer, updateTasks, updating;
    repeatLogger = Object.create(logger);
    delay = (opts != null ? opts.delay : void 0) || DEFAULT_DELAY;
    printTasks = [];
    printlnTasks = [];
    timer = void 0;
    updating = false;
    updateTasks = function() {
      var i, j, len, len1, task;
      updating = true;
      for (i = 0, len = printTasks.length; i < len; i++) {
        task = printTasks[i];
        logger.print(task);
      }
      for (j = 0, len1 = printlnTasks.length; j < len1; j++) {
        task = printlnTasks[j];
        logger.println(task);
      }
      updating = false;
    };
    repeatLogger.print = function(msgBuilder) {
      printTasks.push(msgBuilder);
      logger.print(msgBuilder);
      return this;
    };
    repeatLogger.println = function(msgBuilder) {
      printlnTasks.push(msgBuilder);
      logger.println(msgBuilder);
      return this;
    };
    repeatLogger.stop = function() {
      logger.stop();
      clearInterval(timer);
      timer = void 0;
    };
    timer = setInterval(updateTasks, delay);
    return repeatLogger;
  };

}).call(this);

},{}],"../../../node_modules/@neft/core/src/log/timer-logger.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  var marker;

  marker = require('./marker');

  exports.createLogger = function(logger) {
    var getMsgWithTime, time, timerLogger;
    timerLogger = Object.create(logger);
    time = Date.now();
    getMsgWithTime = function(msgBuilder) {
      return function(ctx) {
        var change, unit;
        change = Date.now() - time;
        unit = 'ms';
        if (change > 1000) {
          change = (change / 1000).toFixed(1);
          unit = 's';
          if (change > 60) {
            change = (change / 60).toFixed(2);
            unit = 'm';
          }
        }
        return msgBuilder(ctx) + ' ' + marker.cyan("+" + change + unit, ctx);
      };
    };
    timerLogger.print = function(msgBuilder) {
      logger.print(getMsgWithTime(msgBuilder));
      return this;
    };
    timerLogger.println = function(msgBuilder) {
      logger.println(getMsgWithTime(msgBuilder));
      return this;
    };
    return timerLogger;
  };

}).call(this);

},{"./marker":"../../../node_modules/@neft/core/src/log/marker/index.coffee"}],"../../../node_modules/@neft/core/src/log/prefix-logger.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  var marker;

  marker = require('./marker');

  exports.createLogger = function(logger, prefix) {
    var getMsgWithPrefix, prefixLogger, time;
    prefixLogger = Object.create(logger);
    time = Date.now();
    getMsgWithPrefix = function(msgBuilder) {
      return function(ctx) {
        return marker.gray("[" + prefix + "]  ", ctx) + msgBuilder(ctx);
      };
    };
    prefixLogger.print = function(msgBuilder) {
      logger.print(getMsgWithPrefix(msgBuilder));
      return this;
    };
    prefixLogger.println = function(msgBuilder) {
      logger.println(getMsgWithPrefix(msgBuilder));
      return this;
    };
    return prefixLogger;
  };

}).call(this);

},{"./marker":"../../../node_modules/@neft/core/src/log/marker/index.coffee"}],"../../../node_modules/process/browser.js":[function(require,module,exports) {

// shim for using process in browser
var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}

function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}

(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }

  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();

function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  } // if setTimeout wasn't available but was latter defined


  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}

function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  } // if clearTimeout wasn't available but was latter defined


  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}

var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }

  draining = false;

  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }

  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }

  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;

  while (len) {
    currentQueue = queue;
    queue = [];

    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}

process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue.push(new Item(fun, args));

  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}; // v8 likes predictible objects


function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};

process.title = 'browser';
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
  return [];
};

process.binding = function (name) {
  throw new Error('process.binding is not supported');
};

process.cwd = function () {
  return '/';
};

process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};

process.umask = function () {
  return 0;
};
},{}],"../../../node_modules/@neft/core/src/log/index.litcoffee":[function(require,module,exports) {
var process = require("process");
(function () {
  'use strict';

  var DEFAULT_SCOPE, LOADING_FRAMES, LOADING_MSG, Logger, getStringColor, getStringHash, lineLogger, marker, parser, prefixLogger, printer, repeatLogger, timerLogger;
  parser = require('./parser');
  marker = require('./marker');
  printer = require('./printer');

  if ("") {
    lineLogger = require('./line-logger');
  }

  repeatLogger = require('./repeat-logger');
  timerLogger = require('./timer-logger');
  prefixLogger = require('./prefix-logger');
  DEFAULT_SCOPE = 'debug';
  LOADING_MSG = 'Loading...';
  LOADING_FRAMES = ['⣾', '⣽', '⣻', '⢿', '⡿', '⣟', '⣯', '⣷'];

  getStringHash = function (str) {
    var hash, i;
    hash = 5381;
    i = str.length;

    while (i) {
      hash = hash * 33 ^ str.charCodeAt(--i);
    }

    return hash >>> 0;
  };

  getStringColor = function (str) {
    var hash, hex, validHex;
    hash = getStringHash(str);
    hex = hash.toString(16);
    validHex = ("000000" + hex).slice(-6);
    return "#" + validHex;
  };

  Logger = function () {
    function Logger(scopeName) {
      this.scopeName = scopeName != null ? scopeName : DEFAULT_SCOPE;
      this.scopeColor = getStringColor(this.scopeName);
      this._loadingFrame = 0;
    }

    Logger.prototype.stop = function () {};

    Logger.prototype.print = function (msgBuilder) {
      var ctx;
      ctx = printer.createContext();
      printer.stdout(msgBuilder(ctx), ctx);
      return this;
    };

    Logger.prototype.println = function (msgBuilder) {
      var ctx, msg;
      ctx = printer.createContext();
      msg = msgBuilder(ctx);

      if (printer.allowsNoLine) {
        msg += '\n';
      }

      printer.stdout(msg, ctx);
      return this;
    };

    Logger.prototype.line = function () {
      if (undefined) {
        return this;
      } else {
        return (lineLogger != null ? lineLogger.createLogger(this) : void 0) || this;
      }
    };

    Logger.prototype.repeat = function (opts) {
      if (undefined) {
        return this;
      } else {
        return repeatLogger.createLogger(this, opts);
      }
    };

    Logger.prototype.timer = function () {
      return timerLogger.createLogger(this);
    };

    Logger.prototype.prefix = function (prefix) {
      return prefixLogger.createLogger(this, prefix);
    };

    Logger.prototype.scope = function (name) {
      var childScope;
      childScope = this.scopeName === DEFAULT_SCOPE ? '' : this.scopeName + ":";
      childScope += name;
      return new Logger(childScope);
    };

    Logger.prototype.log = function (msg) {
      return this.println(function (ctx) {
        return parser.parse(msg, ctx);
      });
    };

    Logger.prototype.debug = function (msg) {
      return this.println(function (_this) {
        return function (ctx) {
          return marker.hex(_this.scopeName, _this.scopeColor, ctx) + '  ' + parser.parse(msg, ctx);
        };
      }(this));
    };

    Logger.prototype.info = function (msg) {
      return this.println(function (ctx) {
        return marker.blue(marker.bold('INFO', ctx), ctx) + '  ' + parser.parse(msg, ctx);
      });
    };

    Logger.prototype.ok = function (msg) {
      return this.println(function (ctx) {
        return marker.green(marker.bold('OK', ctx), ctx) + '  ' + parser.parse(msg, ctx);
      });
    };

    Logger.prototype.warn = function (msg) {
      return this.println(function (ctx) {
        return marker.yellow(marker.bold('WARN', ctx), ctx) + '  ' + parser.parse(msg, ctx);
      });
    };

    Logger.prototype.warning = function (msg) {
      return this.warn(msg);
    };

    Logger.prototype.error = function (msg, error) {
      this.println(function (ctx) {
        return marker.red(marker.bold('ERROR', ctx), ctx) + '  ' + parser.parse(msg, ctx);
      });

      if (error != null ? error.stack : void 0) {
        return this.println(function (ctx) {
          return error.stack;
        });
      }
    };

    Logger.prototype.progress = function (title, value, max) {
      var label, left, right, width;

      if (typeof title === 'number') {
        max = value;
        value = title;
        title = '';
      }

      width = process.stdout.columns / 3 - parser.clear(title).length;

      if (max === void 0) {
        value = Math.floor(value * 100);
        max = 100;
        label = value + "%";
      } else {
        label = value + "/" + max;
      }

      left = '█'.repeat(Math.min(width, Math.floor(value / max * width)));
      right = '░'.repeat(Math.max(0, width - left.length));
      return this.println(function (ctx) {
        var titleMsg;
        titleMsg = title ? parser.parse(title, ctx) + "  " : '';
        return "" + titleMsg + left + marker.gray(right, ctx) + " " + label;
      });
    };

    Logger.prototype.loading = function (msg, frames) {
      if (msg == null) {
        msg = LOADING_MSG;
      }

      if (frames == null) {
        frames = LOADING_FRAMES;
      }

      return this.println(function (_this) {
        return function (ctx) {
          var frame;
          frame = frames[_this._loadingFrame++ % frames.length];
          return marker.cyan(frame, ctx) + ' ' + parser.parse(msg, ctx);
        };
      }(this));
    };

    return Logger;
  }();

  module.exports = new Logger();
}).call(this);
},{"./parser":"../../../node_modules/@neft/core/src/log/parser.coffee","./marker":"../../../node_modules/@neft/core/src/log/marker/index.coffee","./printer":"../../../node_modules/@neft/core/src/log/printer/index.coffee","./repeat-logger":"../../../node_modules/@neft/core/src/log/repeat-logger.coffee","./timer-logger":"../../../node_modules/@neft/core/src/log/timer-logger.coffee","./prefix-logger":"../../../node_modules/@neft/core/src/log/prefix-logger.coffee","process":"../../../node_modules/process/browser.js"}],"../../../node_modules/@neft/core/src/signal/signal.js":[function(require,module,exports) {
const log = require('../log')

const disconnectFromListeners = (listeners, listener, ctx) => {
  if (!listeners) return

  let index = 0

  while (index < listeners.length) {
    index = listeners.indexOf(listener, index)
    if (index === -1) return
    if (listeners[index + 1] === ctx) {
      listeners[index] = null
      listeners[index + 1] = null
      return
    }
    index += 2
  }
}

const clearListenersGaps = (listeners) => {
  let i = 0
  const n = listeners.length
  let shift = 0
  while (i < n) {
    const func = listeners[i]
    if (func === null) {
      shift += 2
    } else if (shift > 0) {
      listeners[i - shift] = func
      listeners[i - shift + 1] = listeners[i + 1]
      listeners[i] = null
      listeners[i + 1] = null
    }
    i += 2
  }
}

const callListeners = (object, listeners, arg1, arg2) => {
  if (!listeners) return

  let i = 0
  const n = listeners.length
  let containsGaps = false
  while (i < n) {
    const func = listeners[i]
    if (func === null) {
      containsGaps = true
    } else {
      const ctx = listeners[i + 1]
      try {
        func.call(ctx || object, arg1, arg2)
      } catch (error) {
        log.error('Uncaught error thrown in signal listener', error)
      }
    }
    i += 2
  }

  if (containsGaps) {
    clearListenersGaps(listeners)
  }
}

class Signal {
  constructor() {
    this.listeners = null
    Object.seal(this)
  }

  connect(listener, ctx = null) {
    const { listeners } = this
    if (!listeners) return

    const n = listeners.length
    let i = n - 2
    while (i >= 0) {
      if (listeners[i] !== null) {
        break
      }
      i -= 2
    }

    if (i + 2 === n) {
      listeners.push(listener, ctx)
    } else {
      listeners[i + 2] = listener
      listeners[i + 3] = ctx
    }
  }

  connectOnce(listener, ctx = null) {
    const { listeners } = this
    if (!listeners) return

    const wrapper = function (arg1, arg2) {
      disconnectFromListeners(listeners, wrapper, ctx)
      listener.call(this, arg1, arg2)
    }

    this.connect(wrapper, ctx)
  }

  disconnect(listener, ctx = null) {
    disconnectFromListeners(this.listeners, listener, ctx)
  }

  disconnectAll() {
    const { listeners } = this
    if (!listeners) return
    for (let i = 0, n = listeners.length; i < n; i += 1) {
      listeners[i] = null
    }
  }

  isEmpty() {
    const { listeners } = this
    if (!listeners) return true
    for (let i = 0, n = listeners.length; i < n; i += 2) {
      if (listeners[i] !== null) return false
    }
    return true
  }
}

exports.Signal = Signal
exports.callListeners = callListeners

},{"../log":"../../../node_modules/@neft/core/src/log/index.litcoffee"}],"../../../node_modules/@neft/core/src/signal/dispatcher.js":[function(require,module,exports) {
const { Signal, callListeners } = require('./signal')

class InternalSignalDispatcher extends Signal {
  constructor(listeners) {
    super()
    this.listeners = listeners
    Object.freeze(this)
  }

  emit(arg1, arg2) {
    callListeners(null, this.listeners, arg1, arg2)
  }
}

class SignalDispatcher extends InternalSignalDispatcher {
  constructor() {
    super([])
  }
}

exports.SignalDispatcher = SignalDispatcher
exports.InternalSignalDispatcher = InternalSignalDispatcher

},{"./signal":"../../../node_modules/@neft/core/src/signal/signal.js"}],"../../../node_modules/@neft/core/src/util/namespace.litcoffee":[function(require,module,exports) {
(function() {
  'use strict';
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  module.exports = function(utils) {
    var OptionsArray, get, isStringArray;
    get = utils.get = function(obj, path, target) {
      var elem, i, j, k, key, len, len1;
      if (path == null) {
        path = '';
      }
      switch (typeof path) {
        case 'object':
          path = exports.clone(path);
          break;
        case 'string':
          path = path.split('.');
          break;
        default:
          throw new TypeError;
      }
      for (i = j = 0, len = path.length; j < len; i = ++j) {
        key = path[i];
        if (!key.length && i) {
          throw new ReferenceError('utils.get(): empty properties ' + 'are not supported');
        }
        if (isStringArray(key)) {
          key = key.substring(0, key.indexOf('[]'));
          path = path.splice(i);
          path[0] = path[0].substring(key.length + 2);
          if (!path[0].length) {
            path.shift();
          }
          if (target == null) {
            target = new OptionsArray();
          }
          if (key.length) {
            obj = obj[key];
          }
          if (typeof obj === 'undefined') {
            return void 0;
          }
          for (k = 0, len1 = obj.length; k < len1; k++) {
            elem = obj[k];
            get(elem, path.join('.'), target);
          }
          if (!target.length) {
            return void 0;
          }
          return target;
        }
        if (key.length) {
          obj = obj[key];
        }
        if (typeof obj !== 'object' && typeof obj !== 'function') {
          if (i !== path.length - 1) {
            obj = void 0;
          }
          break;
        }
      }
      if (target && typeof obj !== 'undefined') {
        target.push(obj);
      }
      return obj;
    };
    get.OptionsArray = OptionsArray = (function(superClass) {
      extend(OptionsArray, superClass);

      function OptionsArray() {
        OptionsArray.__super__.constructor.call(this);
      }

      return OptionsArray;

    })(Array);
    return isStringArray = utils.isStringArray = function(arg) {
      null;
      //<development>;
      if (typeof arg !== 'string') {
        throw new Error('utils.isStringArray value must be a string');
      }
      //</development>;
      return /\[\]$/.test(arg);
    };
  };

}).call(this);

},{}],"../../../node_modules/@neft/core/src/util/stringifying.litcoffee":[function(require,module,exports) {
(function() {
  'use strict';
  var hasOwnProp, isArray;

  isArray = Array.isArray;

  hasOwnProp = Object.hasOwnProperty;

  module.exports = function(utils) {
    utils.simplify = (function() {
      var nativeCtors, nativeProtos;
      nativeProtos = [Array.prototype, Object.prototype];
      nativeCtors = [Array, Object];
      return function(obj, opts) {
        var ctors, cyclic, i, ids, j, len1, objs, optsCtors, optsInsts, optsProps, optsProtos, parse, protos, references, value;
        if (opts == null) {
          opts = {};
        }
        null;
        //<development>;
        if (!utils.isObject(obj)) {
          throw new Error('utils.simplify object must be an object');
        }
        if (!utils.isPlainObject(opts)) {
          throw new Error('utils.simplify options must be a plain object');
        }
        //</development>;
        optsProps = opts.properties != null ? opts.properties : opts.properties = false;
        optsProtos = opts.protos != null ? opts.protos : opts.protos = false;
        optsCtors = opts.constructors != null ? opts.constructors : opts.constructors = false;
        optsInsts = opts.instances = !optsProtos && optsCtors;
        objs = [];
        ids = [];
        references = {};
        if (optsCtors) {
          ctors = {};
        }
        if (optsProtos) {
          protos = {};
        }
        cyclic = function(obj) {
          var i, key, len, objIds, proto, value;
          len = objs.push(obj);
          ids.push(objIds = []);
          for (key in obj) {
            value = obj[key];
            if (!(hasOwnProp.call(obj, key))) {
              continue;
            }
            if (!(value && typeof value === 'object')) {
              continue;
            }
            if (optsProps && exports.lookupGetter(obj, key)) {
              objIds.push(null);
              continue;
            }
            if (!~(i = objs.indexOf(value))) {
              i = cyclic(value);
            }
            objIds.push(i);
          }
          if (optsProtos && (proto = getPrototypeOf(obj))) {
            if (~(nativeProtos.indexOf(proto))) {
              i = null;
            } else if (!~(i = objs.indexOf(proto))) {
              i = cyclic(proto);
            }
            objIds.push(i);
          }
          return len - 1;
        };
        parse = function(obj, index) {
          var ctor, desc, isReference, key, objId, objIds, objReferences, obji, protoObjId, r, value;
          r = isArray(obj) ? [] : {};
          objIds = ids[index];
          obji = 0;
          objReferences = null;
          for (key in obj) {
            value = obj[key];
            if (!(hasOwnProp.call(obj, key))) {
              continue;
            }
            r[key] = value;
            isReference = false;
            if (value && typeof value === 'object') {
              if (objReferences == null) {
                objReferences = [];
              }
              objId = value = objIds[obji++];
              if (value !== null) {
                isReference = true;
                objReferences.push(key);
              }
            }
            if (optsProps) {
              desc = getObjOwnPropDesc(obj, key);
              if (isReference) {
                desc.value = value;
              }
              value = desc;
            }
            r[key] = value;
          }
          if (optsProtos && getPrototypeOf(obj)) {
            protoObjId = objIds[obji++];
            if (protoObjId !== null) {
              protos[index] = protoObjId;
            }
          }
          if (optsCtors && (ctor = obj.constructor)) {
            if (optsInsts || hasOwnProp.call(obj, 'constructor')) {
              if (!~(nativeCtors.indexOf(ctor))) {
                ctors[index] = ctor;
              }
            }
          }
          if (objReferences) {
            references[index] = objReferences;
          }
          return r;
        };
        cyclic(obj);
        for (i = j = 0, len1 = objs.length; j < len1; i = ++j) {
          value = objs[i];
          objs[i] = parse(value, i);
        }
        return {
          opts: opts,
          objects: objs,
          references: references,
          protos: protos,
          constructors: ctors
        };
      };
    })();
    return utils.assemble = (function() {
      var ctorPropConfig;
      ctorPropConfig = {
        value: null
      };
      return function(obj) {
        null;
        //<development>;
        var constructors, func, j, k, key, l, len1, len2, len3, len4, m, objI, object, objects, opts, optsCtors, optsInsts, optsProps, optsProtos, protos, ref, refI, refId, references, refs, refsIds, value;
        if (!utils.isPlainObject(obj)) {
          throw new Error('utils.assemble object must be a plain object');
        }
        //</development>;
        opts = obj.opts, objects = obj.objects, references = obj.references, protos = obj.protos, constructors = obj.constructors;
        optsProps = opts.properties;
        optsProtos = opts.protos;
        optsCtors = opts.constructors;
        optsInsts = opts.instances;
        refsIds = [];
        if (optsProps) {
          for (objI in references) {
            refs = references[objI];
            obj = objects[objI];
            for (j = 0, len1 = refs.length; j < len1; j++) {
              ref = refs[j];
              refsIds.push(obj[ref].value);
              obj[ref].value = objects[obj[ref].value];
            }
          }
        } else {
          for (objI in references) {
            refs = references[objI];
            obj = objects[objI];
            for (k = 0, len2 = refs.length; k < len2; k++) {
              ref = refs[k];
              refsIds.push(obj[ref]);
              obj[ref] = objects[obj[ref]];
            }
          }
        }
        if (optsProps) {
          for (l = 0, len3 = objects.length; l < len3; l++) {
            obj = objects[l];
            for (key in obj) {
              value = obj[key];
              if (hasOwnProp.call(obj, key)) {
                defObjProp(obj, key, value);
              }
            }
          }
        }
        for (objI in protos) {
          refI = protos[objI];
          objects[objI] = utils.setPrototypeOf(objects[objI], objects[refI]);
        }
        if (optsInsts) {
          for (objI in constructors) {
            func = constructors[objI];
            object = objects[objI] = utils.setPrototypeOf(objects[objI], func.prototype);
            if (typeof func.fromAssembled === "function") {
              func.fromAssembled(object);
            }
          }
        } else if (optsCtors) {
          for (objI in constructors) {
            func = constructors[objI];
            ctorPropConfig.value = func;
            defObjProp(objects[objI], 'constructor', ctorPropConfig);
          }
        }
        refId = 0;
        for (objI in references) {
          refs = references[objI];
          obj = objects[objI];
          for (m = 0, len4 = refs.length; m < len4; m++) {
            ref = refs[m];
            obj[ref] = objects[refsIds[refId++]];
          }
        }
        return objects[0];
      };
    })();
  };

}).call(this);

},{}],"../../../node_modules/@neft/core/src/util/async.litcoffee":[function(require,module,exports) {
(function() {
  'use strict';
  var NOP, Stack, assert, exports, forEach, isArray, shift, utils,
    slice = [].slice;

  utils = null;

  assert = console.assert.bind(console);

  exports = module.exports;

  shift = Array.prototype.shift;

  isArray = Array.isArray;

  NOP = function() {};

  forEach = (function() {
    var forArray, forObject;
    forArray = function(arr, callback, onEnd, thisArg) {
      var i, n, next;
      i = 0;
      n = arr.length;
      next = function() {
        if (i === n) {
          return onEnd.call(thisArg);
        }
        i++;
        return callback.call(thisArg, arr[i - 1], i - 1, arr, next);
      };
      return next();
    };
    forObject = function(obj, callback, onEnd, thisArg) {
      var i, keys, n, next;
      keys = Object.keys(obj);
      i = 0;
      n = keys.length;
      next = function() {
        var key;
        if (i === n) {
          return onEnd.call(thisArg);
        }
        key = keys[i];
        callback.call(thisArg, key, obj[key], obj, next);
        return i++;
      };
      return next();
    };
    return function(list, callback, onEnd, thisArg) {
      var method;
      assert(!utils.isPrimitive(list));
      assert(typeof callback === 'function');
      if (onEnd != null) {
        assert(typeof onEnd === 'function');
      }
      method = isArray(list) ? forArray : forObject;
      method(list, callback, onEnd, thisArg);
      return null;
    };
  })();

  Stack = (function() {
    function Stack() {
      this._arr = [];
      this.length = 0;
      this.pending = false;
      Object.preventExtensions(this);
    }

    Stack.prototype.add = function(func, context, args) {
      if (args != null) {
        assert(utils.isObject(args));
      }
      this._arr.push(func, context, args);
      this.length++;
      return this;
    };

    Stack.prototype.callNext = function(args, callback) {
      var arg, callbackWrapper, called, context, func, funcArgs, funcLength, i, j, len, syncError;
      if (typeof args === 'function' && (callback == null)) {
        callback = args;
        args = null;
      }
      assert(typeof callback === 'function');
      if (!this._arr.length) {
        return callback();
      }
      this.length--;
      func = this._arr.shift();
      context = this._arr.shift();
      funcArgs = this._arr.shift();
      if (typeof func === 'string') {
        func = utils.get(context, func);
      }
      if (typeof func !== 'function') {
        throw new TypeError('ASync Stack::callNext(): ' + 'function to call is not a function');
      }
      funcLength = func.length || Math.max((args != null ? args.length : void 0) || 0, (funcArgs != null ? funcArgs.length : void 0) || 0) + 1;
      syncError = null;
      called = false;
      callbackWrapper = function() {
        assert(!called || !syncError, "Callback can't be called if function throws an error;\n" + ("Function: `" + func + "`\nSynchronous error: `" + ((syncError != null ? syncError.stack : void 0) || syncError) + "`"));
        assert(!called, "Callback can't be called twice;\nFunction: `" + func + "`");
        called = true;
        return callback.apply(this, arguments);
      };
      funcArgs = Object.create(funcArgs || null);
      funcArgs[funcLength - 1] = callbackWrapper;
      if (funcArgs.length === void 0 || funcArgs.length < funcLength) {
        funcArgs.length = funcLength;
      }
      if (args) {
        for (i = j = 0, len = args.length; j < len; i = ++j) {
          arg = args[i];
          if (i !== funcLength - 1 && funcArgs[i] === void 0) {
            funcArgs[i] = arg;
          }
        }
      }
      syncError = utils.catchError(func, context, funcArgs);
      if (syncError) {
        callbackWrapper(syncError);
      }
      return null;
    };

    Stack.prototype.runAll = function(callback, ctx) {
      var callNext, onNextCalled;
      if (callback == null) {
        callback = NOP;
      }
      if (ctx == null) {
        ctx = null;
      }
      assert(this.pending === false);
      if (typeof callback !== 'function') {
        throw new TypeError('ASync runAll(): ' + 'passed callback is not a function');
      }
      if (!this._arr.length) {
        return callback.call(ctx, null);
      }
      onNextCalled = (function(_this) {
        return function() {
          var args, err;
          err = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
          if (err != null) {
            _this.pending = false;
            return callback.call(ctx, err);
          }
          if (_this._arr.length) {
            return callNext(args);
          }
          _this.pending = false;
          return callback.apply(ctx, arguments);
        };
      })(this);
      callNext = (function(_this) {
        return function(args) {
          return _this.callNext(args, onNextCalled);
        };
      })(this);
      this.pending = true;
      callNext();
      return null;
    };

    Stack.prototype.runAllSimultaneously = function(callback, ctx) {
      var done, length, n, onDone;
      if (callback == null) {
        callback = NOP;
      }
      if (ctx == null) {
        ctx = null;
      }
      assert(this.pending === false);
      assert(typeof callback === 'function');
      length = n = this._arr.length / 3;
      done = 0;
      if (!length) {
        return callback.call(ctx);
      }
      onDone = (function(_this) {
        return function(err) {
          ++done;
          if (done > length) {
            return;
          }
          if (err) {
            done = length;
            _this.pending = false;
            return callback.call(ctx, err);
          }
          if (done === length) {
            _this.pending = false;
            return callback.call(ctx);
          }
        };
      })(this);
      this.pending = true;
      while (n--) {
        this.callNext(onDone);
      }
      return null;
    };

    return Stack;

  })();


  /*
  Exports
   */

  module.exports = function() {
    utils = arguments[0];
    return utils.async = {
      forEach: forEach,
      Stack: Stack
    };
  };

}).call(this);

},{}],"../../../node_modules/@neft/core/src/util/index.litcoffee":[function(require,module,exports) {
(function() {
  'use strict';
  var clone, cloneDeep, createObject, defObjProp, funcToString, getObjOwnPropDesc, getOwnPropertyNames, getPrototypeOf, has, hasOwnProp, isArray, isEqual, isObject, isPrimitive, log, merge, mergeDeep, objKeys, pop, random, ref, setPrototypeOf, shift, toString;

  toString = Object.prototype.toString;

  funcToString = Function.prototype.toString;

  isArray = Array.isArray;

  ref = Array.prototype, shift = ref.shift, pop = ref.pop;

  createObject = Object.create;

  getPrototypeOf = Object.getPrototypeOf, getOwnPropertyNames = Object.getOwnPropertyNames;

  objKeys = Object.keys;

  hasOwnProp = Object.hasOwnProperty;

  getObjOwnPropDesc = Object.getOwnPropertyDescriptor;

  defObjProp = Object.defineProperty;

  random = Math.random;

  log = require('../log');


  /*
  Link subfiles
   */

  require('./namespace')(exports);

  require('./stringifying')(exports);

  require('./async')(exports);

  ['isNode', 'isServer', 'isClient', 'isBrowser', 'isWebGL', 'isAndroid', 'isIOS', 'isMacOS'].forEach(function(prop) {
    return Object.defineProperty(exports, prop, {
      get: function() {
        throw new Error("utils." + prop + " is replaced by process.env.NEFT_PLATFORM");
      }
    });
  });

  Object.defineProperty(exports, 'isNative', {
    get: function() {
      throw new Error("utils.isNative is replaced by process.env.NEFT_NATIVE");
    }
  });

  exports.NOP = function() {};

  exports.is = Object.is || function(val1, val2) {
    if (val1 === 0 && val2 === 0) {
      return 1 / val1 === 1 / val2;
    } else if (val1 !== val1) {
      return val2 !== val2;
    } else {
      return val1 === val2;
    }
  };

  exports.isFloat = function(val) {
    return typeof val === 'number' && isFinite(val);
  };

  exports.isInteger = function(val) {
    return typeof val === 'number' && isFinite(val) && val > -9007199254740992 && val < 9007199254740992 && Math.floor(val) === val;
  };

  isPrimitive = exports.isPrimitive = function(val) {
    return val === null || typeof val === 'string' || typeof val === 'number' || typeof val === 'boolean' || typeof val === 'undefined';
  };

  isObject = exports.isObject = function(param) {
    return param !== null && typeof param === 'object';
  };

  exports.isPlainObject = function(param) {
    var proto;
    if (!isObject(param)) {
      return false;
    }
    proto = getPrototypeOf(param);
    if (!proto) {
      return true;
    }
    if ((proto === Object.prototype) && !getPrototypeOf(proto)) {
      return true;
    }
    return false;
  };

  exports.isArguments = function(param) {
    return toString.call(param) === '[object Arguments]';
  };

  merge = exports.merge = function(source, obj) {
    null;
    //<development>;
    var key, value;
    if (isPrimitive(source)) {
      throw new Error('utils.merge source cannot be primitive');
    }
    if (isPrimitive(obj)) {
      throw new Error('utils.merge object cannot be primitive');
    }
    if (source === obj) {
      throw new Error('utils.merge source and object are the same');
    }
    if (arguments.length > 2) {
      throw new Error('utils.merge expects only two arguments; ' + 'use utils.mergeAll instead');
    }
    //</development>;
    for (key in obj) {
      value = obj[key];
      if (hasOwnProp.call(obj, key)) {
        source[key] = value;
      }
    }
    return source;
  };

  exports.mergeAll = function(source) {
    null;
    //<development>;
    var i, j, obj, ref1;
    if (isPrimitive(source)) {
      throw new Error('utils.mergeAll source cannot be primitive');
    }
    //</development>;
    for (i = j = 1, ref1 = arguments.length; j < ref1; i = j += 1) {
      if ((obj = arguments[i]) != null) {
        //<development>;
        if (isPrimitive(obj)) {
          throw new Error('utils.mergeAll object cannot be primitive');
        }
        if (source === obj) {
          throw new Error('utils.mergeAll source and object are the same');
        }
        //</development>;
        merge(source, obj);
      }
    }
    return source;
  };

  mergeDeep = exports.mergeDeep = function(source, obj) {
    null;
    //<development>;
    var key, sourceValue, value;
    if (isPrimitive(source)) {
      throw new Error('utils.mergeDeep source cannot be primitive');
    }
    if (isPrimitive(obj)) {
      throw new Error('utils.mergeDeep object cannot be primitive');
    }
    if (source === obj) {
      throw new Error('utils.mergeDeep source and object are the same');
    }
    //</development>;
    if (isArray(source) && isArray(obj)) {
      Array.prototype.push.apply(source, obj);
    } else {
      for (key in obj) {
        value = obj[key];
        if (!(hasOwnProp.call(obj, key))) {
          continue;
        }
        sourceValue = source[key];
        if (isObject(value) && isObject(sourceValue)) {
          mergeDeep(sourceValue, value);
          continue;
        }
        source[key] = value;
      }
    }
    return source;
  };

  exports.mergeDeepAll = function(source) {
    null;
    //<development>;
    var i, j, obj, ref1;
    if (isPrimitive(source)) {
      throw new Error('utils.mergeDeepAll source cannot be primitive');
    }
    //</development>;
    for (i = j = 1, ref1 = arguments.length; j < ref1; i = j += 1) {
      if ((obj = arguments[i]) != null) {
        //<development>;
        if (isPrimitive(obj)) {
          throw new Error('utils.mergeDeepAll object cannot be primitive');
        }
        if (source === obj) {
          throw new Error('utils.mergeDeepAll source and object are the same');
        }
        //</development>;
        mergeDeep(source, obj);
      }
    }
    return source;
  };

  exports.fill = function(source, obj) {
    null;
    //<development>;
    var key, value;
    if (isPrimitive(source)) {
      throw new Error('utils.fill source cannot be primitive');
    }
    if (isPrimitive(obj)) {
      throw new Error('utils.fill object cannot be primitive');
    }
    if (source === obj) {
      throw new Error('utils.fill source and object are the same');
    }
    //</development>;
    for (key in obj) {
      value = obj[key];
      if (hasOwnProp.call(obj, key)) {
        if (key in source && !hasOwnProp.call(source, key)) {
          source[key] = value;
        }
      }
    }
    return source;
  };

  exports.remove = function(obj, elem) {
    null;
    //<development>;
    var index;
    if (isPrimitive(obj)) {
      throw new Error('utils.remove object cannot be primitive');
    }
    //</development>;
    if (isArray(obj)) {
      index = obj.indexOf(elem);
      if (index !== -1) {
        if (index === 0) {
          obj.shift();
        } else if (index === obj.length - 1) {
          obj.pop();
        } else {
          obj.splice(index, 1);
        }
      }
    } else {
      delete obj[elem];
    }
  };

  exports.removeFromUnorderedArray = function(arr, elem) {
    null;
    //<development>;
    var index;
    if (!Array.isArray(arr)) {
      throw new Error('utils.removeFromUnorderedArray array must be an Array');
    }
    //</development>;
    index = arr.indexOf(elem);
    if (index !== -1) {
      arr[index] = arr[arr.length - 1];
      arr.pop();
    }
  };

  exports.getPropertyDescriptor = function(obj, prop) {
    null;
    //<development>;
    var desc;
    if (isPrimitive(obj)) {
      throw new Error('utils.getPropertyDescriptor object cannot be primitive');
    }
    if (typeof prop !== 'string') {
      throw new Error('utils.getPropertyDescriptor property must be a string');
    }
    //</development>;
    while (obj && !desc) {
      desc = getObjOwnPropDesc(obj, prop);
      obj = getPrototypeOf(obj);
    }
    return desc;
  };

  exports.lookupGetter = (function() {
    var lookupGetter;
    if (Object.prototype.__lookupGetter__) {
      lookupGetter = Object.prototype.lookupGetter;
      (function(obj, prop) {
        var getter;
        getter = lookupGetter.call(obj, prop);
        return (getter != null ? getter.trueGetter : void 0) || getter;
      });
    }
    return function(obj, prop) {
      var desc, ref1;
      if (desc = exports.getPropertyDescriptor(obj, prop)) {
        return ((ref1 = desc.get) != null ? ref1.trueGetter : void 0) || desc.get;
      }
    };
  })();

  exports.lookupSetter = (function() {
    if (Object.prototype.__lookupSetter__) {
      return Function.call.bind(Object.prototype.__lookupSetter__);
    }
    return function(obj, prop) {
      var desc;
      desc = exports.getPropertyDescriptor(obj, prop);
      return desc != null ? desc.set : void 0;
    };
  })();

  defObjProp(exports, 'WRITABLE', {
    value: 1 << 0
  });

  defObjProp(exports, 'ENUMERABLE', {
    value: 1 << 1
  });

  defObjProp(exports, 'CONFIGURABLE', {
    value: 1 << 2
  });

  exports.defineProperty = (function() {
    var CONFIGURABLE, ENUMERABLE, WRITABLE, accessorsCfg, descCfg, isSafari, valueCfg;
    WRITABLE = exports.WRITABLE, ENUMERABLE = exports.ENUMERABLE, CONFIGURABLE = exports.CONFIGURABLE;
    descCfg = {
      enumerable: true,
      configurable: true
    };
    valueCfg = exports.merge({
      writable: true,
      value: null
    }, descCfg);
    accessorsCfg = exports.merge({
      get: void 0,
      set: void 0
    }, descCfg);
    isSafari = typeof navigator !== "undefined" && navigator !== null ? /^((?!chrome).)*safari/i.test(navigator.userAgent) : false;
    return function(obj, prop, desc, getter, setter) {
      null;
      //<development>;
      var _getter, cfg;
      if (isPrimitive(obj)) {
        throw new Error('utils.defineProperty object cannot be primitive');
      }
      if (typeof prop !== 'string') {
        throw new Error('utils.defineProperty property must be a string');
      }
      if ((desc != null) && (!exports.isInteger(desc) || desc < 0)) {
        throw new Error('utils.defineProperty descriptors bitmask ' + 'must be a positive integer');
      }
      //</development>;
      if (setter === void 0) {
        cfg = valueCfg;
        valueCfg.value = getter;
        valueCfg.writable = desc & WRITABLE;
      } else {
        if (isSafari && getter) {
          _getter = getter;
          getter = function() {
            if (this !== obj && this.hasOwnProperty(prop)) {
              return this[prop];
            } else {
              return _getter.call(this);
            }
          };
        }
        cfg = accessorsCfg;
        accessorsCfg.get = typeof getter === 'function' ? getter : void 0;
        accessorsCfg.set = typeof setter === 'function' ? setter : void 0;
      }
      cfg.enumerable = desc & ENUMERABLE;
      cfg.configurable = desc & CONFIGURABLE;
      defObjProp(obj, prop, cfg);
      return obj;
    };
  })();

  exports.overrideProperty = function(obj, prop, getter, setter) {
    var desc, opts, ref1;
    if (!(desc = exports.getPropertyDescriptor(obj, prop))) {
      throw new Error('utils.overrideProperty object ' + 'must has the given property');
    }
    if (!desc.configurable) {
      throw new Error('utils.overrideProperty the given property ' + 'is not configurable');
    }
    opts = exports.CONFIGURABLE;
    if (desc.writable) {
      opts |= exports.WRITABLE;
    }
    if (desc.enumerable) {
      opts |= exports.ENUMERABLE;
    }
    if (getter !== void 0 && setter !== void 0) {
      if (desc.get != null) {
        if (typeof getter === 'function') {
          getter = getter(desc.get);
        } else {
          getter = desc.get;
        }
      }
      if (desc.set != null) {
        if (typeof setter === 'function') {
          setter = setter(desc.set);
        } else {
          setter = desc.set;
        }
      }
    } else if ((typeof getter === (ref1 = typeof desc.value) && ref1 === 'function')) {
      getter = getter(desc.value);
    }
    return exports.defineProperty(obj, prop, opts, getter, setter);
  };

  clone = exports.clone = function(param) {
    var j, key, len, proto, ref1, result;
    if (isArray(param)) {
      return param.slice();
    }
    if (isObject(param)) {
      proto = getPrototypeOf(param);
      if (proto === Object.prototype) {
        result = {};
      } else {
        result = createObject(proto);
      }
      ref1 = objKeys(param);
      for (j = 0, len = ref1.length; j < len; j++) {
        key = ref1[j];
        result[key] = param[key];
      }
      return result;
    }
    return param;
  };

  cloneDeep = exports.cloneDeep = function(param) {
    var j, key, len, ref1, result;
    result = clone(param);
    if (isObject(result)) {
      ref1 = objKeys(result);
      for (j = 0, len = ref1.length; j < len; j++) {
        key = ref1[j];
        result[key] = cloneDeep(result[key]);
      }
    }
    return result;
  };

  exports.isEmpty = function(object) {
    var key;
    if (typeof object === 'string') {
      return object === '';
    }
    //<development>;
    if (isPrimitive(object)) {
      throw new Error('utils.isEmpty object must be a string or ' + 'not primitive');
    }
    //</development>;
    if (isArray(object)) {
      return !object.length;
    } else {
      for (key in object) {
        return false;
      }
      return true;
    }
  };

  exports.last = function(arg) {
    null;
    //<development>;
    if (isPrimitive(arg)) {
      throw new Error('utils.last array cannot be primitive');
    }
    //</development>;
    return arg[arg.length - 1];
  };

  exports.clear = function(obj) {
    null;
    //<development>;
    var _, j, k, key, len, ref1, ref2;
    if (isPrimitive(obj)) {
      throw new Error('utils.clear object cannot be primitive');
    }
    //</development>;
    if (isArray(obj)) {
      for (_ = j = 0, ref1 = obj.length; j < ref1; _ = j += 1) {
        obj.pop();
      }
    } else {
      ref2 = objKeys(obj);
      for (k = 0, len = ref2.length; k < len; k++) {
        key = ref2[k];
        delete obj[key];
      }
    }
    return obj;
  };

  setPrototypeOf = exports.setPrototypeOf = (function() {
    var tmp;
    if (typeof Object.setPrototypeOf === 'function') {
      return Object.setPrototypeOf;
    }
    tmp = {};
    tmp.__proto__ = {
      a: 1
    };
    if (tmp.a === 1) {
      return function(obj, proto) {
        null;
        //<development>;
        if (isPrimitive(obj)) {
          throw new Error('utils.setPrototypeOf object ' + 'cannot be primitive');
        }
        if ((proto != null) && isPrimitive(proto)) {
          throw new Error('utils.setPrototypeOf prototype ' + 'cannot be primitive');
        }
        //</development>;
        obj.__proto__ = proto;
        return obj;
      };
    }
    return function(obj, proto) {
      null;
      //<development>;
      var newObj;
      if (isPrimitive(obj)) {
        throw new Error('utils.setPrototypeOf object ' + 'cannot be primitive');
      }
      if ((proto != null) && isPrimitive(proto)) {
        throw new Error('utils.setPrototypeOf prototype ' + 'cannot be primitive');
      }
      //</development>;
      if (typeof obj === 'object') {
        newObj = createObject(proto);
        merge(newObj, obj);
      } else {
        merge(obj, proto);
      }
      return newObj;
    };
  })();

  has = exports.has = function(obj, val) {
    var key, value;
    if (typeof obj === 'string') {
      return !!~obj.indexOf(val);
    } else {
      //<development>;
      if (isPrimitive(obj)) {
        throw new Error('utils.has object must be a string or not primitive');
      }
      //</development>;
      if (isArray(obj)) {
        return !!~Array.prototype.indexOf.call(obj, val);
      } else {
        for (key in obj) {
          value = obj[key];
          if (hasOwnProp.call(obj, key)) {
            if (value === val) {
              return true;
            }
          }
        }
        return false;
      }
    }
  };

  exports.objectToArray = function(obj, valueGen, target) {
    var i, j, key, keys, len, value;
    keys = objKeys(obj);
    if (target == null) {
      target = keys;
    }
    //<development>;
    if (!isObject(obj)) {
      throw new Error('utils.objectToArray object must be an object');
    }
    if ((valueGen != null) && typeof valueGen !== 'function') {
      throw new Error('utils.objectToArray valueGen must be a function');
    }
    if (!isArray(target)) {
      throw new Error('utils.objectToArray target must be an array');
    }
    //</development>;
    for (i = j = 0, len = keys.length; j < len; i = ++j) {
      key = keys[i];
      value = valueGen ? valueGen(key, obj[key], obj) : obj[key];
      target[i] = value;
    }
    return target;
  };

  exports.arrayToObject = function(arr, keyGen, valueGen, target) {
    var elem, i, j, key, len, value;
    if (target == null) {
      target = {};
    }
    null;
    //<development>;
    if (!isArray(arr)) {
      throw new Error('utils.arrayToObject array must be an array');
    }
    if ((keyGen != null) && typeof keyGen !== 'function') {
      throw new Error('utils.arrayToObject keyGen must be a function');
    }
    if ((valueGen != null) && typeof valueGen !== 'function') {
      throw new Error('utils.arrayToObject valueGen must be a function');
    }
    if (!isObject(target)) {
      throw new Error('utils.arrayToObject target must be an object');
    }
    //</development>;
    for (i = j = 0, len = arr.length; j < len; i = ++j) {
      elem = arr[i];
      key = keyGen ? keyGen(i, elem, arr) : i;
      value = valueGen ? valueGen(i, elem, arr) : elem;
      if (key != null) {
        target[key] = value;
      }
    }
    return target;
  };

  exports.capitalize = function(str) {
    null;
    //<development>;
    if (typeof str !== 'string') {
      throw new Error('utils.capitalize string must be a string');
    }
    //</development>;
    if (!str.length) {
      return '';
    }
    return str[0].toUpperCase() + str.slice(1);
  };

  exports.addSlashes = (function() {
    var NEW_SUB_STR, SLASHES_RE;
    SLASHES_RE = /'|"/g;
    NEW_SUB_STR = '\\$\&';
    return function(str) {
      null;
      //<development>;
      if (typeof str !== 'string') {
        throw new Error('utils.addSlashes string must be a string');
      }
      //</development>;
      if (!str.length) {
        return str;
      }
      return str.replace(SLASHES_RE, NEW_SUB_STR);
    };
  })();

  exports.uid = function(n) {
    var str;
    if (n == null) {
      n = 8;
    }
    null;
    //<development>;
    if (typeof n !== 'number' || n <= 0 || !isFinite(n)) {
      throw new Error('utils.uid length must be a positive finite number');
    }
    //</development>;
    str = '';
    while (true) {
      str += random().toString(16).slice(2);
      if (str.length >= n) {
        break;
      }
    }
    if (str.length !== n) {
      str = str.slice(0, n);
    }
    return str;
  };

  exports.tryFunction = function(func, context, args, onFail) {
    null;
    //<development>;
    var err;
    if (typeof func !== 'function') {
      throw new Error('utils.tryFunction function must be a function');
    }
    if ((args != null) && !isObject(args)) {
      throw new Error('utils.tryFunction arguments must be an object');
    }
    //</development>;
    try {
      return func.apply(context, args);
    } catch (error1) {
      err = error1;
      if (typeof onFail === 'function') {
        return onFail(err);
      } else if (onFail === void 0) {
        return err;
      } else {
        return onFail;
      }
    }
  };

  exports.catchError = function(func, context, args) {
    null;
    //<development>;
    var err;
    if (typeof func !== 'function') {
      throw new Error('utils.catchError function must be a function');
    }
    if ((args != null) && !isObject(args)) {
      throw new Error('utils.catchError arguments must be an object');
    }
    //</development>;
    try {
      func.apply(context, args);
    } catch (error1) {
      err = error1;
      return err;
    }
  };

  exports.bindFunctionContext = function(func, ctx) {
    null;
    //<development>;
    if (typeof func !== 'function') {
      throw new Error('utils.bindFunctionContext function must be a function');
    }
    //</development>;
    switch (func.length) {
      case 0:
        return function() {
          return func.call(ctx);
        };
      case 1:
        return function(a1) {
          return func.call(ctx, a1);
        };
      case 2:
        return function(a1, a2) {
          return func.call(ctx, a1, a2);
        };
      case 3:
        return function(a1, a2, a3) {
          return func.call(ctx, a1, a2, a3);
        };
      case 4:
        return function(a1, a2, a3, a4) {
          return func.call(ctx, a1, a2, a3, a4);
        };
      case 5:
        return function(a1, a2, a3, a4, a5) {
          return func.call(ctx, a1, a2, a3, a4, a5);
        };
      case 6:
        return function(a1, a2, a3, a4, a5, a6) {
          return func.call(ctx, a1, a2, a3, a4, a5, a6);
        };
      case 7:
        return function(a1, a2, a3, a4, a5, a6, a7) {
          return func.call(ctx, a1, a2, a3, a4, a5, a6, a7);
        };
      default:
        return function() {
          return func.apply(ctx, arguments);
        };
    }
  };

  exports.errorToObject = function(error) {
    null;
    //<development>;
    var result;
    if (!isObject(error)) {
      throw new Error('utils.errorToObject error must be an object');
    }
    //</development>;
    result = {
      name: error.name,
      message: error.message
    };
    exports.merge(result, error);
    return result;
  };

  exports.getOwnProperties = function(obj) {
    null;
    //<development>;
    var result;
    if (!isObject(obj)) {
      throw new Error('utils.getOwnProperties object must be an object');
    }
    //</development>;
    result = isArray(obj) ? [] : {};
    merge(result, obj);
    return result;
  };

  exports.deprecate = function(func, msg) {
    var deprecated, warned;
    warned = false;
    deprecated = function() {
      if (!warned) {
        log.warn(msg);
        warned = true;
      }
      return func.apply(this, arguments);
    };
    return deprecated;
  };

  isEqual = exports.isEqual = (function() {
    var defaultComparison, forArrays, forObjects;
    defaultComparison = function(a, b) {
      return a === b;
    };
    forArrays = function(a, b, compareFunc, maxDeep) {
      var aValue, bValue, index, j, len;
      if (getPrototypeOf(a) !== getPrototypeOf(b)) {
        return false;
      }
      if (a.length !== b.length) {
        return false;
      }
      if (maxDeep <= 0) {
        return true;
      }
      for (index = j = 0, len = a.length; j < len; index = ++j) {
        aValue = a[index];
        bValue = b[index];
        if (bValue && typeof bValue === 'object') {
          if (!isEqual(aValue, bValue, compareFunc, maxDeep - 1)) {
            return false;
          }
          continue;
        }
        if (!compareFunc(aValue, bValue)) {
          return false;
        }
      }
      return true;
    };
    forObjects = function(a, b, compareFunc, maxDeep) {
      var key, value;
      if (getPrototypeOf(a) !== getPrototypeOf(b)) {
        return false;
      }
      for (key in a) {
        value = a[key];
        if (a.hasOwnProperty(key)) {
          if (!b.hasOwnProperty(key)) {
            return false;
          }
        }
      }
      for (key in b) {
        value = b[key];
        if (b.hasOwnProperty(key)) {
          if (!a.hasOwnProperty(key)) {
            return false;
          }
        }
      }
      if (maxDeep <= 0) {
        return true;
      }
      for (key in a) {
        value = a[key];
        if (!(a.hasOwnProperty(key))) {
          continue;
        }
        if (value && typeof value === 'object') {
          if (!isEqual(value, b[key], compareFunc, maxDeep - 1)) {
            return false;
          }
          continue;
        }
        if (!compareFunc(value, b[key])) {
          return false;
        }
      }
      return true;
    };
    return function(a, b, compareFunc, maxDeep) {
      if (compareFunc == null) {
        compareFunc = defaultComparison;
      }
      if (maxDeep == null) {
        maxDeep = 2e308;
      }
      if (typeof compareFunc === 'number') {
        maxDeep = compareFunc;
        compareFunc = defaultComparison;
      }
      //<development>;
      if (typeof compareFunc !== 'function') {
        throw new Error('utils.isEqual compareFunction must be a function');
      }
      if (typeof maxDeep !== 'number') {
        throw new Error('utils.isEqual maxDeep must be a number');
      }
      //</development>;
      if (maxDeep < 0) {
        return compareFunc(a, b);
      }
      if (isArray(a) && isArray(b)) {
        return forArrays(a, b, compareFunc, maxDeep);
      } else if (isObject(a) && isObject(b)) {
        return forObjects(a, b, compareFunc, maxDeep);
      } else {
        return compareFunc(a, b);
      }
    };
  })();

  exports.snakeToCamel = (function() {
    var regex, replacer;
    regex = /(_\w)/g;
    replacer = function(matches) {
      return matches[1].toUpperCase();
    };
    return function(value) {
      //<development>;
      if (typeof value !== 'string') {
        throw new Error('utils.snakeToCamel value must be a string');
      }
      //</development>;
      return value.replace(regex, replacer);
    };
  })();

  exports.kebabToCamel = (function() {
    var regex, replacer;
    regex = /(\-\w)/g;
    replacer = function(matches) {
      return matches[1].toUpperCase();
    };
    return function(value) {
      //<development>;
      if (typeof value !== 'string') {
        throw new Error('utils.kebabToCamel value must be a string');
      }
      //</development>;
      return value.replace(regex, replacer);
    };
  })();

  exports.camelToKebab = (function() {
    var regex;
    regex = /([a-z])([A-Z])/g;
    return function(value) {
      //<development>;
      if (typeof value !== 'string') {
        throw new Error('utils.camelToKebab value must be a string');
      }
      //</development>;
      return value.replace(regex, '$1-$2').toLowerCase();
    };
  })();

  Object.freeze(exports);

}).call(this);

},{"../log":"../../../node_modules/@neft/core/src/log/index.litcoffee","./namespace":"../../../node_modules/@neft/core/src/util/namespace.litcoffee","./stringifying":"../../../node_modules/@neft/core/src/util/stringifying.litcoffee","./async":"../../../node_modules/@neft/core/src/util/async.litcoffee"}],"../../../node_modules/@neft/core/src/signal/emitter.js":[function(require,module,exports) {
const util = require('../util')
const { Signal, callListeners } = require('./signal')
const { InternalSignalDispatcher } = require('./dispatcher')

function SignalsEmitter() {
  util.defineProperty(this, '_signals', null, {})
}

util.defineProperty(SignalsEmitter.prototype, 'emit', null, function (name, arg1, arg2) {
  const listeners = this._signals[name]
  if (!listeners) return
  callListeners(this, listeners, arg1, arg2)
})

class EmitterSharedSignal extends Signal {
  asSignalDispatcher() {
    return new InternalSignalDispatcher(this.listeners)
  }
}

const sharedSignal = new EmitterSharedSignal()

SignalsEmitter.createSignal = (target, name, onInitialized) => {
  const object = typeof target === 'function' ? target.prototype : target
  const getter = function () {
    const signals = this._signals
    if (!signals) return null
    let listeners = signals[name]
    if (!listeners) {
      listeners = [null, null, null, null]
      signals[name] = listeners
      if (typeof onInitialized === 'function') {
        onInitialized(this, name)
      }
    }
    sharedSignal.listeners = listeners
    return sharedSignal
  }
  util.defineProperty(object, name, null, getter, null)
}

exports.SignalsEmitter = SignalsEmitter

},{"../util":"../../../node_modules/@neft/core/src/util/index.litcoffee","./signal":"../../../node_modules/@neft/core/src/signal/signal.js","./dispatcher":"../../../node_modules/@neft/core/src/signal/dispatcher.js"}],"../../../node_modules/@neft/core/src/signal/index.js":[function(require,module,exports) {
const { SignalDispatcher } = require('./dispatcher')
const { SignalsEmitter } = require('./emitter')

exports.SignalDispatcher = SignalDispatcher
exports.SignalsEmitter = SignalsEmitter

},{"./dispatcher":"../../../node_modules/@neft/core/src/signal/dispatcher.js","./emitter":"../../../node_modules/@neft/core/src/signal/emitter.js"}],"../../../node_modules/@neft/core/src/assert/index.litcoffee":[function(require,module,exports) {
(function() {
  'use strict';
  var AssertionError, assert, createFailFunction, utils,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  utils = require('../util');

  assert = module.exports = function(expr, msg) {
    if (!expr) {
      return assert.fail(expr, true, msg, '==', assert);
    }
  };

  assert.AssertionError = AssertionError = (function(superClass) {
    var valueToString;

    extend(AssertionError, superClass);

    valueToString = function(value) {
      var result;
      if (utils.isObject(value)) {
        result = (function() {
          try {
            return JSON.stringify(value);
          } catch (error1) {}
        })();
      }
      return result || String(value);
    };

    AssertionError.generateMessage = function(error, msg) {
      return msg || ((valueToString(error.actual)) + " " + error.operator + " " + (valueToString(error.expected)));
    };

    function AssertionError(opts) {
      AssertionError.__super__.constructor.call(this);
      this.name = 'AssertionError';
      this.actual = opts.actual;
      this.expected = opts.expected;
      this.operator = opts.operator;
      this.scope = opts.scope;
      this.message = AssertionError.generateMessage(this, opts.message);
      if (typeof Error.captureStackTrace === "function") {
        Error.captureStackTrace(this, opts.stackStartFunction);
      }
    }

    return AssertionError;

  })(Error);

  createFailFunction = function(assert) {
    var func;
    return func = function(actual, expected, msg, operator, stackStartFunction) {
      throw new assert.AssertionError({
        actual: actual,
        expected: expected,
        message: msg,
        operator: operator,
        scope: assert._scope,
        stackStartFunction: stackStartFunction || func
      });
    };
  };

  assert.scope = function(msg) {
    var func;
    msg = "" + this._scope + msg;
    func = function(expr, msg) {
      return assert(expr, msg);
    };
    utils.merge(func, assert);
    func.fail = createFailFunction(func);
    func._scope = msg;
    return func;
  };

  assert.fail = createFailFunction(assert);

  assert._scope = '';

  assert.ok = assert;

  assert.notOk = function(expr, msg) {
    if (expr) {
      return this.fail(expr, true, msg, '!=', assert.notOk);
    }
  };

  assert.is = function(actual, expected, msg) {
    if (!utils.is(actual, expected)) {
      return this.fail(actual, expected, msg, '===', assert.is);
    }
  };

  assert.isNot = function(actual, expected, msg) {
    if (utils.is(actual, expected)) {
      return this.fail(actual, expected, msg, '!==', assert.isNot);
    }
  };

  assert.isDefined = function(val, msg) {
    if (val == null) {
      return this.fail(val, null, msg, '!=', assert.isDefined);
    }
  };

  assert.isNotDefined = function(val, msg) {
    if (val != null) {
      return this.fail(val, null, msg, '==', assert.isNotDefined);
    }
  };

  assert.isPrimitive = function(val, msg) {
    if (!utils.isPrimitive(val)) {
      return this.fail(val, 'primitive', msg, 'is', assert.isPrimitive);
    }
  };

  assert.isNotPrimitive = function(val, msg) {
    if (utils.isPrimitive(val)) {
      return this.fail(val, 'primitive', msg, 'isn\'t', assert.isNotPrimitive);
    }
  };

  assert.isString = function(val, msg) {
    if (typeof val !== 'string') {
      return this.fail(val, 'string', msg, 'is', assert.isString);
    }
  };

  assert.isNotString = function(val, msg) {
    if (typeof val === 'string') {
      return this.fail(val, 'string', msg, 'isn\'t', assert.isNotString);
    }
  };

  assert.isFloat = function(val, msg) {
    if (!utils.isFloat(val)) {
      return this.fail(val, 'float', msg, 'is', assert.isFloat);
    }
  };

  assert.isNotFloat = function(val, msg) {
    if (utils.isFloat(val)) {
      return this.fail(val, 'float', msg, 'isn\'t', assert.isNotFloat);
    }
  };

  assert.isInteger = function(val, msg) {
    if (!utils.isInteger(val)) {
      return this.fail(val, 'integer', msg, 'is', assert.isInteger);
    }
  };

  assert.isNotInteger = function(val, msg) {
    if (utils.isInteger(val)) {
      return this.fail(val, 'integer', msg, 'isn\'t', assert.isNotInteger);
    }
  };

  assert.isBoolean = function(val, msg) {
    if (typeof val !== 'boolean') {
      return this.fail(val, 'boolean', msg, 'is', assert.isBoolean);
    }
  };

  assert.isNotBoolean = function(val, msg) {
    if (typeof val === 'boolean') {
      return this.fail(val, 'boolean', msg, 'isn\'t', assert.isNotBoolean);
    }
  };

  assert.isFunction = function(val, msg) {
    if (typeof val !== 'function') {
      return this.fail(val, 'function', msg, 'is', assert.isFunction);
    }
  };

  assert.isNotFunction = function(val, msg) {
    if (typeof val === 'function') {
      return this.fail(val, 'function', msg, 'isn\'t', assert.isNotFunction);
    }
  };

  assert.isObject = function(val, msg) {
    if (val === null || typeof val !== 'object') {
      return this.fail(val, 'object', msg, 'is', assert.isObject);
    }
  };

  assert.isNotObject = function(val, msg) {
    if (val !== null && typeof val === 'object') {
      return this.fail(val, 'object', msg, 'isn\'t', assert.isNotObject);
    }
  };

  assert.isPlainObject = function(val, msg) {
    if (!utils.isPlainObject(val)) {
      return this.fail(val, 'plain object', msg, 'is', assert.isPlainObject);
    }
  };

  assert.isNotPlainObject = function(val, msg) {
    if (utils.isPlainObject(val)) {
      return this.fail(val, 'plain object', msg, 'isn\'t', assert.isNotPlainObject);
    }
  };

  assert.isArray = function(val, msg) {
    if (!Array.isArray(val)) {
      return this.fail(val, 'array', msg, 'is', assert.isArray);
    }
  };

  assert.isNotArray = function(val, msg) {
    if (Array.isArray(val)) {
      return this.fail(val, 'array', msg, 'isn\'t', assert.isNotArray);
    }
  };

  assert.isEqual = function(val1, val2, msg, opts) {
    if (typeof msg === 'object') {
      opts = msg;
      msg = void 0;
    }
    if (!utils.isEqual(val1, val2, opts != null ? opts.maxDeep : void 0)) {
      return this.fail(val1, val2, msg, 'equal', assert.isEqual);
    }
  };

  assert.isNotEqual = function(val1, val2, msg, opts) {
    if (typeof msg === 'object') {
      opts = msg;
      msg = void 0;
    }
    if (utils.isEqual(val1, val2, opts != null ? opts.maxDeep : void 0)) {
      return this.fail(val1, val2, msg, 'isn\'t equal', assert.isNotEqual);
    }
  };

  assert.instanceOf = function(val, ctor, msg) {
    var ctorName;
    if (!(val instanceof ctor)) {
      ctorName = ctor.__path__ || ctor.__name__ || ctor.name || ctor;
      return this.fail(val, ctorName, msg, 'instanceof', assert.instanceOf);
    }
  };

  assert.notInstanceOf = function(val, ctor, msg) {
    var ctorName;
    if (val instanceof ctor) {
      ctorName = ctor.__path__ || ctor.__name__ || ctor.name || ctor;
      return this.fail(val, ctorName, msg, 'instanceof', assert.notInstanceOf);
    }
  };

  assert.lengthOf = function(val, length, msg) {
    if ((val != null ? val.length : void 0) !== length) {
      return this.fail(val, length, msg, '.length ===', assert.lengthOf);
    }
  };

  assert.notLengthOf = function(val, length, msg) {
    if ((val != null ? val.length : void 0) === length) {
      return this.fail(val, length, msg, '.length !==', assert.notLengthOf);
    }
  };

  assert.operator = function(val1, operator, val2, msg) {
    var pass;
    pass = (function() {
      switch (operator) {
        case '>':
          return val1 > val2;
        case '>=':
          return val1 >= val2;
        case '<':
          return val1 < val2;
        case '<=':
          return val1 <= val2;
        default:
          throw new TypeError("Unexpected operator `" + operator + "`");
      }
    })();
    if (!pass) {
      return this.fail(val1, val2, msg, operator, assert.operator);
    }
  };

  assert.match = function(val, regexp, msg) {
    if (!regexp.test(val)) {
      return this.fail(val, regexp, msg, 'match', assert.match);
    }
  };

  assert.notMatch = function(val, regexp, msg) {
    if (regexp.test(val)) {
      return this.fail(val, regexp, msg, 'not match', assert.match);
    }
  };

}).call(this);

},{"../util":"../../../node_modules/@neft/core/src/util/index.litcoffee"}],"../../../node_modules/@neft/core/src/event-loop/index.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  var assert, immediate, log, pending;

  assert = require('../assert');

  log = require('../log');

  immediate = [];

  pending = 0;

  exports.lock = function() {
    return pending += 1;
  };

  exports.release = function() {
    var error;
    pending -= 1;
    assert.ok(pending >= 0);
    if (pending === 0 && immediate.length > 0) {
      exports.lock();
      while (immediate.length > 0) {
        try {
          immediate.shift()();
        } catch (error1) {
          error = error1;
          log.error('Uncaught error when executing event-loop', error);
        }
      }
      exports.release();
    }
  };

  exports.callInLock = function(func, ctx, args) {
    var result;
    exports.lock();
    try {
      result = func.apply(ctx, args);
    } finally {
      exports.release();
    }
    return result;
  };

  exports.bindInLock = function(func) {
    return function() {
      var result;
      exports.lock();
      try {
        result = func.apply(this, arguments);
      } finally {
        exports.release();
      }
      return result;
    };
  };

  exports.setImmediate = function(callback) {
    var error;
    assert.isFunction(callback, "eventLoop.setImmediate callback must be a function, but " + callback + " given");
    if (pending === 0) {
      exports.lock();
      try {
        callback();
      } catch (error1) {
        error = error1;
        log.error('Uncaught error during setImmediate in the event-loop', error);
      }
      exports.release();
    } else {
      immediate.push(callback);
    }
  };

}).call(this);

},{"../assert":"../../../node_modules/@neft/core/src/assert/index.litcoffee","../log":"../../../node_modules/@neft/core/src/log/index.litcoffee"}],"../../../node_modules/@neft/core/src/renderer/impl/base/level0/item/pointer.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  var cos, eventLoop, isPointInBox, sin, utils;

  utils = require('../../../../../util');

  eventLoop = require('../../../../../event-loop');

  sin = Math.sin, cos = Math.cos;

  isPointInBox = function(ex, ey, x, y, w, h) {
    return ex >= x && ey >= y && ex < x + w && ey < y + h;
  };

  module.exports = function(impl) {
    var CLICK, ENTER, EVENTS, EXIT, MOVE, PRESS, PROPAGATE_UP, RELEASE, STOP_ASIDE_PROPAGATION, STOP_PROPAGATION, WHEEL, captureItems, hoverItems, i, itemsToMove, itemsToRelease, pressedItems;
    PROPAGATE_UP = 1 << 0;
    STOP_ASIDE_PROPAGATION = 1 << 1;
    STOP_PROPAGATION = 1 << 2;
    captureItems = (function() {
      var checkItem;
      checkItem = function(item, ex, ey, onItem, parentX, parentY, parentScale) {
        var child, data, fullScale, h, itemX, itemY, pointer, rcos, result, rey, rotation, rsin, scale, t1, t2, w, x, y;
        result = 0;
        x = y = w = h = scale = rotation = t1 = t2 = rey = rsin = rcos = 0.0;
        if (!item._visible) {
          return result;
        }
        data = item._impl;
        pointer = item._pointer;
        if (pointer && !pointer._enabled) {
          return result;
        }
        x = parentX + item._x * parentScale;
        y = parentY + item._y * parentScale;
        w = item._width * parentScale;
        h = item._height * parentScale;
        scale = item._scale;
        rotation = item._rotation;
        fullScale = scale * parentScale;
        if (scale !== 1) {
          t1 = w * scale;
          t2 = h * scale;
          x += (w - t1) / 2;
          y += (h - t2) / 2;
          w = t1;
          h = t2;
        }
        if (rotation !== 0) {
          rsin = sin(-rotation);
          rcos = cos(-rotation);
          t1 = x + w / 2;
          t2 = y + h / 2;
          rey = rcos * (ex - t1) - rsin * (ey - t2) + t1;
          ey = rsin * (ex - t1) + rcos * (ey - t2) + t2;
          ex = rey;
        }
        if (item._clip && !isPointInBox(ex, ey, x, y, w, h)) {
          return result;
        }
        if (!(result & STOP_ASIDE_PROPAGATION)) {
          if (item._children) {
            child = item._children.topChild;
            while (child) {
              result = checkItem(child, ex, ey, onItem, x, y, fullScale);
              if (result & STOP_PROPAGATION) {
                return result;
              }
              if (result & STOP_ASIDE_PROPAGATION) {
                break;
              }
              child = child.belowSibling;
            }
          }
        }
        if (result & PROPAGATE_UP || isPointInBox(ex, ey, x, y, w, h)) {
          itemX = (ex - x) / fullScale;
          itemY = (ey - y) / fullScale;
          result = onItem(item, itemX, itemY);
        }
        return result;
      };
      return function(item, ex, ey, onItem) {
        if (item) {
          return checkItem(item, ex, ey, onItem, 0, 0, 1);
        }
        return 0;
      };
    })();
    itemsToRelease = [];
    itemsToMove = [];
    pressedItems = [];
    hoverItems = [];
    impl.Renderer.onReady.connect(function() {
      var Device, event, getEventStatus;
      Device = impl.Renderer.Device;
      event = impl.Renderer.Item.Pointer.event;
      getEventStatus = function() {
        if (event._checkSiblings) {
          return PROPAGATE_UP;
        } else {
          return PROPAGATE_UP | STOP_ASIDE_PROPAGATION;
        }
      };
      Device.onPointerPress.connect((function() {
        var onItem;
        onItem = function(item, itemX, itemY) {
          var capturePointer;
          capturePointer = item._impl.capturePointer;
          if (capturePointer & CLICK) {
            pressedItems.push(item);
          }
          if (capturePointer & PRESS) {
            event._ensureRelease = true;
            event._ensureMove = true;
            event._itemX = itemX;
            event._itemY = itemY;
            item.pointer.emit('onPress', event);
            if (event._ensureRelease) {
              itemsToRelease.push(item);
            }
            if (event._ensureMove) {
              itemsToMove.push(item);
            }
            if (event._stopPropagation) {
              return STOP_PROPAGATION;
            }
          }
          return getEventStatus();
        };
        return eventLoop.bindInLock(function(e) {
          event._stopPropagation = false;
          event._checkSiblings = false;
          event._preventClick = false;
          captureItems(impl.windowItem, e._x, e._y, onItem);
        });
      })());
      Device.onPointerRelease.connect((function() {
        var onItem;
        onItem = function(item, itemX, itemY) {
          var capturePointer, data, index;
          data = item._impl;
          capturePointer = data.capturePointer;
          if (capturePointer & (RELEASE | PRESS | CLICK)) {
            event._itemX = itemX;
            event._itemY = itemY;
          }
          if (capturePointer & RELEASE) {
            item._pointer.emit('onRelease', event);
          }
          if (capturePointer & PRESS) {
            index = itemsToRelease.indexOf(item);
            if (index >= 0) {
              itemsToRelease[index] = null;
            }
          }
          if (capturePointer & CLICK && !event._preventClick) {
            if (utils.has(pressedItems, item)) {
              item.pointer.emit('onClick', event);
            }
          }
          if (capturePointer & (RELEASE | CLICK)) {
            if (event._stopPropagation) {
              return STOP_PROPAGATION;
            }
          }
          return getEventStatus();
        };
        return eventLoop.bindInLock(function(e) {
          var data, item, j;
          event._stopPropagation = false;
          event._checkSiblings = false;
          captureItems(impl.windowItem, e._x, e._y, onItem);
          event._itemX = -1;
          event._itemY = -1;
          if (impl.Renderer.Screen.touch) {
            while (item = hoverItems.pop()) {
              data = item._impl;
              data.pointerHover = false;
              data.pointerMoveFlag = 0;
              item.pointer.emit('onExit', event);
            }
          }
          if (!event._stopPropagation) {
            for (j = itemsToRelease.length - 1; j >= 0; j += -1) {
              item = itemsToRelease[j];
              if (item) {
                item.pointer.emit('onRelease', event);
                if (event._stopPropagation) {
                  break;
                }
              }
            }
          }
          utils.clear(itemsToRelease);
          utils.clear(itemsToMove);
          utils.clear(pressedItems);
        });
      })());
      Device.onPointerMove.connect((function() {
        var flag, onItem;
        flag = 0;
        onItem = function(item, itemX, itemY) {
          var capturePointer, data;
          data = item._impl;
          capturePointer = data.capturePointer;
          if (capturePointer & (ENTER | EXIT | MOVE)) {
            data.pointerMoveFlag = flag;
            event._itemX = itemX;
            event._itemY = itemY;
          }
          if (capturePointer & (ENTER | EXIT) && !data.pointerHover) {
            data.pointerHover = true;
            hoverItems.push(item);
            item.pointer.emit('onEnter', event);
          }
          if (capturePointer & MOVE) {
            item._pointer.emit('onMove', event);
          }
          if (capturePointer & (ENTER | EXIT | MOVE)) {
            if (event._stopPropagation) {
              return STOP_PROPAGATION;
            }
          }
          return getEventStatus();
        };
        return eventLoop.bindInLock(function(e) {
          var data, i, item, j, k, l, len, len1;
          event._stopPropagation = false;
          event._checkSiblings = false;
          flag = (flag % 2) + 1;
          captureItems(impl.windowItem, e._x, e._y, onItem);
          event._itemX = -1;
          event._itemY = -1;
          for (j = 0, len = itemsToMove.length; j < len; j++) {
            item = itemsToMove[j];
            if (event._stopPropagation) {
              break;
            }
            data = item._impl;
            if (data.pointerMoveFlag !== flag) {
              item.pointer.emit('onMove', event);
            }
          }
          for (i = k = hoverItems.length - 1; k >= 0; i = k += -1) {
            item = hoverItems[i];
            data = item._impl;
            if (data.pointerHover && data.pointerMoveFlag !== flag) {
              data.pointerHover = false;
              data.pointerMoveFlag = 0;
              hoverItems.splice(i, 1);
              item.pointer.emit('onExit', event);
            }
          }
          for (l = 0, len1 = itemsToMove.length; l < len1; l++) {
            item = itemsToMove[l];
            data = item._impl;
            if (data.pointerMoveFlag !== flag) {
              data.pointerMoveFlag = flag;
            }
          }
        });
      })());
      return Device.onPointerWheel.connect((function() {
        var onItem;
        onItem = function(item, itemX, itemY) {
          var pointer;
          event._stopPropagation = true;
          if (item._impl.capturePointer & WHEEL) {
            if ((pointer = item._pointer) && !pointer.onWheel.isEmpty()) {
              event._itemX = itemX;
              event._itemY = itemY;
              pointer.emit('onWheel', event);
              if (event._stopPropagation) {
                return STOP_PROPAGATION;
              }
            }
          }
          return getEventStatus();
        };
        return eventLoop.bindInLock(function(e) {
          event._checkSiblings = false;
          captureItems(impl.windowItem, e._x, e._y, onItem);
        });
      })());
    });
    i = 0;
    return {
      EVENTS: EVENTS = {
        onPress: PRESS = 1 << i++,
        onRelease: RELEASE = 1 << i++,
        onMove: MOVE = 1 << i++,
        onWheel: WHEEL = 1 << i++,
        onClick: CLICK = 1 << i++,
        onEnter: ENTER = 1 << i++,
        onExit: EXIT = 1 << i++
      },
      DATA: {
        pointerHover: false,
        pointerMoveFlag: 0,
        capturePointer: 0
      },
      attachItemSignal: function(signal) {
        var data, eventId, item;
        item = this._ref;
        data = item._impl;
        if (!(eventId = EVENTS[signal])) {
          return;
        }
        data.capturePointer |= eventId;
      },
      setItemPointerEnabled: function(val) {},
      setItemPointerDraggable: function(val) {},
      setItemPointerDragActive: function(val) {}
    };
  };

}).call(this);

},{"../../../../../util":"../../../node_modules/@neft/core/src/util/index.litcoffee","../../../../../event-loop":"../../../node_modules/@neft/core/src/event-loop/index.coffee"}],"../../../node_modules/@neft/core/src/typed-array/index.litcoffee":[function(require,module,exports) {
(function() {
  'use strict';
  var polyfill;

  polyfill = function(n) {
    var arr, i, j, ref;
    arr = new Array(n);
    for (i = j = 0, ref = n; j < ref; i = j += 1) {
      arr[i] = 0;
    }
    return arr;
  };

  exports.Int8 = (function() {
    if (typeof Int8Array !== 'undefined') {
      return Int8Array;
    } else {
      return polyfill;
    }
  })();

  exports.Uint8 = (function() {
    if (typeof Uint8Array !== 'undefined') {
      return Uint8Array;
    } else {
      return polyfill;
    }
  })();

  exports.Int16 = (function() {
    if (typeof Int16Array !== 'undefined') {
      return Int16Array;
    } else {
      return polyfill;
    }
  })();

  exports.Uint16 = (function() {
    if (typeof Uint16Array !== 'undefined') {
      return Uint16Array;
    } else {
      return polyfill;
    }
  })();

  exports.Int32 = (function() {
    if (typeof Int32Array !== 'undefined') {
      return Int32Array;
    } else {
      return polyfill;
    }
  })();

  exports.Uint32 = (function() {
    if (typeof Uint32Array !== 'undefined') {
      return Uint32Array;
    } else {
      return polyfill;
    }
  })();

  exports.Float32 = (function() {
    if (typeof Float32Array !== 'undefined') {
      return Float32Array;
    } else {
      return polyfill;
    }
  })();

  exports.Float64 = (function() {
    if (typeof Float64Array !== 'undefined') {
      return Float64Array;
    } else {
      return polyfill;
    }
  })();

}).call(this);

},{}],"../../../node_modules/@neft/core/src/renderer/impl/base/level0/item/layout/flow.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  var MAX_LOOPS, TypedArray, clean, cleanPending, cleanQueue, elementsBottomMargin, elementsRow, elementsX, elementsY, eventLoop, getArray, getCleanArray, log, max, min, pending, queue, queueIndex, queues, rowsFills, rowsHeight, rowsWidth, unusedFills, update, updateItem, updateItems, updateSize, utils;

  utils = require('../../../../../../util');

  log = require('../../../../../../log');

  eventLoop = require('../../../../../../event-loop');

  TypedArray = require('../../../../../../typed-array');

  log = log.scope('Renderer', 'Flow');

  MAX_LOOPS = 150;

  min = function(a, b) {
    if (a < b) {
      return a;
    } else {
      return b;
    }
  };

  max = function(a, b) {
    if (a > b) {
      return a;
    } else {
      return b;
    }
  };

  getArray = function(arr, len) {
    if (arr.length < len) {
      return new arr.constructor(len * 1.4 | 0);
    } else {
      return arr;
    }
  };

  getCleanArray = function(arr, len) {
    var i, j, newArr, ref;
    newArr = getArray(arr, len);
    if (newArr === arr) {
      for (i = j = 0, ref = len; j < ref; i = j += 1) {
        arr[i] = 0;
      }
      return arr;
    } else {
      return newArr;
    }
  };

  queueIndex = 0;

  queues = [[], []];

  queue = queues[queueIndex];

  pending = false;

  rowsWidth = new TypedArray.Float64(64);

  rowsHeight = new TypedArray.Float64(64);

  elementsX = new TypedArray.Float64(64);

  elementsY = new TypedArray.Float64(64);

  elementsRow = new TypedArray.Float64(64);

  elementsBottomMargin = new TypedArray.Float64(64);

  rowsFills = new TypedArray.Uint8(64);

  unusedFills = new TypedArray.Uint8(64);

  updateItem = function(item) {
    var alignH, alignV, anchors, autoHeight, autoWidth, bottom, bottomMargin, bottomPadding, cell, child, children, columnSpacing, currentRow, currentRowBottomMargin, currentRowY, currentYShift, data, firstChild, flowHeight, flowWidth, freeHeightSpace, height, i, j, lastColumnRightMargin, lastRowBottomMargin, leftMargin, leftPadding, length, margin, maxFlowWidth, maxLen, multiplierX, multiplierY, nextChild, padding, perCell, plusY, ref, right, rightMargin, rightPadding, row, rowSpacing, rowsFillsSum, topMargin, topPadding, update, visibleChildrenIndex, width, x, y, yShift;
    children = item._children;
    firstChild = children.firstChild;
    data = item._impl;
    autoWidth = data.autoWidth, autoHeight = data.autoHeight;
    autoWidth && (autoWidth = !item._fillWidth);
    autoHeight && (autoHeight = !item._fillHeight);
    if (data.loops === MAX_LOOPS) {
      log.error("Potential Flow loop detected. Recalculating on this item (" + (item.toString()) + ") has been disabled.");
      data.loops++;
      return;
    } else if (data.loops > MAX_LOOPS) {
      return;
    }
    if (padding = item._padding) {
      topPadding = padding._top;
      rightPadding = padding._right;
      bottomPadding = padding._bottom;
      leftPadding = padding._left;
    } else {
      topPadding = rightPadding = bottomPadding = leftPadding = 0;
    }
    maxFlowWidth = autoWidth ? 2e308 : item._width - leftPadding - rightPadding;
    columnSpacing = item.spacing.column;
    rowSpacing = item.spacing.row;
    if (item._alignment) {
      alignH = item._alignment._horizontal;
      alignV = item._alignment._vertical;
    } else {
      alignH = 'left';
      alignV = 'top';
    }
    maxLen = children.length;
    rowsFills = getCleanArray(rowsFills, maxLen);
    if (elementsX.length < maxLen) {
      maxLen *= 1.5;
      rowsWidth = getArray(rowsWidth, maxLen);
      rowsHeight = getArray(rowsHeight, maxLen);
      elementsX = getArray(elementsX, maxLen);
      elementsY = getArray(elementsY, maxLen);
      elementsRow = getArray(elementsRow, maxLen);
      elementsBottomMargin = getArray(elementsBottomMargin, maxLen);
    }
    flowWidth = flowHeight = 0;
    currentRow = currentRowY = 0;
    lastColumnRightMargin = lastRowBottomMargin = currentRowBottomMargin = 0;
    x = y = right = bottom = 0;
    rowsFillsSum = visibleChildrenIndex = 0;
    nextChild = firstChild;
    i = -1;
    while (child = nextChild) {
      i += 1;
      nextChild = child.nextSibling;
      margin = child._margin;
      anchors = child._anchors;
      width = child._width;
      height = child._height;
      if (!child._visible || (anchors && anchors._runningCount)) {
        continue;
      }
      if (margin) {
        topMargin = margin._top;
        rightMargin = margin._right;
        bottomMargin = margin._bottom;
        leftMargin = margin._left;
      } else {
        topMargin = rightMargin = bottomMargin = leftMargin = 0;
      }
      if (child._fillWidth && !autoWidth) {
        width = maxFlowWidth - leftMargin - rightMargin;
        child.width = width;
      }
      x += leftMargin + lastColumnRightMargin + (x > 0 ? columnSpacing : 0);
      right = x + width + rightMargin;
      if (right > maxFlowWidth && visibleChildrenIndex > 0) {
        x = leftMargin;
        right = x + width + rightMargin;
        currentRowY += rowsHeight[currentRow];
        currentRow++;
        lastRowBottomMargin = currentRowBottomMargin;
        currentRowBottomMargin = 0;
      }
      if (child._fillHeight && !autoHeight) {
        rowsFills[currentRow] = max(rowsFills[currentRow], rowsFills[currentRow] + 1);
        rowsFillsSum++;
        height = 0;
        elementsBottomMargin[i] = bottomMargin;
      }
      bottom = y + height;
      y = currentRowY;
      y += lastRowBottomMargin + topMargin + (y > 0 ? rowSpacing : 0);
      lastColumnRightMargin = rightMargin;
      currentRowBottomMargin = max(currentRowBottomMargin, bottomMargin);
      elementsX[i] = x;
      elementsY[i] = y;
      elementsRow[i] = currentRow;
      flowWidth = max(flowWidth, right);
      flowHeight = max(flowHeight, y + height);
      rowsWidth[currentRow] = right;
      rowsHeight[currentRow] = flowHeight - currentRowY;
      x += width;
      y += height;
      visibleChildrenIndex++;
    }
    flowHeight = max(flowHeight, flowHeight + currentRowBottomMargin);
    freeHeightSpace = item._height - topPadding - bottomPadding - flowHeight;
    if (freeHeightSpace > 0 && rowsFillsSum > 0) {
      length = currentRow + 1;
      unusedFills = getCleanArray(unusedFills, length);
      perCell = (flowHeight + freeHeightSpace) / length;
      update = true;
      while (update) {
        update = false;
        for (i = j = 0, ref = currentRow; j <= ref; i = j += 1) {
          if (unusedFills[i] === 0 && (rowsFills[i] === 0 || rowsHeight[i] > perCell)) {
            length--;
            perCell -= (rowsHeight[i] - perCell) / length;
            unusedFills[i] = 1;
            update = true;
          }
        }
      }
      yShift = currentYShift = 0;
      nextChild = firstChild;
      row = -1;
      i = -1;
      while (child = nextChild) {
        i += 1;
        nextChild = child.nextSibling;
        anchors = child._anchors;
        if (!child._visible || (anchors && anchors._runningCount)) {
          continue;
        }
        if (elementsRow[i] === row + 1 && unusedFills[row] === 0) {
          yShift += currentYShift;
          currentYShift = 0;
        }
        row = elementsRow[i];
        elementsY[i] += yShift;
        if (unusedFills[row] === 0) {
          if (child._fillHeight) {
            child.height = perCell;
            if (!currentYShift) {
              currentYShift = perCell - rowsHeight[row];
              rowsHeight[row] = perCell;
            }
          }
        }
      }
      freeHeightSpace = 0;
    }
    switch (alignH) {
      case 'left':
        multiplierX = 0;
        break;
      case 'center':
        multiplierX = 0.5;
        break;
      case 'right':
        multiplierX = 1;
    }
    switch (alignV) {
      case 'top':
        multiplierY = 0;
        break;
      case 'center':
        multiplierY = 0.5;
        break;
      case 'bottom':
        multiplierY = 1;
    }
    if (autoHeight || alignV === 'top') {
      plusY = 0;
    } else {
      plusY = freeHeightSpace * multiplierY;
    }
    if (!autoWidth) {
      flowWidth = item._width - leftPadding - rightPadding;
    }
    if (!autoHeight) {
      flowHeight = item._height - topPadding - bottomPadding;
    }
    nextChild = firstChild;
    i = -1;
    while (child = nextChild) {
      i += 1;
      nextChild = child.nextSibling;
      if (!child._visible) {
        continue;
      }
      cell = elementsRow[i];
      anchors = child._anchors;
      if (anchors && anchors._runningCount) {
        continue;
      }
      child.x = elementsX[i] + (flowWidth - rowsWidth[cell]) * multiplierX + leftPadding;
      child.y = elementsY[i] + plusY + (rowsHeight[cell] - child._height) * multiplierY + topPadding;
    }
    if (autoWidth) {
      item.width = flowWidth + leftPadding + rightPadding;
    }
    if (autoHeight) {
      item.height = flowHeight + topPadding + bottomPadding;
    }
  };

  updateItems = function() {
    var currentQueue, item;
    pending = false;
    currentQueue = queue;
    queue = queues[++queueIndex % queues.length];
    while (currentQueue.length) {
      item = currentQueue.pop();
      item._impl.pending = false;
      item._impl.updatePending = true;
      updateItem(item);
      item._impl.updatePending = false;
    }
  };

  cleanPending = false;

  cleanQueue = [];

  clean = function() {
    var data;
    cleanPending = false;
    while (data = cleanQueue.pop()) {
      if (data.loops < MAX_LOOPS) {
        data.loops = 0;
      }
    }
  };

  update = function() {
    var data;
    data = this._impl;
    if (data.pending || !this._visible) {
      return;
    }
    if (!data.loops++) {
      cleanQueue.push(data);
      if (!cleanPending) {
        setTimeout(clean);
        cleanPending = true;
      }
    }
    data.pending = true;
    queue.push(this);
    if (!pending) {
      pending = true;
      eventLoop.setImmediate(updateItems);
    }
  };

  updateSize = function() {
    if (!this._impl.updatePending) {
      update.call(this);
    }
  };

  module.exports = function(impl) {
    var disableChild, enableChild, onChildrenChange, onHeightChange, onWidthChange;
    onWidthChange = function(oldVal) {
      this._impl.autoWidth = impl.Renderer.sizeUtils.isAutoWidth(this);
      return updateSize.call(this);
    };
    onHeightChange = function(oldVal) {
      this._impl.autoHeight = impl.Renderer.sizeUtils.isAutoHeight(this);
      return updateSize.call(this);
    };
    enableChild = function(child) {
      child.onVisibleChange.connect(update, this);
      child.onWidthChange.connect(updateSize, this);
      child.onHeightChange.connect(updateSize, this);
      child.onFillWidthChange.connect(update, this);
      child.onFillHeightChange.connect(update, this);
      child.onMarginChange.connect(update, this);
      return child.onAnchorsChange.connect(update, this);
    };
    disableChild = function(child) {
      child.onVisibleChange.disconnect(update, this);
      child.onWidthChange.disconnect(updateSize, this);
      child.onHeightChange.disconnect(updateSize, this);
      child.onFillWidthChange.disconnect(update, this);
      child.onFillHeightChange.disconnect(update, this);
      child.onMarginChange.disconnect(update, this);
      return child.onAnchorsChange.disconnect(update, this);
    };
    onChildrenChange = function(added, removed) {
      if (added) {
        enableChild.call(this, added);
      }
      if (removed) {
        disableChild.call(this, removed);
      }
      return update.call(this);
    };
    return {
      turnOff: function(item, oldItem) {
        var child;
        this.onAlignmentChange.disconnect(updateSize);
        this.onPaddingChange.disconnect(update);
        this.onVisibleChange.disconnect(update);
        this.onChildrenChange.disconnect(onChildrenChange);
        this.onWidthChange.disconnect(onWidthChange);
        this.onHeightChange.disconnect(onHeightChange);
        if (this._impl.autoWidth) {
          this.width = 0;
        }
        if (this._impl.autoHeight) {
          this.height = 0;
        }
        child = this.children.firstChild;
        while (child) {
          disableChild.call(this, child);
          child = child.nextSibling;
        }
      },
      turnOn: function() {
        var child;
        this.onAlignmentChange.connect(updateSize);
        this.onPaddingChange.connect(update);
        this.onVisibleChange.connect(update);
        this.onChildrenChange.connect(onChildrenChange);
        this.onWidthChange.connect(onWidthChange);
        this.onHeightChange.connect(onHeightChange);
        child = this.children.firstChild;
        while (child) {
          enableChild.call(this, child);
          child = child.nextSibling;
        }
        update.call(this);
      },
      update: update
    };
  };

}).call(this);

},{"../../../../../../util":"../../../node_modules/@neft/core/src/util/index.litcoffee","../../../../../../log":"../../../node_modules/@neft/core/src/log/index.litcoffee","../../../../../../event-loop":"../../../node_modules/@neft/core/src/event-loop/index.coffee","../../../../../../typed-array":"../../../node_modules/@neft/core/src/typed-array/index.litcoffee"}],"../../../node_modules/@neft/core/src/renderer/impl/base/level0/item/layout/grid.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  var ALIGNMENT_TO_POINT, ALL, COLUMN, MAX_LOOPS, ROW, TypedArray, columnsFills, columnsSizes, eventLoop, getArray, getCleanArray, log, pending, queue, queueIndex, queues, rowsFills, rowsSizes, unusedFills, update, updateItem, updateItems, updateSize, utils, visibleChildren;

  MAX_LOOPS = 100;

  utils = require('../../../../../../util');

  log = require('../../../../../../log');

  eventLoop = require('../../../../../../event-loop');

  TypedArray = require('../../../../../../typed-array');

  log = log.scope('Renderer');

  COLUMN = 1 << 0;

  ROW = 1 << 1;

  ALL = (1 << 2) - 1;

  queueIndex = 0;

  queues = [[], []];

  queue = queues[queueIndex];

  pending = false;

  visibleChildren = new TypedArray.Uint8(64);

  columnsSizes = new TypedArray.Float64(64);

  columnsFills = new TypedArray.Uint8(64);

  rowsSizes = new TypedArray.Float64(64);

  rowsFills = new TypedArray.Uint8(64);

  unusedFills = new TypedArray.Uint8(64);

  getArray = function(arr, len) {
    if (arr.length < len) {
      return new arr.constructor(len * 1.4 | 0);
    } else {
      return arr;
    }
  };

  getCleanArray = function(arr, len) {
    var i, j, newArr, ref;
    newArr = getArray(arr, len);
    if (newArr === arr) {
      for (i = j = 0, ref = len; j < ref; i = j += 1) {
        arr[i] = 0;
      }
      return arr;
    } else {
      return newArr;
    }
  };

  ALIGNMENT_TO_POINT = {
    left: 0,
    center: 0.5,
    right: 1,
    top: 0,
    bottom: 1
  };

  updateItem = function(item) {
    var alignH, alignV, alignment, autoHeight, autoWidth, bottomMargin, bottomPadding, cellX, cellY, child, childIndex, children, column, columnSpacing, columnsFillsSum, columnsLen, data, firstChild, freeHeightSpace, freeWidthSpace, gridHeight, gridType, gridWidth, height, i, j, k, l, lastColumn, lastRow, leftMargin, leftPadding, length, m, margin, maxColumnsLen, maxRowsLen, n, nextChild, o, padding, perCell, plusX, plusY, ref, ref1, ref2, ref3, ref4, ref5, rightMargin, rightPadding, row, rowSpacing, rowsFillsSum, rowsLen, topMargin, topPadding, update, width;
    children = item.children;
    firstChild = children.firstChild;
    data = item._impl;
    gridType = data.gridType;
    autoWidth = data.autoWidth, autoHeight = data.autoHeight;
    columnSpacing = rowSpacing = 0;
    autoWidth && (autoWidth = !item._fillWidth);
    autoHeight && (autoHeight = !item._fillHeight);
    columnSpacing = item.spacing.column;
    rowSpacing = item.spacing.row;
    if (gridType === ALL) {
      columnsLen = item.columns;
      rowsLen = item.rows;
    } else if (gridType === COLUMN) {
      columnsLen = 1;
      rowsLen = 2e308;
    } else if (gridType === ROW) {
      columnsLen = 2e308;
      rowsLen = 1;
    }
    if (alignment = item._alignment) {
      alignH = ALIGNMENT_TO_POINT[alignment._horizontal];
      alignV = ALIGNMENT_TO_POINT[alignment._vertical];
    } else {
      alignH = 0;
      alignV = 0;
    }
    if (padding = item._padding) {
      topPadding = padding._top;
      rightPadding = padding._right;
      bottomPadding = padding._bottom;
      leftPadding = padding._left;
    } else {
      topPadding = rightPadding = bottomPadding = leftPadding = 0;
    }
    maxColumnsLen = columnsLen === 2e308 ? children.length : columnsLen;
    columnsSizes = getCleanArray(columnsSizes, maxColumnsLen);
    columnsFills = getCleanArray(columnsFills, maxColumnsLen);
    maxRowsLen = rowsLen === 2e308 ? Math.ceil(children.length / columnsLen) : rowsLen;
    rowsSizes = getCleanArray(rowsSizes, maxRowsLen);
    rowsFills = getCleanArray(rowsFills, maxRowsLen);
    visibleChildren = getArray(visibleChildren, children.length);
    i = lastColumn = 0;
    lastRow = -1;
    nextChild = firstChild;
    childIndex = -1;
    while (child = nextChild) {
      childIndex += 1;
      nextChild = child.nextSibling;
      if (!child._visible || (child._anchors && child._anchors._runningCount)) {
        visibleChildren[childIndex] = 0;
        continue;
      }
      visibleChildren[childIndex] = 1;
      column = i % columnsLen;
      row = Math.floor(i / columnsLen) % rowsLen;
      if (column > lastColumn) {
        lastColumn = column;
      }
      if (row > lastRow) {
        lastRow = row;
      }
      i++;
    }
    i = columnsFillsSum = rowsFillsSum = 0;
    nextChild = firstChild;
    childIndex = -1;
    while (child = nextChild) {
      childIndex += 1;
      nextChild = child.nextSibling;
      if (!visibleChildren[childIndex]) {
        continue;
      }
      width = child._width;
      height = child._height;
      margin = child._margin;
      column = i % columnsLen;
      row = Math.floor(i / columnsLen) % rowsLen;
      if (child._fillWidth) {
        width = 0;
        columnsFillsSum++;
        columnsFills[column] = 1;
      }
      if (child._fillHeight) {
        height = 0;
        rowsFillsSum++;
        rowsFills[row] = 1;
      }
      if (margin) {
        width += margin._left;
        width += margin._right;
        height += margin._top;
        height += margin._bottom;
      }
      if (width > columnsSizes[column]) {
        columnsSizes[column] = width;
      }
      if (height > rowsSizes[row]) {
        rowsSizes[row] = height;
      }
      i++;
    }
    gridWidth = 0;
    if (autoWidth || columnsFillsSum > 0 || alignH !== 0) {
      for (i = j = 0, ref = lastColumn; j <= ref; i = j += 1) {
        gridWidth += columnsSizes[i];
      }
    }
    gridHeight = 0;
    if (autoHeight || rowsFillsSum > 0 || alignV !== 0) {
      for (i = k = 0, ref1 = lastRow; k <= ref1; i = k += 1) {
        gridHeight += rowsSizes[i];
      }
    }
    if (!autoWidth) {
      freeWidthSpace = item._width - columnSpacing * lastColumn - leftPadding - rightPadding - gridWidth;
      if (freeWidthSpace > 0 && columnsFillsSum > 0) {
        unusedFills = getCleanArray(unusedFills, lastColumn + 1);
        length = lastColumn + 1;
        perCell = (gridWidth + freeWidthSpace) / length;
        update = true;
        while (update) {
          update = false;
          for (i = l = 0, ref2 = lastColumn; l <= ref2; i = l += 1) {
            if (unusedFills[i] === 0 && (columnsFills[i] === 0 || columnsSizes[i] > perCell)) {
              length--;
              perCell -= (columnsSizes[i] - perCell) / length;
              unusedFills[i] = 1;
              update = true;
            }
          }
        }
        for (i = m = 0, ref3 = lastColumn; m <= ref3; i = m += 1) {
          if (unusedFills[i] === 0) {
            columnsSizes[i] = perCell;
          }
        }
        freeWidthSpace = 0;
      }
    }
    if (!autoHeight) {
      freeHeightSpace = item._height - rowSpacing * lastRow - topPadding - bottomPadding - gridHeight;
      if (freeHeightSpace > 0 && rowsFillsSum > 0) {
        unusedFills = getCleanArray(unusedFills, lastRow + 1);
        length = lastRow + 1;
        perCell = (gridHeight + freeHeightSpace) / length;
        update = true;
        while (update) {
          update = false;
          for (i = n = 0, ref4 = lastRow; n <= ref4; i = n += 1) {
            if (unusedFills[i] === 0 && (rowsFills[i] === 0 || rowsSizes[i] > perCell)) {
              length--;
              perCell -= (rowsSizes[i] - perCell) / length;
              unusedFills[i] = 1;
              update = true;
            }
          }
        }
        for (i = o = 0, ref5 = lastRow; o <= ref5; i = o += 1) {
          if (unusedFills[i] === 0) {
            rowsSizes[i] = perCell;
          }
        }
        freeHeightSpace = 0;
      }
    }
    if (autoWidth || alignH === 0) {
      plusX = 0;
    } else {
      plusX = freeWidthSpace * alignH;
    }
    if (autoHeight || alignV === 0) {
      plusY = 0;
    } else {
      plusY = freeHeightSpace * alignV;
    }
    i = cellX = cellY = 0;
    nextChild = firstChild;
    childIndex = -1;
    while (child = nextChild) {
      childIndex += 1;
      nextChild = child.nextSibling;
      if (!visibleChildren[childIndex]) {
        continue;
      }
      margin = child._margin;
      column = i % columnsLen;
      row = Math.floor(i / columnsLen) % rowsLen;
      if (column === 0) {
        cellX = 0;
        if (row === 0) {
          cellY = 0;
        } else {
          cellY += rowsSizes[row - 1] + rowSpacing;
        }
      } else {
        cellX += columnsSizes[column - 1] + columnSpacing;
      }
      leftMargin = rightMargin = 0;
      if (margin) {
        leftMargin = margin._left;
        rightMargin = margin._right;
      }
      topMargin = bottomMargin = 0;
      if (margin) {
        topMargin = margin._top;
        bottomMargin = margin._bottom;
      }
      if (child._fillWidth) {
        width = columnsSizes[column] - leftMargin - rightMargin;
        child.width = width;
      }
      if (child._fillHeight) {
        height = rowsSizes[row] - topMargin - bottomMargin;
        child.height = height;
      }
      child.x = cellX + plusX + leftMargin + leftPadding + columnsSizes[column] * alignH - (child._width + leftMargin + rightMargin) * alignH;
      child.y = cellY + plusY + topMargin + topPadding + rowsSizes[row] * alignV - (child._height + topMargin + bottomMargin) * alignV;
      i++;
    }
    if (autoWidth) {
      item.width = gridWidth + columnSpacing * lastColumn + leftPadding + rightPadding;
    }
    if (autoHeight) {
      item.height = gridHeight + rowSpacing * lastRow + topPadding + bottomPadding;
    }
  };

  updateItems = function() {
    var currentQueue, item;
    pending = false;
    currentQueue = queue;
    queue = queues[++queueIndex % queues.length];
    while (currentQueue.length) {
      item = currentQueue.pop();
      item._impl.pending = false;
      item._impl.updatePending = true;
      updateItem(item);
      item._impl.updatePending = false;
    }
  };

  update = function() {
    var data;
    data = this._impl;
    if (data.pending || !this._visible) {
      return;
    }
    data.pending = true;
    if (data.updatePending) {
      if (data.gridUpdateLoops > MAX_LOOPS) {
        return;
      }
      if (++data.gridUpdateLoops === MAX_LOOPS) {
        log.error("Potential Grid/Column/Row loop detected. Recalculating on this item (" + (this.toString()) + ") has been disabled.");
        return;
      }
    } else {
      data.gridUpdateLoops = 0;
    }
    queue.push(this);
    if (!pending) {
      pending = true;
      eventLoop.setImmediate(updateItems);
    }
  };

  updateSize = function() {
    if (!this._impl.updatePending) {
      update.call(this);
    }
  };

  module.exports = function(impl) {
    var disableChild, enableChild, onChildrenChange, onHeightChange, onWidthChange;
    onWidthChange = function(oldVal) {
      this._impl.autoWidth = impl.Renderer.sizeUtils.isAutoWidth(this);
      return updateSize.call(this);
    };
    onHeightChange = function(oldVal) {
      this._impl.autoHeight = impl.Renderer.sizeUtils.isAutoHeight(this);
      return updateSize.call(this);
    };
    enableChild = function(child) {
      child.onVisibleChange.connect(update, this);
      child.onWidthChange.connect(updateSize, this);
      child.onHeightChange.connect(updateSize, this);
      child.onFillWidthChange.connect(update, this);
      child.onFillHeightChange.connect(update, this);
      child.onMarginChange.connect(update, this);
      return child.onAnchorsChange.connect(update, this);
    };
    disableChild = function(child) {
      child.onVisibleChange.disconnect(update, this);
      child.onWidthChange.disconnect(updateSize, this);
      child.onHeightChange.disconnect(updateSize, this);
      child.onFillWidthChange.disconnect(update, this);
      child.onFillHeightChange.disconnect(update, this);
      child.onMarginChange.disconnect(update, this);
      return child.onAnchorsChange.disconnect(update, this);
    };
    onChildrenChange = function(added, removed) {
      if (added) {
        enableChild.call(this, added);
      }
      if (removed) {
        disableChild.call(this, removed);
      }
      return update.call(this);
    };
    return {
      COLUMN: COLUMN,
      ROW: ROW,
      ALL: ALL,
      update: update,
      turnOff: function() {
        var child;
        this.onAlignmentChange.disconnect(updateSize);
        this.onPaddingChange.disconnect(updateSize);
        this.onVisibleChange.disconnect(update);
        this.onChildrenChange.disconnect(onChildrenChange);
        this.onWidthChange.disconnect(onWidthChange);
        this.onHeightChange.disconnect(onHeightChange);
        child = this.children.firstChild;
        while (child) {
          disableChild.call(this, child);
          child = child.nextSibling;
        }
      },
      turnOn: function(gridType) {
        var child;
        this._impl.gridType = gridType;
        this.onAlignmentChange.connect(updateSize);
        this.onPaddingChange.connect(updateSize);
        this.onVisibleChange.connect(update);
        this.onChildrenChange.connect(onChildrenChange);
        this.onWidthChange.connect(onWidthChange);
        this.onHeightChange.connect(onHeightChange);
        child = this.children.firstChild;
        while (child) {
          enableChild.call(this, child);
          child = child.nextSibling;
        }
        update.call(this);
      }
    };
  };

}).call(this);

},{"../../../../../../util":"../../../node_modules/@neft/core/src/util/index.litcoffee","../../../../../../log":"../../../node_modules/@neft/core/src/log/index.litcoffee","../../../../../../event-loop":"../../../node_modules/@neft/core/src/event-loop/index.coffee","../../../../../../typed-array":"../../../node_modules/@neft/core/src/typed-array/index.litcoffee"}],"../../../node_modules/@neft/core/src/renderer/impl/base/level0/item.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  var utils;

  utils = require('../../../../util');

  module.exports = function(impl) {
    var DATA, NOP, flowLayout, gridLayout, pointer;
    pointer = impl.pointer = require('./item/pointer')(impl);
    flowLayout = require('./item/layout/flow')(impl);
    gridLayout = require('./item/layout/grid')(impl);
    NOP = function() {};
    DATA = utils.merge({
      bindings: null,
      anchors: null,
      capturePointer: 0,
      childrenCapturesPointer: 0,
      layout: null,
      loops: 0,
      pending: false,
      updatePending: false,
      gridType: 0,
      gridUpdateLoops: 0,
      autoWidth: true,
      autoHeight: true
    }, pointer.DATA);
    impl.ITEM_DATA = DATA;
    return {
      DATA: DATA,
      createData: impl.utils.createDataCloner(DATA),
      create: function(data) {},
      setItemParent: function(val) {},
      insertItemBefore: function(val) {
        var child, children, i, item, len, parent, tmp;
        impl.setItemParent.call(this, null);
        this._parent = null;
        parent = val.parent;
        children = parent.children;
        tmp = [];
        child = val;
        while (child) {
          if (child !== this) {
            impl.setItemParent.call(child, null);
            child._parent = null;
            tmp.push(child);
          }
          child = child.aboveSibling;
        }
        impl.setItemParent.call(this, parent);
        this._parent = parent;
        for (i = 0, len = tmp.length; i < len; i++) {
          item = tmp[i];
          impl.setItemParent.call(item, parent);
          item._parent = parent;
        }
      },
      setItemVisible: function(val) {},
      setItemClip: function(val) {},
      setItemWidth: function(val) {},
      setItemHeight: function(val) {},
      setItemX: function(val) {},
      setItemY: function(val) {},
      setItemScale: function(val) {},
      setItemRotation: function(val) {},
      setItemOpacity: function(val) {},
      setItemLayout: function(val) {
        var ref;
        if ((ref = this._impl.layout) != null) {
          ref.turnOff.call(this);
        }
        if (val === 'flow') {
          this._impl.layout = flowLayout;
          flowLayout.turnOn.call(this);
        } else if (val === 'column') {
          this._impl.layout = gridLayout;
          gridLayout.turnOn.call(this, gridLayout.COLUMN);
        } else if (val === 'row') {
          this._impl.layout = gridLayout;
          gridLayout.turnOn.call(this, gridLayout.ROW);
        } else if (val === 'grid') {
          this._impl.layout = gridLayout;
          gridLayout.turnOn.call(this, gridLayout.COLUMN | gridLayout.ROW);
        }
      },
      setItemColumnSpacing: function(val) {
        var ref;
        return (ref = this._impl.layout) != null ? ref.update.call(this) : void 0;
      },
      setItemRowSpacing: function(val) {
        var ref;
        return (ref = this._impl.layout) != null ? ref.update.call(this) : void 0;
      },
      setItemColumns: function(val) {
        var ref;
        return (ref = this._impl.layout) != null ? ref.update.call(this) : void 0;
      },
      setItemRows: function(val) {
        var ref;
        return (ref = this._impl.layout) != null ? ref.update.call(this) : void 0;
      },
      setItemAlignmentHorizontal: function(val) {
        var ref;
        return (ref = this._impl.layout) != null ? ref.update.call(this) : void 0;
      },
      setItemAlignmentVertical: function(val) {
        var ref;
        return (ref = this._impl.layout) != null ? ref.update.call(this) : void 0;
      },
      attachItemSignal: function(name, signal) {
        if (name === 'pointer') {
          return pointer.attachItemSignal.call(this, signal);
        }
      },
      setItemPointerEnabled: function(val) {
        return pointer.setItemPointerEnabled.call(this, val);
      },
      setItemPointerDraggable: function(val) {
        return pointer.setItemPointerDraggable.call(this, val);
      },
      setItemPointerDragActive: function(val) {
        return pointer.setItemPointerDragActive.call(this, val);
      },
      setItemKeysFocus: function(val) {}
    };
  };

}).call(this);

},{"../../../../util":"../../../node_modules/@neft/core/src/util/index.litcoffee","./item/pointer":"../../../node_modules/@neft/core/src/renderer/impl/base/level0/item/pointer.coffee","./item/layout/flow":"../../../node_modules/@neft/core/src/renderer/impl/base/level0/item/layout/flow.coffee","./item/layout/grid":"../../../node_modules/@neft/core/src/renderer/impl/base/level0/item/layout/grid.coffee"}],"../../../node_modules/@neft/core/src/renderer/impl/base/level0/image.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  module.exports = function(impl) {
    var DATA;
    DATA = {
      source: ''
    };
    return {
      DATA: DATA,
      createData: impl.utils.createDataCloner('Item', DATA),
      create: function(data) {
        return impl.Types.Item.create.call(this, data);
      },
      setImageSource: function(val) {
        return this._impl.source = val;
      }
    };
  };

}).call(this);

},{}],"../../../node_modules/@neft/core/src/renderer/impl/base/level0/text.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  module.exports = function(impl) {
    var DATA, items;
    items = impl.items;
    DATA = {};
    return {
      DATA: DATA,
      createData: impl.utils.createDataCloner('Item', DATA),
      create: function(data) {
        return impl.Types.Item.create.call(this, data);
      },
      setText: function(val) {},
      setTextWrap: function(val) {},
      updateTextContentSize: function() {},
      setTextColor: function(val) {},
      setTextLinkColor: function(val) {},
      setTextLineHeight: function(val) {},
      setTextFontFamily: function(val) {},
      setTextFontPixelSize: function(val) {},
      setTextFontWordSpacing: function(val) {},
      setTextFontLetterSpacing: function(val) {},
      setTextAlignmentHorizontal: function(val) {},
      setTextAlignmentVertical: function(val) {}
    };
  };

}).call(this);

},{}],"../../../node_modules/@neft/core/src/renderer/impl/base/level0/native.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  module.exports = function(impl) {
    var DATA, items;
    items = impl.items;
    DATA = {};
    return {
      DATA: DATA,
      createData: impl.utils.createDataCloner('Item', DATA),
      create: function(data) {
        return impl.Types.Item.create.call(this, data);
      },
      updateNativeSize: function() {}
    };
  };

}).call(this);

},{}],"../../../node_modules/@neft/core/src/renderer/impl/base/level0/loader/font.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  module.exports = function(impl) {
    return {
      loadFont: function(name, source, sources, callback) {}
    };
  };

}).call(this);

},{}],"../../../node_modules/@neft/core/src/renderer/impl/base/level0/device.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  module.exports = function(impl) {
    return {
      initDeviceNamespace: function() {},
      logDevice: function(msg) {
        return console.log(msg);
      },
      showDeviceKeyboard: function() {},
      hideDeviceKeyboard: function() {}
    };
  };

}).call(this);

},{}],"../../../node_modules/@neft/core/src/renderer/impl/base/level0/screen.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  module.exports = function(impl) {
    return {
      initScreenNamespace: function() {},
      setScreenStatusBarColor: function(val) {}
    };
  };

}).call(this);

},{}],"../../../node_modules/@neft/core/src/renderer/impl/base/level0/navigator.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  module.exports = function(impl) {
    return {
      initNavigatorNamespace: function() {}
    };
  };

}).call(this);

},{}],"../../../node_modules/@neft/core/src/renderer/impl/base/level1/rectangle.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  module.exports = function(impl) {
    var DATA, NOP, getRectangleSource, items, round, updateImage, updateImageIfNeeded;
    items = impl.items;
    round = Math.round;
    NOP = function() {};
    getRectangleSource = function(item) {
      var borderColor, color, data, height, pixelRatio, radius, strokeWidth, width;
      data = item._impl;
      pixelRatio = impl.pixelRatio;
      if (item.width <= 0 || item.height <= 0) {
        data.isRectVisible = false;
        return null;
      } else {
        data.isRectVisible = true;
      }
      width = round(item.width * pixelRatio);
      height = round(item.height * pixelRatio);
      radius = round(item.radius * pixelRatio);
      strokeWidth = round(Math.min(item.border.width * 2 * pixelRatio, width, height));
      color = data.color;
      borderColor = data.borderColor;
      return "data:image/svg+xml;utf8," + ("<svg width='" + width + "' height='" + height + "' xmlns='http://www.w3.org/2000/svg'>") + "<clipPath id='clip'>" + "<rect " + ("rx='" + radius + "' ") + ("width='" + width + "' height='" + height + "' />") + "</clipPath>" + "<rect " + "clip-path='url(#clip)' " + ("fill='" + color + "' ") + ("stroke='" + borderColor + "' ") + ("stroke-width='" + strokeWidth + "' ") + ("rx='" + radius + "' ") + ("width='" + width + "' height='" + height + "' />") + "</svg>";
    };
    updateImage = function() {
      impl.setImageSource.call(this, getRectangleSource(this), NOP);
    };
    updateImageIfNeeded = function() {
      if (!this._impl.isRectVisible || this.radius > 0 || this.border.width > 0) {
        updateImage.call(this);
      }
    };
    DATA = {
      color: 'transparent',
      borderColor: 'transparent',
      isRectVisible: false
    };
    return {
      DATA: DATA,
      createData: impl.utils.createDataCloner('Image', DATA),
      create: function(data) {
        impl.Types.Image.create.call(this, data);
        this.onWidthChange.connect(updateImageIfNeeded);
        return this.onHeightChange.connect(updateImageIfNeeded);
      },
      setRectangleColor: function(val) {
        this._impl.color = val;
        return updateImage.call(this);
      },
      setRectangleRadius: updateImage,
      setRectangleBorderColor: function(val) {
        this._impl.borderColor = val;
        return updateImage.call(this);
      },
      setRectangleBorderWidth: updateImage
    };
  };

}).call(this);

},{}],"../../../node_modules/@neft/core/src/renderer/impl/base/level1/animation.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  module.exports = function(impl) {
    var DATA;
    DATA = {
      bindings: null,
      reversed: false
    };
    return {
      DATA: DATA,
      createData: impl.utils.createDataCloner(DATA),
      create: function(data) {},
      setAnimationLoop: function(val) {},
      setAnimationReversed: function(val) {
        this._impl.reversed = val;
      },
      startAnimation: function() {},
      stopAnimation: function() {},
      resumeAnimation: function() {},
      pauseAnimation: function() {}
    };
  };

}).call(this);

},{}],"../../../node_modules/@neft/core/src/renderer/impl/base/level1/animation/property.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  module.exports = function(impl) {
    var DATA, EASINGS, Types, items;
    Types = impl.Types, items = impl.items;
    EASINGS = {
      Linear: function(t, b, c, d) {
        return c * (t / d) + b;
      },
      InQuad: function(t, b, c, d) {
        return c * (t /= d) * t + b;
      },
      OutQuad: function(t, b, c, d) {
        return -c * (t /= d) * (t - 2) + b;
      },
      InOutQuad: function(t, b, c, d) {
        if ((t /= d / 2) < 1) {
          return c / 2 * t * t + b;
        } else {
          return -c / 2 * ((--t) * (t - 2) - 1) + b;
        }
      },
      InCubic: function(t, b, c, d) {
        return c * (t /= d) * t * t + b;
      },
      OutCubic: function(t, b, c, d) {
        return c * ((t = t / d - 1) * t * t + 1) + b;
      },
      InOutCubic: function(t, b, c, d) {
        if ((t /= d / 2) < 1) {
          return c / 2 * t * t * t + b;
        } else {
          return c / 2 * ((t -= 2) * t * t + 2) + b;
        }
      },
      InQuart: function(t, b, c, d) {
        return c * (t /= d) * t * t * t + b;
      },
      OutQuart: function(t, b, c, d) {
        return -c * ((t = t / d - 1) * t * t * t - 1) + b;
      },
      InOutQuart: function(t, b, c, d) {
        if ((t /= d / 2) < 1) {
          return c / 2 * t * t * t * t + b;
        } else {
          return -c / 2 * ((t -= 2) * t * t * t - 2) + b;
        }
      },
      InQuint: function(t, b, c, d) {
        return c * (t /= d) * t * t * t * t + b;
      },
      OutQuint: function(t, b, c, d) {
        return c * ((t = t / d - 1) * t * t * t * t + 1) + b;
      },
      InOutQuint: function(t, b, c, d) {
        if ((t /= d / 2) < 1) {
          return c / 2 * t * t * t * t * t + b;
        } else {
          return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;
        }
      },
      InSine: function(t, b, c, d) {
        return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;
      },
      OutSine: function(t, b, c, d) {
        return c * Math.sin(t / d * (Math.PI / 2)) + b;
      },
      InOutSine: function(t, b, c, d) {
        return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;
      },
      InExpo: function(t, b, c, d) {
        if (t === 0) {
          return b;
        } else {
          return c * Math.pow(2, 10 * (t / d - 1)) + b;
        }
      },
      OutExpo: function(t, b, c, d) {
        if (t === d) {
          return b + c;
        } else {
          return c * (-Math.pow(2, -10 * t / d) + 1) + b;
        }
      },
      InOutExpo: function(t, b, c, d) {
        if (t === 0) {
          return b;
        } else if (t === d) {
          return b + c;
        } else if ((t /= d / 2) < 1) {
          return c / 2 * Math.pow(2, 10 * (t - 1)) + b;
        } else {
          return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;
        }
      },
      InCirc: function(t, b, c, d) {
        return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;
      },
      OutCirc: function(t, b, c, d) {
        return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;
      },
      InOutCirc: function(t, b, c, d) {
        if ((t /= d / 2) < 1) {
          return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;
        } else {
          return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;
        }
      },
      InElastic: function(t, b, c, d) {
        var a, p, s;
        s = 1.70158;
        p = 0;
        a = c;
        if (t === 0) {
          return b;
        } else if ((t /= d) === 1) {
          return b + c;
        } else {
          p || (p = d * .3);
          if (a < Math.abs(c)) {
            a = c;
            s = p / 4;
          } else {
            s = p / (2 * Math.PI) * Math.asin(c / a);
          }
          return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
        }
      },
      OutElastic: function(t, b, c, d) {
        var a, p, s;
        s = 1.70158;
        p = 0;
        a = c;
        if (t === 0) {
          return b;
        } else if ((t /= d) === 1) {
          return b + c;
        } else {
          p || (p = d * .3);
          if (a < Math.abs(c)) {
            a = c;
            s = p / 4;
          } else {
            s = p / (2 * Math.PI) * Math.asin(c / a);
          }
          return a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b;
        }
      },
      InOutElastic: function(t, b, c, d) {
        var a, p, s;
        s = 1.70158;
        p = 0;
        a = c;
        if (t === 0) {
          return b;
        } else if ((t /= d / 2) === 2) {
          return b + c;
        } else {
          p || (p = d * (.3 * 1.5));
          if (a < Math.abs(c)) {
            a = c;
            s = p / 4;
          } else {
            s = p / (2 * Math.PI) * Math.asin(c / a);
          }
          if (t < 1) {
            return -.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
          } else {
            return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * .5 + c + b;
          }
        }
      },
      InBack: function(t, b, c, d, s) {
        if (s == null) {
          s = 1.70158;
        }
        return c * (t /= d) * t * ((s + 1) * t - s) + b;
      },
      OutBack: function(t, b, c, d, s) {
        if (s == null) {
          s = 1.70158;
        }
        return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;
      },
      InOutBack: function(t, b, c, d, s) {
        if (s == null) {
          s = 1.70158;
        }
        if ((t /= d / 2) < 1) {
          return c / 2 * (t * t * (((s *= 1.525) + 1) * t - s)) + b;
        } else {
          return c / 2 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2) + b;
        }
      },
      InBounce: function(t, b, c, d) {
        return c - EASINGS.OutBounce(d - t, 0, c, d) + b;
      },
      OutBounce: function(t, b, c, d) {
        if ((t /= d) < (1 / 2.75)) {
          return c * (7.5625 * t * t) + b;
        } else if (t < (2 / 2.75)) {
          return c * (7.5625 * (t -= 1.5 / 2.75) * t + .75) + b;
        } else if (t < (2.5 / 2.75)) {
          return c * (7.5625 * (t -= 2.25 / 2.75) * t + .9375) + b;
        } else {
          return c * (7.5625 * (t -= 2.625 / 2.75) * t + .984375) + b;
        }
      },
      InOutBounce: function(t, b, c, d) {
        if (t < d / 2) {
          return EASINGS.InBounce(t * 2, 0, c, d) * .5 + b;
        } else {
          return EASINGS.OutBounce(t * 2 - d, 0, c, d) * .5 + c * .5 + b;
        }
      },
      Steps: function(t, b, c, d) {
        return c * Math.floor(t / d * this.steps) / (this.steps - 1) + b;
      }
    };
    DATA = {
      progress: 0,
      propertySetter: null,
      isIntegerProperty: false,
      easing: null,
      steps: 1,
      startDelay: 0
    };
    return {
      DATA: DATA,
      createData: impl.utils.createDataCloner('Animation', DATA),
      create: function(data) {
        data.easing = EASINGS.Linear;
        return impl.Types.Animation.create.call(this, data);
      },
      setPropertyAnimationTarget: function(val) {},
      setPropertyAnimationProperty: function(val) {
        this._impl.propertySetter = impl.utils.SETTER_METHODS_NAMES[val];
        this._impl.isIntegerProperty = !!impl.utils.INTEGER_PROPERTIES[val];
      },
      setPropertyAnimationDuration: function(val) {},
      setPropertyAnimationStartDelay: function(val) {
        this._impl.startTime += val - this._impl.startDelay;
        return this._impl.startDelay = val;
      },
      setPropertyAnimationLoopDelay: function(val) {},
      setPropertyAnimationFrom: function(val) {
        return this._impl.from = val;
      },
      setPropertyAnimationTo: function(val) {
        return this._impl.to = val;
      },
      setPropertyAnimationUpdateProperty: function(val) {},
      setPropertyAnimationEasingType: function(val) {
        return this._impl.easing = EASINGS[val] || EASINGS.Linear;
      },
      setPropertyAnimationEasingSteps: function(val) {
        return this._impl.steps = val;
      },
      getPropertyAnimationProgress: function() {
        return this._impl.progress;
      }
    };
  };

}).call(this);

},{}],"../../../node_modules/@neft/core/src/renderer/impl/base/level1/animation/number.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  var assert, eventLoop, utils;

  utils = require('../../../../../util');

  assert = require('../../../../../assert');

  eventLoop = require('../../../../../event-loop');

  module.exports = function(impl) {
    var DATA, Renderer, Types, addAnimationIntoPending, now, nowTime, pending, round, updateAnimation, vsync;
    Types = impl.Types, Renderer = impl.Renderer;
    now = Date.now;
    round = Math.round;
    pending = [];
    nowTime = now();
    vsync = function() {
      var anim, i, n;
      nowTime = now();
      eventLoop.lock();
      i = 0;
      n = pending.length;
      while (i < n) {
        anim = pending[i];
        if (anim._running && !anim._paused) {
          updateAnimation(anim, Renderer.PropertyAnimation.ON_PENDING);
          i++;
        } else {
          pending.splice(i, 1);
          anim._impl.pending = false;
          n--;
        }
      }
      if (pending.length > 0) {
        requestAnimationFrame(vsync);
      }
      eventLoop.release();
    };
    updateAnimation = function(anim, stateFlags) {
      var data, fromVal, progress, property, running, target, toVal, val;
      data = anim._impl;
      progress = (nowTime - data.startTime) / anim._duration;
      if (progress < 0) {
        progress = 0;
      } else if (progress > 1) {
        progress = 1;
      }
      data.progress = progress;
      running = progress !== 1 || (anim._running && anim._loop);
      fromVal = data.reversed ? data.to : data.from;
      toVal = data.reversed ? data.from : data.to;
      if (progress === 1) {
        val = toVal;
      } else {
        val = data.easing(anim._duration * progress, fromVal, toVal - fromVal, anim._duration);
      }
      target = anim._target;
      property = anim._property;
      if (!running) {
        stateFlags |= Renderer.PropertyAnimation.ON_STOP;
      }
      if (val === val && target && property) {
        if ((anim._updateProperty & stateFlags) > 0 || !data.propertySetter) {
          anim._updatePending = true;
          target[property] = val;
          anim._updatePending = false;
        } else {
          impl[data.propertySetter].call(target, val);
        }
      }
      if (progress === 1) {
        if (running) {
          data.startTime += anim._loopDelay + anim._duration;
        } else {
          data.startTime = 0;
          anim.running = false;
        }
      }
    };
    addAnimationIntoPending = function(anim) {
      var data;
      data = anim._impl;
      if (!data.pending) {
        if (pending.length === 0) {
          requestAnimationFrame(vsync);
        }
        pending.push(anim);
        data.pending = true;
      }
    };
    DATA = {
      type: 'number',
      pending: false,
      startTime: 0,
      pauseTime: 0,
      from: 0,
      to: 0
    };
    return {
      DATA: DATA,
      createData: impl.utils.createDataCloner('PropertyAnimation', DATA),
      create: function(data) {
        return impl.Types.PropertyAnimation.create.call(this, data);
      },
      startAnimation: (function(_super) {
        return function() {
          var data;
          _super.call(this);
          if (this._impl.type === 'number') {
            data = this._impl;
            data.from = this._from;
            data.to = this._to;
            addAnimationIntoPending(this);
            data.startTime = now();
            updateAnimation(this, Renderer.PropertyAnimation.ON_START);
            data.startTime += this._startDelay;
          }
        };
      })(impl.startAnimation),
      stopAnimation: (function(_super) {
        return function() {
          var data;
          _super.call(this);
          data = this._impl;
          if (data.type === 'number' && data.startTime !== 0) {
            updateAnimation(this, Renderer.PropertyAnimation.ON_STOP);
            data.startTime = 0;
          }
        };
      })(impl.stopAnimation),
      resumeAnimation: (function(_super) {
        return function() {
          var data;
          _super.call(this);
          if (this._impl.type === 'number') {
            data = this._impl;
            addAnimationIntoPending(this);
            data.startTime += Date.now() - data.pauseTime;
            data.pauseTime = 0;
          }
        };
      })(impl.resumeAnimation),
      pauseAnimation: (function(_super) {
        return function() {
          var data;
          _super.call(this);
          data = this._impl;
          if (data.type === 'number') {
            data.pauseTime = Date.now();
          }
        };
      })(impl.pauseAnimation)
    };
  };

}).call(this);

},{"../../../../../util":"../../../node_modules/@neft/core/src/util/index.litcoffee","../../../../../assert":"../../../node_modules/@neft/core/src/assert/index.litcoffee","../../../../../event-loop":"../../../node_modules/@neft/core/src/event-loop/index.coffee"}],"../../../node_modules/@neft/core/src/observable-array/index.js":[function(require,module,exports) {
const { SignalDispatcher } = require('../signal')

class ObservableArray extends Array {
  constructor(...elements) {
    super(...elements)
    this.onPush = new SignalDispatcher()
    this.onPop = new SignalDispatcher()
  }

  push(...elements) {
    const result = super.push(...elements)
    elements.forEach((element, index) => {
      this.onPush.emit(element, this.length - elements.length + index)
    })
    return result
  }

  pop() {
    if (this.length === 0) return super.pop()
    const result = super.pop()
    this.onPop.emit(result, this.length)
    return result
  }

  shift() {
    if (this.length === 0) return super.shift()
    const result = super.shift()
    this.onPop.emit(result, 0)
    return result
  }

  unshift(...elements) {
    const result = super.unshift(...elements)
    elements.forEach((element, index) => {
      this.onPush.emit(element, index)
    })
    return result
  }

  splice(start, deleteCount, ...elements) {
    const popped = this.slice(start, start + deleteCount)
    const result = super.splice(start, deleteCount, ...elements)
    popped.forEach((element, index) => {
      this.onPop.emit(element, start + index)
    })
    elements.forEach((element, index) => {
      this.onPush.emit(element, start + index)
    })
    return result
  }

  reverse() {
    this.forEach((element, index) => { this.onPop.emit(element, index) })
    const result = super.reverse()
    this.forEach((element, index) => { this.onPush.emit(element, index) })
    return result
  }

  sort(compareFunction) {
    this.forEach((element, index) => { this.onPop.emit(element, index) })
    const result = super.sort(compareFunction)
    this.forEach((element, index) => { this.onPush.emit(element, index) })
    return result
  }
}

module.exports = ObservableArray

},{"../signal":"../../../node_modules/@neft/core/src/signal/index.js"}],"../../../node_modules/@neft/core/src/binding/index.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  var Binding, Connection, MAX_LOOPS, ObservableArray, assert, getPropHandlerName, isArray, log, util;

  util = require('../util');

  log = require('../log');

  assert = require('../assert');

  ObservableArray = require('../observable-array');

  log = log.scope('Binding');

  isArray = Array.isArray;

  MAX_LOOPS = 50;

  getPropHandlerName = (function() {
    var cache, toHandlerName;
    cache = Object.create(null);
    toHandlerName = function(prop) {
      if (prop[0] === '$') {
        prop = "$" + (util.capitalize(prop.slice(1)));
      } else {
        prop = util.capitalize(prop);
      }
      return "on" + prop + "Change";
    };
    return function(prop) {
      return cache[prop] || (cache[prop] = toHandlerName(prop));
    };
  })();

  Connection = (function() {
    var pool;

    pool = [];

    Connection.factory = function(binding, item, prop, parent) {
      var elem;
      if (parent == null) {
        parent = null;
      }
      if (pool.length > 0 && (elem = pool.pop())) {
        Connection.call(elem, binding, item, prop, parent);
        return elem;
      } else {
        return new Connection(binding, item, prop, parent);
      }
    };

    function Connection(binding1, item, prop1, parent1) {
      this.binding = binding1;
      this.prop = prop1;
      this.parent = parent1;
      this.handlerName = getPropHandlerName(this.prop);
      this.isConnected = false;
      if (isArray(item)) {
        this.itemId = '';
        this.child = Connection.factory(this.binding, item[0], item[1], this);
        this.item = this.child.getValue();
      } else {
        this.itemId = item;
        this.child = null;
        this.item = this.binding.getItemById(item);
      }
      this.connect();
      Object.seal(this);
    }

    Connection.prototype.getSignalChangeListener = (function() {
      var noParent, withParent;
      withParent = function(prop, val) {
        if (val === void 0 || typeof prop !== 'string' || this.parent.prop === prop) {
          this.parent.updateItem();
        }
      };
      noParent = function() {
        this.binding.update();
      };
      return function() {
        if (this.parent) {
          return withParent;
        } else {
          return noParent;
        }
      };
    })();

    Connection.prototype.update = function() {
      return this.getSignalChangeListener().call(this);
    };

    Connection.prototype.connect = function() {
      var handler, item;
      item = this.item;
      if (item) {
        if (item instanceof ObservableArray) {
          this.isConnected = true;
          handler = this.getSignalChangeListener();
          item.onPush.connect(handler, this);
          item.onPop.connect(handler, this);
        } else if (handler = item[this.handlerName]) {
          this.isConnected = true;
          handler.connect(this.getSignalChangeListener(), this);
        }
      }
    };

    Connection.prototype.disconnect = function() {
      var handler, item;
      item = this.item;
      if (item && this.isConnected) {
        handler = this.getSignalChangeListener();
        if (item instanceof ObservableArray) {
          item.onPush.disconnect(handler, this);
          item.onPop.disconnect(handler, this);
        } else {
          item[this.handlerName].disconnect(handler, this);
        }
      }
      this.isConnected = false;
    };

    Connection.prototype.updateItem = function() {
      var oldVal, val;
      oldVal = this.item;
      if (this.child) {
        val = this.child.getValue();
      } else {
        val = this.binding.getItemById(this.itemId);
      }
      if (oldVal && !this.isConnected) {
        this.connect();
        oldVal = null;
      }
      if (oldVal !== val) {
        this.disconnect();
        this.item = val;
        this.connect();
        if (!this.parent) {
          this.binding.update();
        }
      }
      if (this.parent) {
        this.parent.updateItem();
      }
    };

    Connection.prototype.getValue = function() {
      if (this.item) {
        return this.item[this.prop];
      } else {
        return null;
      }
    };

    Connection.prototype.destroy = function() {
      var ref;
      this.disconnect();
      if ((ref = this.child) != null) {
        ref.destroy();
      }
      pool.push(this);
    };

    return Connection;

  })();

  module.exports = Binding = (function() {
    Binding.New = function(binding, ctx, target) {
      var connections, elem, i, len, ref;
      if (target == null) {
        target = new Binding(binding, ctx);
      }
      Object.seal(target);
      connections = target.connections;
      ref = binding[1];
      for (i = 0, len = ref.length; i < len; i++) {
        elem = ref[i];
        if (isArray(elem)) {
          connections.push(Connection.factory(target, elem[0], elem[1]));
        }
      }
      return target;
    };

    function Binding(binding, ctx1) {
      this.ctx = ctx1;
      assert.lengthOf(binding, 2);
      assert.isFunction(binding[0]);
      assert.isArray(binding[1]);
      this.func = binding[0];
      this.args = null;
      this.connections || (this.connections = []);
      //<development>;
      this.updatePending = false;
      this.updateLoop = 0;
      //</development>;
    }

    Binding.prototype.getItemById = function(item) {
      throw new Error("Not implemented");
    };

    Binding.prototype.getValue = function() {
      throw new Error("Not implemented");
    };

    Binding.prototype.getDefaultValue = function() {
      switch (typeof this.getValue()) {
        case 'string':
          return '';
        case 'number':
          return 0;
        case 'boolean':
          return false;
        default:
          return null;
      }
    };

    Binding.prototype.setValue = function(val) {
      throw new Error("Not implemented");
    };

    Binding.prototype.onError = function(err) {};

    Binding.prototype.update = function() {
      null;
      //<development>;
      var result;
      if (this.updatePending) {
        if (this.updateLoop > MAX_LOOPS) {
          return;
        }
        if (++this.updateLoop === MAX_LOOPS) {
          log.error(this.getLoopDetectedErrorMessage());
          return;
        }
      } else {
        this.updateLoop = 0;
      }
      //</development>;
      result = util.tryFunction(this.func, this.ctx, this.args);
      if (result instanceof Error) {
        this.onError(result);
        result = this.getDefaultValue();
      }
      //<development>;
      this.updatePending = true;
      //</development>;
      this.setValue(result);
      //<development>;
      this.updatePending = false;
      //</development>;
    };

    Binding.prototype.getLoopDetectedErrorMessage = function() {
      return "Potential loop detected";
    };

    Binding.prototype.destroy = function() {
      var connection;
      while (connection = this.connections.pop()) {
        connection.destroy();
      }
      this.args = null;
    };

    return Binding;

  })();

}).call(this);

},{"../util":"../../../node_modules/@neft/core/src/util/index.litcoffee","../log":"../../../node_modules/@neft/core/src/log/index.litcoffee","../assert":"../../../node_modules/@neft/core/src/assert/index.litcoffee","../observable-array":"../../../node_modules/@neft/core/src/observable-array/index.js"}],"../../../node_modules/@neft/core/src/renderer/impl/base/level1/binding.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  var Binding, eventLoop, log,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  log = require('../../../../log');

  eventLoop = require('../../../../event-loop');

  Binding = require('../../../../binding');

  module.exports = function(impl) {
    var RendererBinding;
    RendererBinding = (function(superClass) {
      var pool;

      extend(RendererBinding, superClass);

      pool = [];

      RendererBinding.factory = function(obj, prop, binding, ctx) {
        var elem;
        if (elem = pool.pop()) {
          RendererBinding.call(elem, obj, prop, binding, ctx);
        }
        return RendererBinding.New(obj, prop, binding, ctx, elem);
      };

      RendererBinding.New = function(obj, prop, binding, ctx, target) {
        if (target == null) {
          target = new RendererBinding(obj, prop, binding, ctx);
        }
        eventLoop.setImmediate(function() {
          Binding.New(binding, ctx, target);
          return target.update();
        });
        return target;
      };

      function RendererBinding(obj1, prop1, binding, ctx) {
        this.obj = obj1;
        this.prop = prop1;
        RendererBinding.__super__.constructor.call(this, binding, ctx);
      }

      RendererBinding.prototype.getItemById = function(item) {
        if (typeof item === 'object') {
          return item;
        } else if (item === 'this') {
          return this.ctx;
        } else if (item === 'windowItem') {
          return impl.windowItem;
        } else {
          return impl.Renderer[item] || null;
        }
      };

      RendererBinding.prototype.update = function() {
        eventLoop.lock();
        RendererBinding.__super__.update.call(this);
        eventLoop.release();
      };

      RendererBinding.prototype.getValue = function() {
        return this.obj[this.prop];
      };

      RendererBinding.prototype.setValue = function(val) {
        if ((val == null) || val !== val) {
          val = this.getDefaultValue();
        }
        this.obj[this.prop] = val;
      };

      RendererBinding.prototype.getLoopDetectedErrorMessage = function() {
        return "Potential loop detected. Property binding `" + this.prop + "` on `" + this.ctx + "` has been disabled.";
      };

      //<development>;

      RendererBinding.prototype.onError = function(err) {
        var shouldPrint;
        if (this.obj.running !== void 0) {
          shouldPrint = this.obj.running !== false;
        } else if (this.obj.parent !== void 0) {
          shouldPrint = this.obj.parent !== null;
        } else {
          shouldPrint = true;
        }
        if (shouldPrint) {
          log.error("Failed property `" + this.prop + "` binding in style `" + this.ctx + "`: `" + err + "`");
        }
      };

      //</development>;

      RendererBinding.prototype.destroy = function() {
        this.obj._impl.bindings[this.prop] = null;
        RendererBinding.__super__.destroy.call(this);
        pool.push(this);
      };

      return RendererBinding;

    })(Binding);
    return {
      setItemBinding: function(prop, binding, ctx) {
        var data, ref;
        data = this._impl;
        if (data.bindings == null) {
          data.bindings = {};
        }
        if ((ref = data.bindings[prop]) != null) {
          ref.destroy();
        }
        if (binding != null) {
          data.bindings[prop] = RendererBinding.factory(this, prop, binding, ctx);
        }
      }
    };
  };

}).call(this);

},{"../../../../log":"../../../node_modules/@neft/core/src/log/index.litcoffee","../../../../event-loop":"../../../node_modules/@neft/core/src/event-loop/index.coffee","../../../../binding":"../../../node_modules/@neft/core/src/binding/index.coffee"}],"../../../node_modules/@neft/core/src/renderer/impl/base/level1/anchors.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  var assert, eventLoop, isArray, log, utils;

  assert = require('../../../../assert');

  log = require('../../../../log');

  utils = require('../../../../util');

  eventLoop = require('../../../../event-loop');

  log = log.scope('Renderer', 'Anchors');

  isArray = Array.isArray;

  module.exports = function(impl) {
    var Anchor, GET_ZERO, MAX_LOOPS, MultiAnchor, createAnchor, exports, getBaseAnchors, getBaseAnchorsPerAnchorType, getItemProp, getMarginValue, getSourceValue, getSourceWatchProps, getTargetValue, getTargetWatchProps, isMultiAnchor, onChildInsert, onChildPop, onChildrenChange, onNextSiblingChange, onParentChange, onPreviousSiblingChange, pending, queue, queueIndex, queues, update, updateItems;
    GET_ZERO = function() {
      return 0;
    };
    MAX_LOOPS = 10;
    queueIndex = 0;
    queues = [[], []];
    queue = queues[queueIndex];
    pending = false;
    updateItems = function() {
      var anchor, currentQueue;
      pending = false;
      currentQueue = queue;
      queue = queues[++queueIndex % queues.length];
      while (currentQueue.length) {
        anchor = currentQueue.pop();
        anchor.pending = false;
        anchor.update();
      }
    };
    update = function() {
      if (this.pending) {
        return;
      }
      this.pending = true;
      queue.push(this);
      if (!pending) {
        pending = true;
        eventLoop.setImmediate(updateItems);
      }
    };
    getItemProp = {
      left: 'x',
      top: 'y',
      right: 'x',
      bottom: 'y',
      horizontalCenter: 'x',
      verticalCenter: 'y',
      fillWidthSize: 'width',
      fillHeightSize: 'height'
    };
    getSourceWatchProps = {
      left: ['onMarginChange'],
      top: ['onMarginChange'],
      right: ['onMarginChange', 'onWidthChange'],
      bottom: ['onMarginChange', 'onHeightChange'],
      horizontalCenter: ['onMarginChange', 'onWidthChange'],
      verticalCenter: ['onMarginChange', 'onHeightChange'],
      fillWidthSize: ['onMarginChange'],
      fillHeightSize: ['onMarginChange']
    };
    getTargetWatchProps = {
      left: {
        parent: [],
        children: [],
        sibling: ['onXChange']
      },
      top: {
        parent: [],
        children: [],
        sibling: ['onYChange']
      },
      right: {
        parent: ['onWidthChange'],
        sibling: ['onXChange', 'onWidthChange']
      },
      bottom: {
        parent: ['onHeightChange'],
        sibling: ['onYChange', 'onHeightChange']
      },
      horizontalCenter: {
        parent: ['onWidthChange'],
        sibling: ['onXChange', 'onWidthChange']
      },
      verticalCenter: {
        parent: ['onHeightChange'],
        sibling: ['onYChange', 'onHeightChange']
      },
      fillWidthSize: {
        parent: ['onWidthChange'],
        children: [],
        sibling: ['onWidthChange']
      },
      fillHeightSize: {
        parent: ['onHeightChange'],
        children: [],
        sibling: ['onHeightChange']
      }
    };
    getSourceValue = {
      left: function(item) {
        return 0;
      },
      top: function(item) {
        return 0;
      },
      right: function(item) {
        return -item._width;
      },
      bottom: function(item) {
        return -item._height;
      },
      horizontalCenter: function(item) {
        return -item._width / 2;
      },
      verticalCenter: function(item) {
        return -item._height / 2;
      },
      fillWidthSize: function(item) {
        return 0;
      },
      fillHeightSize: function(item) {
        return 0;
      }
    };
    getTargetValue = {
      left: {
        parent: function(target) {
          return 0;
        },
        children: function(target) {
          return 0;
        },
        sibling: function(target) {
          return target._x;
        }
      },
      top: {
        parent: function(target) {
          return 0;
        },
        children: function(target) {
          return 0;
        },
        sibling: function(target) {
          return target._y;
        }
      },
      right: {
        parent: function(target) {
          return target._width;
        },
        sibling: function(target) {
          return target._x + target._width;
        }
      },
      bottom: {
        parent: function(target) {
          return target._height;
        },
        sibling: function(target) {
          return target._y + target._height;
        }
      },
      horizontalCenter: {
        parent: function(target) {
          return target._width / 2;
        },
        sibling: function(target) {
          return target._x + target._width / 2;
        }
      },
      verticalCenter: {
        parent: function(target) {
          return target._height / 2;
        },
        sibling: function(target) {
          return target._y + target._height / 2;
        }
      },
      fillWidthSize: {
        parent: function(target) {
          return target._width;
        },
        children: function(target) {
          var child, size, tmp;
          tmp = 0;
          size = 0;
          child = target.firstChild;
          while (child) {
            if (child._visible) {
              tmp = child._x + child._width;
              if (tmp > size) {
                size = tmp;
              }
            }
            child = child.nextSibling;
          }
          return size;
        },
        sibling: function(target) {
          return target._width;
        }
      },
      fillHeightSize: {
        parent: function(target) {
          return target._height;
        },
        children: function(target) {
          var child, size, tmp;
          tmp = 0;
          size = 0;
          child = target.firstChild;
          while (child) {
            if (child._visible) {
              tmp = child._y + child._height;
              if (tmp > size) {
                size = tmp;
              }
            }
            child = child.nextSibling;
          }
          return size;
        },
        sibling: function(target) {
          return target._height;
        }
      }
    };
    getMarginValue = {
      left: function(margin) {
        return margin._left;
      },
      top: function(margin) {
        return margin._top;
      },
      right: function(margin) {
        return -margin._right;
      },
      bottom: function(margin) {
        return -margin._bottom;
      },
      horizontalCenter: function(margin) {
        return margin._left - margin._right;
      },
      verticalCenter: function(margin) {
        return margin._top - margin._bottom;
      },
      fillWidthSize: function(margin) {
        return -margin._left - margin._right;
      },
      fillHeightSize: function(margin) {
        return -margin._top - margin._bottom;
      }
    };
    onParentChange = function(oldVal) {
      var handler, i, j, len, len1, ref, ref1, val;
      if (oldVal) {
        ref = getTargetWatchProps[this.line].parent;
        for (i = 0, len = ref.length; i < len; i++) {
          handler = ref[i];
          oldVal[handler].disconnect(update, this);
        }
      }
      if (val = this.targetItem = this.item._parent) {
        ref1 = getTargetWatchProps[this.line].parent;
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          handler = ref1[j];
          val[handler].connect(update, this);
        }
      }
      update.call(this);
    };
    onNextSiblingChange = function(oldVal) {
      var handler, i, j, len, len1, ref, ref1, val;
      if (oldVal) {
        ref = getTargetWatchProps[this.line].sibling;
        for (i = 0, len = ref.length; i < len; i++) {
          handler = ref[i];
          oldVal[handler].disconnect(update, this);
        }
      }
      if (val = this.targetItem = this.item._nextSibling) {
        ref1 = getTargetWatchProps[this.line].sibling;
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          handler = ref1[j];
          val[handler].connect(update, this);
        }
      }
      update.call(this);
    };
    onPreviousSiblingChange = function(oldVal) {
      var handler, i, j, len, len1, ref, ref1, val;
      if (oldVal) {
        ref = getTargetWatchProps[this.line].sibling;
        for (i = 0, len = ref.length; i < len; i++) {
          handler = ref[i];
          oldVal[handler].disconnect(update, this);
        }
      }
      if (val = this.targetItem = this.item._previousSibling) {
        ref1 = getTargetWatchProps[this.line].sibling;
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          handler = ref1[j];
          val[handler].connect(update, this);
        }
      }
      update.call(this);
    };
    onChildInsert = function(child) {
      child.onVisibleChange.connect(update, this);
      if (this.source === 'fillWidthSize') {
        child.onXChange.connect(update, this);
        child.onWidthChange.connect(update, this);
      }
      if (this.source === 'fillHeightSize') {
        child.onYChange.connect(update, this);
        child.onHeightChange.connect(update, this);
      }
      update.call(this);
    };
    onChildPop = function(child) {
      child.onVisibleChange.disconnect(update, this);
      if (this.source === 'fillWidthSize') {
        child.onXChange.disconnect(update, this);
        child.onWidthChange.disconnect(update, this);
      }
      if (this.source === 'fillHeightSize') {
        child.onYChange.disconnect(update, this);
        child.onHeightChange.disconnect(update, this);
      }
      update.call(this);
    };
    onChildrenChange = function(added, removed) {
      if (added) {
        onChildInsert.call(this, added);
      }
      if (removed) {
        return onChildPop.call(this, removed);
      }
    };
    Anchor = (function() {
      var pool;

      pool = [];

      Anchor.factory = function(item, source, def) {
        var elem;
        if (pool.length > 0 && (elem = pool.pop())) {
          Anchor.call(elem, item, source, def);
          return elem;
        } else {
          return new Anchor(item, source, def);
        }
      };

      function Anchor(item1, source1, def) {
        var child, handler, i, item, j, len, len1, line, ref, ref1, source, target;
        this.item = item1;
        this.source = source1;
        item = this.item;
        source = this.source;
        target = def[0], line = def[1];
        if (line == null) {
          line = source;
        }
        this.target = target;
        this.line = line;
        this.pending = false;
        this.updateLoops = 0;
        if (target === 'parent' || item._parent === target) {
          this.type = 'parent';
        } else if (target === 'children') {
          this.type = 'children';
        } else {
          this.type = 'sibling';
        }
        ref = getSourceWatchProps[source];
        for (i = 0, len = ref.length; i < len; i++) {
          handler = ref[i];
          item[handler].connect(update, this);
        }
        this.prop = getItemProp[source];
        this.getSourceValue = getSourceValue[source];
        this.getTargetValue = getTargetValue[line][this.type];
        this.targetItem = null;
        Object.seal(this);
        if (typeof this.getTargetValue !== 'function') {
          this.getTargetValue = GET_ZERO;
          log.error("Unknown anchor `" + this + "` given");
        }
        switch (target) {
          case 'parent':
            this.targetItem = item._parent;
            item.onParentChange.connect(onParentChange, this);
            onParentChange.call(this, null);
            break;
          case 'children':
            this.targetItem = item.children;
            item.onChildrenChange.connect(onChildrenChange, this);
            child = this.targetItem.firstChild;
            while (child) {
              onChildInsert.call(this, child);
              child = child.nextSibling;
            }
            break;
          case 'nextSibling':
            this.targetItem = item._nextSibling;
            item.onNextSiblingChange.connect(onNextSiblingChange, this);
            onNextSiblingChange.call(this, null);
            break;
          case 'previousSibling':
            this.targetItem = item._previousSibling;
            item.onPreviousSiblingChange.connect(onPreviousSiblingChange, this);
            onPreviousSiblingChange.call(this, null);
            break;
          default:
            if (!utils.isObject(target) || !(handler in target)) {
              log.error("Unknown anchor `" + this + "` given");
              return;
            }
            if (this.targetItem = target) {
              ref1 = getTargetWatchProps[line][this.type];
              for (j = 0, len1 = ref1.length; j < len1; j++) {
                handler = ref1[j];
                this.targetItem[handler].connect(update, this);
              }
            }
            update.call(this);
        }
      }

      Anchor.prototype.update = function() {
        var fails, margin, r, targetItem;
        if (!this.item || this.updateLoops >= MAX_LOOPS) {
          return;
        }
        switch (this.target) {
          case 'parent':
            targetItem = this.item._parent;
            break;
          case 'children':
            targetItem = this.item.children;
            break;
          case 'nextSibling':
            targetItem = this.item._nextSibling;
            break;
          case 'previousSibling':
            targetItem = this.item._previousSibling;
            break;
          default:
            targetItem = this.targetItem;
        }
        if (!targetItem || targetItem !== this.targetItem) {
          return;
        }
        if (targetItem) {
          //<development>;
          fails = this.item._parent;
          fails && (fails = targetItem !== this.item._children);
          fails && (fails = this.item._parent !== targetItem);
          fails && (fails = this.item._parent !== targetItem._parent);
          if (fails) {
            log.error("Invalid anchor point; you can anchor only to a parent or a sibling; item '" + (this.item.toString()) + ".anchors." + this.source + ": " + this.target + "'");
          }
          //</development>;
          r = this.getSourceValue(this.item) + this.getTargetValue(targetItem);
        } else {
          r = 0;
        }
        if (margin = this.item._margin) {
          r += getMarginValue[this.source](margin);
        }
        this.updateLoops++;
        this.item[this.prop] = r;
        if (this.updateLoops === MAX_LOOPS) {
          log.error("Potential anchors loop detected; recalculating on this anchor (" + this + ") has been disabled");
          this.updateLoops++;
        } else if (this.updateLoops < MAX_LOOPS) {
          this.updateLoops--;
        }
      };

      Anchor.prototype.destroy = function() {
        var child, handler, i, j, len, len1, ref, ref1;
        switch (this.target) {
          case 'parent':
            this.item.onParentChange.disconnect(onParentChange, this);
            break;
          case 'children':
            this.item.onChildrenChange.disconnect(onChildrenChange, this);
            child = this.item.children.firstChild;
            while (child) {
              onChildPop.call(this, child, -1);
              child = child.nextSibling;
            }
            break;
          case 'nextSibling':
            this.item.onNextSiblingChange.disconnect(onNextSiblingChange, this);
            break;
          case 'previousSibling':
            this.item.onPreviousSiblingChange.disconnect(onPreviousSiblingChange, this);
        }
        ref = getSourceWatchProps[this.source];
        for (i = 0, len = ref.length; i < len; i++) {
          handler = ref[i];
          this.item[handler].disconnect(update, this);
        }
        if (this.targetItem) {
          ref1 = getTargetWatchProps[this.line][this.type];
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            handler = ref1[j];
            this.targetItem[handler].disconnect(update, this);
          }
        }
        this.item = this.targetItem = null;
        pool.push(this);
      };

      Anchor.prototype.toString = function() {
        return (this.item.toString()) + ".anchors." + this.source + ": " + this.target + "." + this.line;
      };

      return Anchor;

    })();
    getBaseAnchors = {
      centerIn: ['horizontalCenter', 'verticalCenter'],
      fillWidth: ['fillWidthSize', 'left'],
      fillHeight: ['fillHeightSize', 'top'],
      fill: ['fillWidthSize', 'fillHeightSize', 'left', 'top']
    };
    getBaseAnchorsPerAnchorType = {
      __proto__: null
    };
    isMultiAnchor = function(source) {
      return !!getBaseAnchors[source];
    };
    MultiAnchor = (function() {
      var pool;

      pool = [];

      MultiAnchor.factory = function(item, source, def) {
        var elem;
        if (elem = pool.pop()) {
          MultiAnchor.call(elem, item, source, def);
          return elem;
        } else {
          return new MultiAnchor(item, source, def);
        }
      };

      function MultiAnchor(item, source, def) {
        var anchor, baseAnchors, i, len, line, ref;
        assert.lengthOf(def, 1);
        this.anchors = [];
        def = [def[0], ''];
        this.pending = false;
        baseAnchors = (ref = getBaseAnchorsPerAnchorType[def[0]]) != null ? ref[source] : void 0;
        if (baseAnchors == null) {
          baseAnchors = getBaseAnchors[source];
        }
        for (i = 0, len = baseAnchors.length; i < len; i++) {
          line = baseAnchors[i];
          def[1] = line;
          anchor = Anchor.factory(item, line, def);
          this.anchors.push(anchor);
        }
        return;
      }

      MultiAnchor.prototype.update = function() {
        var anchor, i, len, ref;
        ref = this.anchors;
        for (i = 0, len = ref.length; i < len; i++) {
          anchor = ref[i];
          anchor.update();
        }
      };

      MultiAnchor.prototype.destroy = function() {
        var anchor, i, len, ref;
        ref = this.anchors;
        for (i = 0, len = ref.length; i < len; i++) {
          anchor = ref[i];
          anchor.destroy();
        }
        pool.push(this);
      };

      return MultiAnchor;

    })();
    createAnchor = function(item, source, def) {
      if (isMultiAnchor(source)) {
        return MultiAnchor.factory(item, source, def);
      } else {
        return Anchor.factory(item, source, def);
      }
    };
    return exports = {
      setItemAnchor: function(type, val) {
        var anchors, base;
        if (val !== null) {
          assert.isArray(val);
        }
        anchors = (base = this._impl).anchors != null ? base.anchors : base.anchors = {};
        if (!val && !anchors[type]) {
          return;
        }
        if (anchors[type]) {
          anchors[type].destroy();
          anchors[type] = null;
        }
        if (val) {
          anchors[type] = createAnchor(this, type, val);
        }
      }
    };
  };

}).call(this);

},{"../../../../assert":"../../../node_modules/@neft/core/src/assert/index.litcoffee","../../../../log":"../../../node_modules/@neft/core/src/log/index.litcoffee","../../../../util":"../../../node_modules/@neft/core/src/util/index.litcoffee","../../../../event-loop":"../../../node_modules/@neft/core/src/event-loop/index.coffee"}],"../../../node_modules/@neft/core/src/renderer/impl/base/utils.coffee":[function(require,module,exports) {
(function() {
  var utils;

  utils = require('../../../util');

  module.exports = function(impl) {
    return {
      INTEGER_PROPERTIES: {
        __proto__: null,
        x: true,
        y: true,
        width: true,
        height: true
      },
      SETTER_METHODS_NAMES: {
        __proto__: null,
        'x': 'setItemX',
        'y': 'setItemY',
        'width': 'setItemWidth',
        'height': 'setItemHeight',
        'opacity': 'setItemOpacity',
        'rotation': 'setItemRotation',
        'scale': 'setItemScale',
        'offsetX': 'setImageOffsetX',
        'offsetY': 'setImageOffsetY',
        'sourceWidth': 'setImageSourceWidth',
        'sourceHeight': 'setImageSourceHeight'
      },
      createDataCloner: function(extend, base) {
        return function() {
          var func, json, obj;
          obj = extend;
          if (base != null) {
            extend = impl.Types[extend].DATA;
            obj = utils.clone(extend);
            utils.merge(obj, base);
            utils.merge(base, obj);
          }
          json = JSON.stringify(obj);
          func = Function("return " + json);
          return func;
        };
      },
      radToDeg: (function() {
        var RAD;
        RAD = 180 / Math.PI;
        return function(val) {
          return val * RAD;
        };
      })(),
      degToRad: (function() {
        var DEG;
        DEG = Math.PI / 180;
        return function(val) {
          return val * DEG;
        };
      })()
    };
  };

}).call(this);

},{"../../../util":"../../../node_modules/@neft/core/src/util/index.litcoffee"}],"../../../node_modules/@neft/core/src/renderer/impl/base/index.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  var utils;

  utils = require('../../../util');

  exports.Types = {
    Item: require('./level0/item'),
    Image: require('./level0/image'),
    Text: require('./level0/text'),
    Native: require('./level0/native'),
    FontLoader: require('./level0/loader/font'),
    Device: require('./level0/device'),
    Screen: require('./level0/screen'),
    Navigator: require('./level0/navigator'),
    Rectangle: require('./level1/rectangle'),
    Animation: require('./level1/animation'),
    PropertyAnimation: require('./level1/animation/property'),
    NumberAnimation: require('./level1/animation/number')
  };

  exports.Extras = {
    Binding: require('./level1/binding'),
    Anchors: require('./level1/anchors')
  };

  exports.items = {};

  exports.utils = require('./utils')(exports);

  exports.pixelRatio = 1;

  exports.setWindow = function(item) {};

}).call(this);

},{"../../../util":"../../../node_modules/@neft/core/src/util/index.litcoffee","./level0/item":"../../../node_modules/@neft/core/src/renderer/impl/base/level0/item.coffee","./level0/image":"../../../node_modules/@neft/core/src/renderer/impl/base/level0/image.coffee","./level0/text":"../../../node_modules/@neft/core/src/renderer/impl/base/level0/text.coffee","./level0/native":"../../../node_modules/@neft/core/src/renderer/impl/base/level0/native.coffee","./level0/loader/font":"../../../node_modules/@neft/core/src/renderer/impl/base/level0/loader/font.coffee","./level0/device":"../../../node_modules/@neft/core/src/renderer/impl/base/level0/device.coffee","./level0/screen":"../../../node_modules/@neft/core/src/renderer/impl/base/level0/screen.coffee","./level0/navigator":"../../../node_modules/@neft/core/src/renderer/impl/base/level0/navigator.coffee","./level1/rectangle":"../../../node_modules/@neft/core/src/renderer/impl/base/level1/rectangle.coffee","./level1/animation":"../../../node_modules/@neft/core/src/renderer/impl/base/level1/animation.coffee","./level1/animation/property":"../../../node_modules/@neft/core/src/renderer/impl/base/level1/animation/property.coffee","./level1/animation/number":"../../../node_modules/@neft/core/src/renderer/impl/base/level1/animation/number.coffee","./level1/binding":"../../../node_modules/@neft/core/src/renderer/impl/base/level1/binding.coffee","./level1/anchors":"../../../node_modules/@neft/core/src/renderer/impl/base/level1/anchors.coffee","./utils":"../../../node_modules/@neft/core/src/renderer/impl/base/utils.coffee"}],"../../../node_modules/@neft/core/src/renderer/impl/css/utils.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  var SignalDispatcher, isFirefox, transformCSSProp, transformProp;

  SignalDispatcher = require('../../../signal').SignalDispatcher;

  isFirefox = exports.isFirefox = navigator.userAgent.indexOf('Firefox') !== -1;

  transformProp = exports.transformProp = (function() {
    var prefix;
    prefix = (function() {
      var tmp;
      tmp = document.createElement('div');
      if (tmp.style.transform != null) {
        return 't';
      }
      if (tmp.style.webkitTransform != null) {
        return 'webkitT';
      }
      if (tmp.style.mozTransform != null) {
        return 'mozT';
      }
      if (tmp.style.msTransform != null) {
        return 'msT';
      }
    })();
    return prefix + "ransform";
  })();

  transformCSSProp = exports.transformCSSProp = (function() {
    if (transformProp.indexOf('T') !== -1) {
      return '-' + transformProp.replace('T', '-t');
    } else {
      return transformProp;
    }
  })();

  exports.transform3dSupported = (function() {
    var tmp;
    tmp = document.createElement('div');
    tmp.style[transformProp] = 'translate3d(1px,1px,0)';
    return tmp.style[transformProp].indexOf('translate3d') !== -1;
  })();

  exports.onWindowLoad = function(callback) {
    if (document.readyState === 'complete') {
      callback();
    } else {
      window.addEventListener('load', callback);
    }
  };

  exports.rad2deg = function(rad) {
    return rad * 180 / Math.PI;
  };

  exports.getFontWeight = function(val) {
    return Math.round(val * 8) * 100 + 100;
  };

  exports.prependElement = function(parent, child) {
    var first;
    if (first = parent.firstChild) {
      return parent.insertBefore(child, first);
    } else {
      return parent.appendChild(child);
    }
  };

  exports.insertAfter = function(child, afterElem) {
    if (afterElem.nextElement) {
      return afterElem.parentElement.insertBefore(child, afterElem.nextElement);
    } else {
      return afterElem.parentElement.appendChild(child);
    }
  };

  exports.encodeImageSrc = (function() {
    var DATA_URI_RE;
    DATA_URI_RE = /^data:([a-z+\/]+)/;
    return function(val) {
      if (DATA_URI_RE.test(val)) {
        return val.replace(/\#/g, encodeURIComponent('#'));
      } else {
        return val;
      }
    };
  })();

  exports.pointerWheelEventName = (function() {
    if ('onwheel' in document.createElement("div")) {
      return 'wheel';
    } else if (document.onmousewheel !== void 0) {
      return 'mousewheel';
    } else {
      return 'MozMousePixelScroll';
    }
  })();

  exports.keysEvents = (function() {
    var SPECIAL_KEY_CODES, keysEvents, pressedKeys;
    SPECIAL_KEY_CODES = {
      32: 'Space',
      13: 'Enter',
      9: 'Tab',
      27: 'Escape',
      8: 'Backspace',
      16: 'Shift',
      17: 'Ctrl',
      18: 'Alt',
      20: 'CapsLock',
      144: 'NumLock',
      37: 'Left',
      38: 'Up',
      39: 'Right',
      40: 'Down',
      45: 'Insert',
      46: 'Delete',
      36: 'Home',
      35: 'End',
      33: 'PageUp',
      34: 'PageDown',
      112: 'F1',
      113: 'F2',
      114: 'F3',
      115: 'F4',
      116: 'F5',
      117: 'F6',
      118: 'F7',
      119: 'F8',
      120: 'F9',
      121: 'F10',
      122: 'F11',
      123: 'F12'
    };
    pressedKeys = Object.create(null);
    window.addEventListener('keydown', function(e) {
      var code, device, key, keyboard;
      code = e.which || e.keyCode;
      key = SPECIAL_KEY_CODES[code] || String.fromCharCode(code);
      if (pressedKeys[key] && pressedKeys[key] !== e) {
        return false;
      }
      pressedKeys[key] = e;
      if (device = keysEvents.device) {
        keyboard = device.keyboard;
        keyboard.key = key;
        return device.emit('onKeyPress', keyboard);
      }
    });
    window.addEventListener('keydown', function(e) {
      var code, device, key, keyboard;
      code = e.which || e.keyCode;
      key = SPECIAL_KEY_CODES[code] || String.fromCharCode(code);
      if (device = keysEvents.device) {
        keyboard = device.keyboard;
        keyboard.key = key;
        return device.emit('onKeyHold', keyboard);
      }
    });
    window.addEventListener('keyup', function(e) {
      var code, device, key, keyboard;
      code = e.which || e.keyCode;
      key = SPECIAL_KEY_CODES[code] || String.fromCharCode(code);
      pressedKeys[key] = null;
      if (device = keysEvents.device) {
        keyboard = device.keyboard;
        keyboard.key = key;
        return device.emit('onKeyRelease', keyboard);
      }
    });
    window.addEventListener('keypress', function(e) {
      var code, device, keyboard, text;
      code = e.charCode || e.which || e.keyCode;
      text = String.fromCharCode(code);
      if (device = keysEvents.device) {
        keyboard = device.keyboard;
        keyboard.text = text;
        return device.emit('onKeyInput', keyboard);
      }
    });
    return keysEvents = {
      device: null
    };
  })();

  exports.onFontLoaded = new SignalDispatcher();

  exports.loadingFonts = Object.create(null);

  exports.loadedFonts = Object.create(null);

  exports.DEFAULT_FONTS = {
    __proto__: null,
    'sans': 'neft-sans-6-normal',
    'sans-serif': 'neft-sans-serif-6-normal',
    'monospace': 'neft-monospace-6-normal'
  };

  exports.NEFT_DEFAULT_FONTS = {
    __proto__: null,
    'neft-sans-6-normal': 'sans',
    'neft-sans-serif-6-normal': 'sans-serif',
    'neft-monospace-6-normal': 'monospace'
  };

}).call(this);

},{"../../../signal":"../../../node_modules/@neft/core/src/signal/index.js"}],"../../../node_modules/@neft/core/src/renderer/impl/css/level0/item.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  var SIGNALS_CURSORS, implUtils, isTouch, log, now, signal, utils;

  utils = require('../../../../util');

  implUtils = require('../utils');

  log = require('../../../../log');

  signal = require('../../../../signal');

  log = log.scope('Renderer', 'CSS Implementation');

  now = Date.now;

  isTouch = 'ontouchstart' in window;

  SIGNALS_CURSORS = {
    pointer: {
      onClick: 'pointer'
    }
  };

  module.exports = function(impl) {
    var DATA, LAYER_GC_DELAY, LAYER_MIN_OPERATIONS, NOP, USE_GPU, layers, rad2deg, ref, transformProp, updateTransforms;
    LAYER_MIN_OPERATIONS = 8;
    LAYER_GC_DELAY = 1000;
    USE_GPU = impl.utils.transform3dSupported;
    layers = [];
    ref = impl.utils, transformProp = ref.transformProp, rad2deg = ref.rad2deg;
    implUtils = impl.utils;
    if (USE_GPU) {
      setInterval(function() {
        var i, layer, n;
        i = 0;
        n = layers.length;
        while (i < n) {
          layer = layers[i];
          layer.operations = (layer.operations * 0.5) | 0;
          if (layer.operations < LAYER_MIN_OPERATIONS) {
            layer.operations = 0;
            if (i === n - 1) {
              layers.pop();
            } else {
              layers[i] = layers.pop();
            }
            n--;
            if (layer.isLayer) {
              layer.elem.setAttribute('class', '');
              layer.isLayer = false;
              updateTransforms(layer);
              layer.operations = 0;
              console.assert(layer.isLayer === false);
            }
            layer.isInLayers = false;
          } else {
            i++;
          }
        }
      }, LAYER_GC_DELAY);
    }
    updateTransforms = function(data) {
      var transform;
      transform = '';
      if (USE_GPU) {
        if (!data.isInLayers) {
          layers.push(data);
          data.isInLayers = true;
        }
        if (!data.isLayer && data.operations >= LAYER_MIN_OPERATIONS) {
          data.elem.setAttribute('class', 'layer');
          data.isLayer = true;
        } else {
          data.operations++;
        }
      }
      if (data.isLayer) {
        transform = "translate3d(" + data.x + "px, " + data.y + "px, 0) ";
      } else {
        transform = "translate(" + data.x + "px, " + data.y + "px) ";
      }
      if (data.rotation) {
        transform += "rotate(" + (rad2deg(data.rotation)) + "deg) ";
      }
      if (data.scale !== 1) {
        transform += "scale(" + data.scale + ") ";
      }
      data.elemStyle[transformProp] = transform;
    };
    NOP = function() {};
    DATA = utils.merge({
      bindings: null,
      anchors: null,
      elem: null,
      elemStyle: null,
      linkElem: null,
      x: 0,
      y: 0,
      rotation: 0,
      scale: 1,
      mozFontSubpixel: true,
      isLayer: false,
      isInLayers: false,
      operations: 0
    }, impl.ITEM_DATA);
    return {
      DATA: DATA,
      createData: impl.utils.createDataCloner(DATA),
      create: function(data) {
        if (data.elem == null) {
          data.elem = document.createElement('div');
        }
        data.elemStyle = data.elem.style;
        //<development>;
        data.elem.setAttribute('neft-debug', this.toString());
        return //</development>;
      },
      setItemParent: function(val) {
        var elem, ref1, self;
        self = this;
        elem = this._impl.elem;
        if ((ref1 = elem.parentElement) != null) {
          ref1.removeChild(elem);
        }
        if (val) {
          val._impl.elem.appendChild(elem);
        }
      },
      insertItemBefore: function(val) {
        var newParent, oldParent, parent, valElem;
        parent = val ? val._parent : this._parent;
        valElem = val ? val._impl.elem : null;
        oldParent = this._impl.elem.parentElement;
        newParent = parent._impl.elem;
        newParent.insertBefore(this._impl.elem, valElem);
      },
      setItemVisible: function(val) {
        this._impl.elemStyle.display = val ? 'inline' : 'none';
      },
      setItemClip: function(val) {
        this._impl.elemStyle.overflow = val ? 'hidden' : 'visible';
      },
      setItemWidth: function(val) {
        this._impl.elemStyle.width = val + "px";
      },
      setItemHeight: function(val) {
        this._impl.elemStyle.height = val + "px";
      },
      setItemX: function(val) {
        this._impl.x = val;
        updateTransforms(this._impl);
      },
      setItemY: function(val) {
        this._impl.y = val;
        updateTransforms(this._impl);
      },
      setItemScale: function(val) {
        this._impl.scale = val;
        updateTransforms(this._impl);
      },
      setItemRotation: function(val) {
        this._impl.rotation = val;
        updateTransforms(this._impl);
      },
      setItemOpacity: function(val) {
        this._impl.elemStyle.opacity = val;
      },
      attachItemSignal: function(ns, signalName) {
        var cursor, ref1;
        if (ns === 'pointer') {
          impl.pointer.attachItemSignal.call(this, signalName);
        }
        if (cursor = (ref1 = SIGNALS_CURSORS[ns]) != null ? ref1[signalName] : void 0) {
          this._ref._impl.elemStyle.cursor = cursor;
        }
      }
    };
  };

}).call(this);

},{"../../../../util":"../../../node_modules/@neft/core/src/util/index.litcoffee","../utils":"../../../node_modules/@neft/core/src/renderer/impl/css/utils.coffee","../../../../log":"../../../node_modules/@neft/core/src/log/index.litcoffee","../../../../signal":"../../../node_modules/@neft/core/src/signal/index.js"}],"../../../node_modules/@neft/core/src/renderer/impl/css/level0/image.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  var SignalDispatcher;

  SignalDispatcher = require('../../../../signal').SignalDispatcher;

  module.exports = function(impl) {
    var DATA, Item, cache, callCallback, createImage, getImage, onImageLoaded, round;
    Item = impl.Types.Item;
    round = Math.round;
    cache = Object.create(null);
    createImage = function(src) {
      var img, obj;
      img = document.createElement('img');
      img.src = src;
      img.addEventListener('error', function() {
        obj.status = 'error';
        return obj.onLoaded.emit();
      });
      img.addEventListener('load', function() {
        var xhr;
        obj.status = 'ready';
        obj.width = this.naturalWidth || this.width;
        obj.height = this.naturalHeight || this.height;
        if (obj.width === 0 && obj.height === 0 && /\.svg$/.test(obj.source)) {
          xhr = new XMLHttpRequest;
          xhr.overrideMimeType('text/xml');
          xhr.open('get', obj.source, true);
          xhr.onload = function() {
            var responseXML, svg, viewBox;
            responseXML = xhr.responseXML;
            svg = responseXML.querySelector('svg');
            viewBox = svg.getAttribute('viewBox');
            if (viewBox) {
              viewBox = viewBox.split(' ');
            } else {
              viewBox = [0, 0, 0, 0];
            }
            obj.width = parseFloat(svg.getAttribute('width')) || parseFloat(viewBox[2]);
            obj.height = parseFloat(svg.getAttribute('height')) || parseFloat(viewBox[3]);
            return obj.onLoaded.emit();
          };
          xhr.onerror = function() {
            obj.status = 'error';
            return obj.onLoaded.emit();
          };
          return xhr.send();
        } else {
          return obj.onLoaded.emit();
        }
      });
      obj = {
        source: src,
        status: 'loading',
        width: 0,
        height: 0,
        elem: img,
        onLoaded: new SignalDispatcher()
      };
      return obj;
    };
    getImage = function(src) {
      var r;
      if (r = cache[src]) {
        return r;
      }
      r = createImage(src);
      if (!/^data:/.test(src)) {
        cache[src] = r;
      }
      return r;
    };
    onImageLoaded = function() {
      var data, img;
      data = this._impl;
      img = data.image;
      if (img.source === data.source) {
        callCallback.call(this);
      }
    };
    callCallback = function() {
      var callback, data, img, ref;
      data = this._impl;
      img = data.image;
      callback = data.callback;
      if ((ref = data.innerElem) != null) {
        ref.style.display = img.status === 'ready' ? 'block' : 'none';
      }
      if (img.status === 'ready') {
        if (callback != null) {
          callback.call(this, null, img);
        }
      } else if (img.status === 'error') {
        if (callback != null) {
          callback.call(this, true);
        }
      } else {
        img.onLoaded.connect(onImageLoaded, this);
      }
    };
    DATA = {
      innerElem: null,
      callback: null,
      source: '',
      image: null
    };
    return {
      DATA: DATA,
      createData: impl.utils.createDataCloner('Item', DATA),
      _getImage: getImage,
      _callCallback: callCallback,
      create: function(data) {
        var innerElem, self;
        self = this;
        Item.create.call(this, data);
        innerElem = data.innerElem = document.createElement('img');
        innerElem.style.display = 'none';
        data.elem.appendChild(innerElem);
      },
      setImageSource: function(val, callback) {
        var data;
        val = impl.utils.encodeImageSrc(val);
        data = this._impl;
        data.innerElem.src = val;
        data.source = val;
        data.callback = callback;
        data.image = getImage(val);
        callCallback.call(this);
      }
    };
  };

}).call(this);

},{"../../../../signal":"../../../node_modules/@neft/core/src/signal/index.js"}],"../../../node_modules/@neft/core/src/renderer/impl/css/level0/text.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  var eventLoop, utils;

  utils = require('../../../../util');

  eventLoop = require('../../../../event-loop');

  module.exports = function(impl) {
    var CONTAINS_HTML_RE, DATA, Image, Item, SHEET, exports, fontSizes, getTextSizeWidth, hatchery, implUtils, isFontReady, loadingTextsByFonts, ref, reloadFontFamily, reloadFontFamilyQueue, round, updateContent, updateHTMLTextSize, updatePlainTextSize, updateTextStyle;
    ref = impl.Types, Item = ref.Item, Image = ref.Image;
    implUtils = impl.utils;
    round = Math.round;
    hatchery = impl._hatchery;
    reloadFontFamilyQueue = [];
    isFontReady = false;
    implUtils.onWindowLoad(function() {
      var elem, styles;
      isFontReady = true;
      while (elem = reloadFontFamilyQueue.pop()) {
        elem.style.fontFamily = elem.style.fontFamily;
      }
      styles = document.createElement('style');
      styles.innerHTML = SHEET;
      document.body.appendChild(styles);
    });
    reloadFontFamily = function(family) {
      if ((this._font && this._font._family === family) || (!this._font && family === 'sans-serif')) {
        this._impl.innerElemStyle.fontFamily = this._impl.innerElemStyle.fontFamily;
      }
    };
    fontSizes = Object.create(null);
    getTextSizeWidth = (function() {
      var canvas, ctx;
      canvas = document.createElement('canvas');
      ctx = typeof canvas.getContext === "function" ? canvas.getContext('2d') : void 0;
      return function(font, text) {
        var fontSize;
        fontSize = fontSizes[font] || (fontSizes[font] = Object.create(null));
        return fontSize[text] || (fontSize[text] = (ctx.font = font, ctx.measureText(text).width || 0.1));
      };
    })();
    loadingTextsByFonts = Object.create(null);
    implUtils.onFontLoaded.connect(function(name) {
      var arr, char, font, item, j, len, sizes;
      for (font in fontSizes) {
        sizes = fontSizes[font];
        for (char in sizes) {
          sizes[char] = 0;
        }
      }
      if (arr = loadingTextsByFonts[name]) {
        for (j = 0, len = arr.length; j < len; j++) {
          item = arr[j];
          updateContent(item);
        }
        if (implUtils.loadedFonts[name]) {
          loadingTextsByFonts[name] = null;
        }
      }
    });
    updatePlainTextSize = function(item) {
      var arr, char, charWidth, data, font, fontDef, fontFamily, height, i, j, letterSpacing, lineHeight, maxWidth, pixelSize, ref1, text, textLength, width, wordSpacing, wordWidth, x;
      data = item._impl;
      text = data.text, fontFamily = data.fontFamily;
      if (font = item._font) {
        pixelSize = font._pixelSize;
        letterSpacing = font._letterSpacing;
        wordSpacing = font._wordSpacing;
      } else {
        pixelSize = 14;
        letterSpacing = 0;
        wordSpacing = 0;
      }
      if (implUtils.loadingFonts[fontFamily]) {
        arr = loadingTextsByFonts[fontFamily] || (loadingTextsByFonts[fontFamily] = []);
        arr.push(item);
      }
      fontDef = data.font;
      x = width = 0;
      height = lineHeight = pixelSize * item._lineHeight;
      maxWidth = data.wrap ? item._width : 2e308;
      wordWidth = charWidth = 0;
      textLength = text.length;
      char = '';
      for (i = j = 0, ref1 = textLength; j <= ref1; i = j += 1) {
        if (i < textLength) {
          char = text[i];
          charWidth = getTextSizeWidth(fontDef, char);
          charWidth += letterSpacing;
        }
        if (i === textLength || char === ' ' || char === '-') {
          if (x + wordWidth > maxWidth) {
            height += lineHeight;
            x = 0;
          }
          x += wordWidth;
          if (x > width) {
            width = x;
          }
          if (char === ' ' || char === '-') {
            x += charWidth + wordSpacing;
          }
          wordWidth = 0;
        } else if (char === '\n') {
          if (x > width) {
            width = x;
          }
          height += lineHeight;
          x = 0;
        } else {
          wordWidth += charWidth;
        }
      }
      data.contentWidth = width;
      data.contentHeight = height;
    };
    updateHTMLTextSize = function(item) {
      var arr, data, fontFamily, innerElem;
      data = item._impl;
      innerElem = data.innerElem, fontFamily = data.fontFamily;
      if (implUtils.loadingFonts[fontFamily]) {
        arr = loadingTextsByFonts[fontFamily] || (loadingTextsByFonts[fontFamily] = []);
        arr.push(item);
      }
      data.contentWidth = innerElem.offsetWidth;
      data.contentHeight = innerElem.offsetHeight;
      if (innerElem.parentNode === hatchery) {
        implUtils.prependElement(data.elem, innerElem);
      } else if (data.contentHeight === 0) {
        hatchery.appendChild(data.innerElem);
        updateContent(item);
      }
    };
    updateContent = (function() {
      var currentQueue, pending, queue, queues, updateAll;
      pending = false;
      currentQueue = 0;
      queues = [[], []];
      queue = queues[currentQueue];
      updateAll = function() {
        var data, isAutoSize, item, j, k, len, len1, thisQueue;
        thisQueue = queue;
        currentQueue = ++currentQueue % 2;
        queue = queues[currentQueue];
        pending = false;
        for (j = 0, len = thisQueue.length; j < len; j++) {
          item = thisQueue[j];
          data = item._impl;
          data.contentUpdatePending = false;
          if (data.containsHTML) {
            data.innerElem.innerHTML = data.text;
          } else {
            data.innerElem.textContent = data.text;
          }
        }
        for (k = 0, len1 = thisQueue.length; k < len1; k++) {
          item = thisQueue[k];
          data = item._impl;
          isAutoSize = item._autoWidth || item._autoHeight;
          if (data.text) {
            if (isAutoSize) {
              if (data.containsHTML) {
                updateHTMLTextSize(item);
              } else {
                updatePlainTextSize(item);
              }
            }
          } else {
            data.contentWidth = 0;
            data.contentHeight = 0;
          }
        }
        while (item = thisQueue.pop()) {
          data = item._impl;
          item.contentWidth = data.contentWidth;
          item.contentHeight = data.contentHeight;
        }
      };
      return function(item) {
        var data;
        data = item._impl;
        if (data.contentUpdatePending) {
          return;
        }
        queue.push(item);
        data.contentUpdatePending = true;
        if (!pending) {
          pending = true;
          eventLoop.setImmediate(updateAll);
        }
      };
    })();
    updateTextStyle = function(item) {
      var data, defaultFontFamily, fontFamily, fontSize, fontWeight, innerElemStyle;
      data = item._impl;
      innerElemStyle = data.innerElemStyle, fontFamily = data.fontFamily;
      fontWeight = innerElemStyle.fontWeight, fontSize = innerElemStyle.fontSize;
      fontWeight || (fontWeight = '400');
      fontSize || (fontSize = '14px');
      fontFamily || (fontFamily = implUtils.DEFAULT_FONTS['sans-serif']);
      if (defaultFontFamily = impl.utils.NEFT_DEFAULT_FONTS[fontFamily]) {
        fontFamily += ", " + defaultFontFamily;
      }
      data.font = fontWeight + " " + fontSize + " " + fontFamily;
    };
    SHEET = ".text {\n    width: auto;\n    height: auto;\n    white-space: pre;\n    font-size: 14px;\n    line-height: 1;\n    font-family: " + implUtils.DEFAULT_FONTS['sans-serif'] + ", sans-serif;\n    margin-top: " + (impl.utils.isFirefox ? 1 : 0) + "px;\n}\n.text.textVerticalCenterAlign {\n    top: 50%;\n    " + impl.utils.transformCSSProp + ": translateY(-50%);\n}\n.text.textVerticalBottomAlign {\n    top: 100%;\n    " + impl.utils.transformCSSProp + ": translateY(-100%);\n}";
    CONTAINS_HTML_RE = /<|&#/;
    DATA = {
      stylesheet: null,
      wrap: false,
      innerElem: null,
      innerElemStyle: null,
      uid: 0,
      contentUpdatePending: false,
      containsHTML: false,
      text: '',
      font: "14px " + implUtils.DEFAULT_FONTS['sans-serif'] + ", sans-serif",
      fontFamily: implUtils.DEFAULT_FONTS['sans-serif'],
      contentWidth: 0,
      contentHeight: 0
    };
    return exports = {
      DATA: DATA,
      _createTextElement: function(item) {
        var data, innerElem;
        data = item._impl;
        innerElem = data.innerElem = document.createElement('span');
        data.innerElemStyle = innerElem.style;
        return innerElem.setAttribute('class', 'text');
      },
      createData: impl.utils.createDataCloner('Item', DATA),
      create: function(data) {
        Item.create.call(this, data);
        exports._createTextElement(this);
        impl.utils.prependElement(data.elem, data.innerElem);
        if (impl.utils.loadingFonts['sans-serif'] > 0) {
          return impl.utils.onFontLoaded.connect(reloadFontFamily, this);
        }
      },
      setText: function(val) {
        val = val.replace(/<[bB][rR]\s?\/?>/g, "\n");
        this._impl.text = val;
        this._impl.containsHTML = CONTAINS_HTML_RE.test(val);
        updateContent(this);
      },
      setTextWrap: function(val) {
        var data;
        data = this._impl;
        data.wrap = val;
        data.innerElemStyle.whiteSpace = val ? 'pre-wrap' : 'pre';
        data.innerElemStyle.width = val ? "100%" : 'auto';
      },
      updateTextContentSize: function() {
        updateContent(this);
      },
      setTextColor: function(val) {
        this._impl.innerElemStyle.color = val;
      },
      setTextLinkColor: (function() {
        var uid;
        uid = 0;
        return function(val) {
          var data;
          data = this._impl;
          if (!data.stylesheet) {
            data.stylesheet = document.createElement('style');
            data.elem.appendChild(data.stylesheet);
            data.innerElem.setAttribute('id', "textLinkColor" + uid);
            data.uid = uid++;
          }
          data.stylesheet.innerHTML = "#textLinkColor" + data.uid + " a { color: " + val + "; }";
        };
      })(),
      setTextLineHeight: function(val) {
        this._impl.innerElemStyle.lineHeight = val;
        updateContent(this);
      },
      setTextFontFamily: function(val) {
        this._impl.fontFamily = val;
        if (impl.utils.loadingFonts[val] > 0) {
          impl.utils.onFontLoaded.connect(reloadFontFamily, this);
        }
        if (impl.utils.DEFAULT_FONTS[val]) {
          val = impl.utils.DEFAULT_FONTS[val] + ", " + val;
        } else {
          val = "'" + val + "'";
        }
        this._impl.innerElemStyle.fontFamily = val;
        updateTextStyle(this);
        updateContent(this);
      },
      setTextFontPixelSize: function(val) {
        val = round(val);
        this._impl.innerElemStyle.fontSize = val + "px";
        updateTextStyle(this);
        updateContent(this);
      },
      setTextFontWordSpacing: function(val) {
        this._impl.innerElemStyle.wordSpacing = val + "px";
        updateContent(this);
      },
      setTextFontLetterSpacing: function(val) {
        this._impl.innerElemStyle.letterSpacing = val + "px";
        updateContent(this);
      },
      setTextAlignmentHorizontal: function(val) {
        this._impl.innerElemStyle.textAlign = val;
      },
      setTextAlignmentVertical: (function() {
        var CLASSES;
        CLASSES = {
          top: '',
          center: 'textVerticalCenterAlign',
          bottom: 'textVerticalBottomAlign'
        };
        return function(val) {
          this._impl.innerElem.setAttribute('class', "text " + CLASSES[val]);
        };
      })()
    };
  };

}).call(this);

},{"../../../../util":"../../../node_modules/@neft/core/src/util/index.litcoffee","../../../../event-loop":"../../../node_modules/@neft/core/src/event-loop/index.coffee"}],"../../../node_modules/@neft/core/src/renderer/impl/css/level0/native.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  module.exports = function(impl) {
    var DATA, items;
    items = impl.items;
    DATA = {};
    return {
      DATA: DATA,
      createData: impl.utils.createDataCloner('Item', DATA),
      create: function(data) {
        return impl.Types.Item.create.call(this, data);
      },
      updateNativeSize: function() {
        var elem, elemNextSibling, elemParent, setPropertyValue;
        setPropertyValue = impl.Renderer.itemUtils.setPropertyValue;
        elem = this._impl.innerElem || this._impl.elem;
        if ((this._autoWidth || this._autoHeight) && !elem.offsetParent) {
          elemNextSibling = elem.nextSibling;
          elemParent = elem.parentNode;
          impl._hatchery.appendChild(elem);
        }
        if (this._autoWidth) {
          setPropertyValue(this, 'width', elem.offsetWidth);
        }
        if (this._autoHeight) {
          setPropertyValue(this, 'height', elem.offsetHeight);
        }
        if (elemNextSibling) {
          elemParent.insertBefore(elem, elemNextSibling);
        } else if (elemParent) {
          elemParent.appendChild(elem);
        }
      }
    };
  };

}).call(this);

},{}],"../../../node_modules/@neft/core/src/renderer/impl/css/level0/loader/font.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  var SAMPLE_TEXT, log;

  log = require('../../../../../log');

  log = log.scope('Renderer', 'FontLoader');

  SAMPLE_TEXT = 'ABC¬Ō∑ę†ī¨^óĻ„‚ąś∂ń©ķ∆Żł…ĺ«żźć√ļńĶ≤≥÷Ń™€ßį§¶•Ľľ–≠ŕŘ‹›řŖŗ°Š‚—Īő';

  module.exports = function(impl) {
    var detectLoad, emitLoadedSignal, implUtils, markAsLoaded;
    implUtils = impl.utils;
    detectLoad = function(name) {
      var elem1, elem2, sync;
      elem1 = document.createElement('span');
      elem1.textContent = SAMPLE_TEXT;
      elem1.style.fontFamily = "sans-serif";
      impl._hatchery.appendChild(elem1);
      elem2 = document.createElement('span');
      elem2.textContent = SAMPLE_TEXT;
      elem2.style.fontFamily = name + ", sans-serif";
      impl._hatchery.appendChild(elem2);
      sync = function() {
        if (elem1.offsetWidth !== elem2.offsetWidth || implUtils.loadedFonts[name]) {
          impl._hatchery.removeChild(elem1);
          impl._hatchery.removeChild(elem2);
          return markAsLoaded(name);
        } else {
          return requestAnimationFrame(sync);
        }
      };
      return requestAnimationFrame(sync);
    };
    emitLoadedSignal = function(name) {
      if (!implUtils.loadedFonts[name]) {
        return implUtils.onFontLoaded.emit(name);
      }
    };
    markAsLoaded = function(name) {
      if (!implUtils.loadedFonts[name]) {
        implUtils.loadedFonts[name] = true;
        implUtils.loadingFonts[name] = 0;
        implUtils.onFontLoaded.emit(name);
      }
    };
    return {
      loadFont: function(name, source, sources, callback) {
        var append, base, i, len, styles, urlStr;
        urlStr = '';
        for (i = 0, len = sources.length; i < len; i++) {
          source = sources[i];
          urlStr += "url('" + source + "'), ";
        }
        urlStr = urlStr.slice(0, -2);
        styles = document.createElement('style');
        styles.innerHTML = "@font-face {\n    font-family: \"" + name + "\";\n    src: " + urlStr + ";\n    font-style: normal;\n    font-weight: 400;\n}";
        if ((base = implUtils.loadingFonts)[name] == null) {
          base[name] = 0;
        }
        implUtils.loadingFonts[name]++;
        append = function() {
          var xhr;
          document.body.appendChild(styles);
          detectLoad(name);
          xhr = new XMLHttpRequest;
          xhr.open('get', sources[0], true);
          xhr.onerror = function() {
            return callback(new Error("Cannot load font " + sources[0]));
          };
          xhr.onload = function() {
            var emitFontLoadedSignal;
            callback();
            if (implUtils.loadingFonts[name] === 1) {
              emitFontLoadedSignal = function() {
                return emitLoadedSignal(name);
              };
              setTimeout(emitFontLoadedSignal, 50);
              setTimeout(emitFontLoadedSignal, 500);
              setTimeout(emitFontLoadedSignal, 1000);
              return setTimeout(function() {
                return markAsLoaded(name);
              }, 2000);
            } else {
              return implUtils.loadingFonts[name]--;
            }
          };
          return xhr.send();
        };
        if (document.readyState !== 'complete') {
          return window.addEventListener('load', append);
        } else {
          return append();
        }
      }
    };
  };

}).call(this);

},{"../../../../../log":"../../../node_modules/@neft/core/src/log/index.litcoffee"}],"../../../node_modules/@neft/core/src/renderer/impl/css/level0/device.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  module.exports = function(impl) {
    var getNormalizedEvent;
    getNormalizedEvent = (function() {
      var NORMALIZED_VALUE, event, getDeltas, isSlowContinuous;
      NORMALIZED_VALUE = 3;
      isSlowContinuous = false;
      event = {
        deltaX: 0,
        deltaY: 0
      };
      getDeltas = function(e) {
        var ref, ref1, ref2, x, y;
        x = (ref = -e.deltaX * 3 || e.wheelDeltaX) != null ? ref : 0;
        y = (ref1 = (ref2 = -e.deltaY * 3 || e.wheelDeltaY) != null ? ref2 : e.wheelDelta) != null ? ref1 : -e.detail * 3 || 0;
        if (impl.utils.isFirefox && e.deltaMode === e.DOM_DELTA_LINE) {
          x *= 10;
          y *= 10;
        }
        event.deltaX = x;
        return event.deltaY = y;
      };
      return function(e) {
        var delta;
        getDeltas(e);
        if (!isSlowContinuous) {
          delta = event.deltaX || event.deltaY || 3;
          if ((delta > 0 && delta < 3) || (delta < 0 && delta > -3)) {
            isSlowContinuous = true;
          }
        }
        if (isSlowContinuous) {
          event.deltaX *= NORMALIZED_VALUE;
          event.deltaY *= NORMALIZED_VALUE;
        }
        return event;
      };
    })();
    return {
      initDeviceNamespace: function() {
        var device, onPointerWheel, pointer, updatePointerEvent;
        device = this;
        pointer = this.pointer;
        impl.utils.keysEvents.device = device;
        this._pixelRatio = window.devicePixelRatio || 1;
        this._desktop = !('ontouchstart' in window);
        this._phone = 'ontouchstart' in window && Math.min(this._width, this._height) / Math.max(this._width, this._height) < 0.75;
        this._platform = (function() {
          var userAgent;
          userAgent = navigator.userAgent;
          switch (true) {
            case /Android/i.test(userAgent):
              return 'Android';
            case /iPhone|iPad|iPod/i.test(userAgent):
              return 'iOS';
            case /BlackBerry/i.test(userAgent):
              return 'BlackBerry';
            case /IEMobile|WPDesktop/i.test(userAgent):
              return 'WindowsPhone';
            case /Linux|X11/i.test(userAgent):
              return 'Linux';
            case /Windows/i.test(userAgent):
              return 'Windows';
            case /Mac_PowerPC|Macintosh/i.test(userAgent):
              return 'OSX';
            default:
              return 'Unix';
          }
        })();
        updatePointerEvent = function(event) {
          var obj, ref, ref1;
          obj = ((ref = event.touches) != null ? ref[0] : void 0) || ((ref1 = event.changedTouches) != null ? ref1[0] : void 0) || event;
          pointer.x = obj.pageX;
          pointer.y = obj.pageY;
        };
        (function() {
          var onPointerPress, touchEvents;
          touchEvents = 0;
          onPointerPress = function(e) {
            if ((typeof TouchEvent !== "undefined" && TouchEvent !== null) && e instanceof TouchEvent) {
              touchEvents++;
            } else if (e instanceof MouseEvent) {
              if (touchEvents > 0) {
                touchEvents--;
                return;
              }
            }
            updatePointerEvent(e);
            device.emit('onPointerPress', pointer);
          };
          window.addEventListener('mousedown', onPointerPress);
          return window.addEventListener('touchstart', onPointerPress);
        })();
        (function() {
          var onPointerRelease, touchEvents;
          touchEvents = 0;
          onPointerRelease = function(e) {
            if ((typeof TouchEvent !== "undefined" && TouchEvent !== null) && e instanceof TouchEvent) {
              touchEvents++;
            } else if (e instanceof MouseEvent) {
              if (touchEvents > 0) {
                touchEvents--;
                return;
              }
            }
            updatePointerEvent(e);
            device.emit('onPointerRelease', pointer);
          };
          window.addEventListener('mouseup', onPointerRelease);
          return window.addEventListener('touchend', onPointerRelease);
        })();
        (function() {
          var onPointerMove, touchEvents;
          touchEvents = 0;
          onPointerMove = function(e) {
            if ((typeof TouchEvent !== "undefined" && TouchEvent !== null) && e instanceof TouchEvent) {
              touchEvents++;
            } else if (e instanceof MouseEvent) {
              if (touchEvents > 0) {
                touchEvents--;
                return;
              }
            }
            updatePointerEvent(e);
            device.emit('onPointerMove', pointer);
          };
          window.addEventListener('mousemove', onPointerMove);
          return window.addEventListener('touchmove', onPointerMove);
        })();
        onPointerWheel = function(e) {
          var event;
          event = getNormalizedEvent(e);
          pointer.deltaX = event.deltaX;
          pointer.deltaY = event.deltaY;
          return device.emit('onPointerWheel', pointer);
        };
        return window.addEventListener(impl.utils.pointerWheelEventName, onPointerWheel);
      }
    };
  };

}).call(this);

},{}],"../../../node_modules/@neft/core/src/renderer/impl/css/level0/screen.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  module.exports = function(impl) {
    return {
      initScreenNamespace: function() {
        var getOrientation, screen;
        screen = this;
        this._width = screen.width;
        this._height = screen.height;
        this._touch = 'ontouchstart' in window;
        getOrientation = (function(_this) {
          return function() {
            screen.orientation = (function() {
              switch (window.orientation) {
                case 180:
                  return 'InvertedPortrait';
                case -90:
                  return 'Landscape';
                case 90:
                  return 'InvertedLandscape';
                default:
                  return 'Portrait';
              }
            })();
          };
        })(this);
        window.addEventListener('orientationchange', getOrientation);
        return window.addEventListener('load', function() {
          getOrientation();
          return setTimeout(getOrientation, 1000);
        });
      }
    };
  };

}).call(this);

},{}],"../../../node_modules/@neft/core/src/renderer/impl/css/level0/navigator.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  module.exports = function(impl) {
    return {
      initNavigatorNamespace: function() {
        this._language = window.navigator.language;
        return this._browser = true;
      }
    };
  };

}).call(this);

},{}],"../../../node_modules/@neft/core/src/renderer/impl/css/level1/rectangle.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  module.exports = function(impl) {
    var DATA, Item, div, round;
    Item = impl.Types.Item;
    round = Math.round;
    DATA = {
      innerElem: null,
      innerElemStyle: null
    };
    div = (function() {
      div = document.createElement('div');
      div.setAttribute('class', 'rect');
      return div;
    })();
    return {
      DATA: DATA,
      createData: impl.utils.createDataCloner('Item', DATA),
      create: function(data) {
        var innerElem;
        Item.create.call(this, data);
        innerElem = data.innerElem = div.cloneNode(false);
        impl.utils.prependElement(data.elem, innerElem);
        return data.innerElemStyle = innerElem.style;
      },
      setRectangleColor: function(val) {
        return this._impl.innerElemStyle.backgroundColor = val;
      },
      setRectangleRadius: function(val) {
        val = round(val);
        return this._impl.innerElemStyle.borderRadius = val + "px";
      },
      setRectangleBorderColor: function(val) {
        return this._impl.innerElemStyle.borderColor = val;
      },
      setRectangleBorderWidth: function(val) {
        val = round(val);
        return this._impl.innerElemStyle.borderWidth = val + "px";
      }
    };
  };

}).call(this);

},{}],"../../../node_modules/@neft/core/src/renderer/impl/css/index.coffee":[function(require,module,exports) {
(function() {
  // when=NEFT_BROWSER;
  'use strict';
  var SHEET, body, hatchery, isTouch, utils;

  utils = require('../../../util');

  SHEET = "#hatchery { visibility: hidden; } #hatchery span { display: inline-block; } * { margin: 0; padding: 0; -webkit-tap-highlight-color: rgba(255, 255, 255, 0) !important; -webkit-focus-ring-color: rgba(255, 255, 255, 0) !important; outline: none !important; } #styles { position: absolute; width: 100%; height: 100%; overflow: hidden; top: 0; left: 0 } html, body { height: 100%; margin: 0; padding: 0; -webkit-overflow-scrolling: touch; } #body { position: absolute; z-index: 0; } #styles * { position: absolute; } #styles span span { position: static; } span * { display: inline; font-weight: inherit; font-size: inherit; font-family: inherit; font-style: inherit; border: 0; background: none; } span b, span strong { font-weight: bolder; } span i, span em { font-style: italic; } code { white-space: pre; } img { width: 100%; height: 100%; pointer-events: none; } .link { position: absolute; width: 100%; height: 100%; z-index: 1; } .rect { width: 100%; height: 100%; box-sizing: border-box; border: 0 solid transparent; } .unselectable, .unselectable:focus { -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; outline-style:none; } .layer { -moz-perspective: 1px; /* Firefox */ -webkit-transform-style: preserve-3d; /* Safari */ -webkit-perspective: 1px; /* Safari */ -webkit-backface-visibility: hidden; /* Safari, Chrome */ }";

  isTouch = 'ontouchstart' in window;

  body = document.createElement('div');

  body.setAttribute('id', 'styles');

  hatchery = document.createElement('div');

  hatchery.setAttribute('id', 'hatchery');

  document.documentElement.appendChild(hatchery);

  window.addEventListener('load', function() {
    var meta, styles;
    document.body.appendChild(hatchery);
    document.body.appendChild(body);
    styles = document.createElement('style');
    styles.innerHTML = SHEET;
    document.body.appendChild(styles);
    if (isTouch) {
      meta = document.createElement('meta');
      meta.setAttribute('name', 'viewport');
      meta.setAttribute('content', 'width=device-width, initial-scale=1');
      return document.head.appendChild(meta);
    }
  });

  module.exports = function(impl) {
    var items, resize;
    items = impl.items;
    impl._hatchery = hatchery;
    utils.merge(impl.utils, require('./utils'));
    window.addEventListener('resize', resize = function() {
      var pixelRatio;
      pixelRatio = window.devicePixelRatio || 1;
      if (pixelRatio % 1 !== 0) {
        impl.setWindowSize(innerWidth + 1, innerHeight + 1);
      } else {
        impl.setWindowSize(innerWidth, innerHeight);
      }
    });
    body.addEventListener('scroll', function() {
      window.scrollTo(0, 0);
    });
    return {
      AbstractTypes: utils.clone(impl.Types),
      Types: {
        Item: require('./level0/item'),
        Image: require('./level0/image'),
        Text: require('./level0/text'),
        Native: require('./level0/native'),
        FontLoader: require('./level0/loader/font'),
        Device: require('./level0/device'),
        Screen: require('./level0/screen'),
        Navigator: require('./level0/navigator'),
        Rectangle: require('./level1/rectangle')
      },
      setWindow: function(item) {
        var onLoaded;
        onLoaded = function() {
          var child;
          if (document.readyState === 'complete') {
            while (child = body.firstChild) {
              body.removeChild(child);
            }
            body.appendChild(item._impl.elem);
            resize();
            setTimeout(resize);
            setTimeout(resize, 500);
            requestAnimationFrame(resize);
          }
        };
        if (document.readyState === 'complete') {
          onLoaded();
        } else {
          document.addEventListener('readystatechange', onLoaded);
        }
      }
    };
  };

}).call(this);

},{"../../../util":"../../../node_modules/@neft/core/src/util/index.litcoffee","./utils":"../../../node_modules/@neft/core/src/renderer/impl/css/utils.coffee","./level0/item":"../../../node_modules/@neft/core/src/renderer/impl/css/level0/item.coffee","./level0/image":"../../../node_modules/@neft/core/src/renderer/impl/css/level0/image.coffee","./level0/text":"../../../node_modules/@neft/core/src/renderer/impl/css/level0/text.coffee","./level0/native":"../../../node_modules/@neft/core/src/renderer/impl/css/level0/native.coffee","./level0/loader/font":"../../../node_modules/@neft/core/src/renderer/impl/css/level0/loader/font.coffee","./level0/device":"../../../node_modules/@neft/core/src/renderer/impl/css/level0/device.coffee","./level0/screen":"../../../node_modules/@neft/core/src/renderer/impl/css/level0/screen.coffee","./level0/navigator":"../../../node_modules/@neft/core/src/renderer/impl/css/level0/navigator.coffee","./level1/rectangle":"../../../node_modules/@neft/core/src/renderer/impl/css/level1/rectangle.coffee"}],"../../../node_modules/@neft/core/src/renderer/impl.coffee":[function(require,module,exports) {
(function () {
  'use strict';

  var SignalDispatcher, assert, eventLoop, utils;
  assert = console.assert;
  utils = require('../util');
  SignalDispatcher = require('../signal').SignalDispatcher;
  eventLoop = require('../event-loop');

  module.exports = function (Renderer) {
    var ABSTRACT_TYPES, TYPES, abstractImpl, extra, i, impl, j, k, len, len1, len2, name, platformImpl, ref, type, windowItemClass;
    impl = abstractImpl = require('./impl/base');
    impl.Renderer = Renderer;
    impl.windowItem = null;
    impl.serverUrl = '';
    impl.resources = null;
    impl.onWindowItemReady = new SignalDispatcher();
    TYPES = ['Item', 'Image', 'Text', 'Native', 'FontLoader', 'Device', 'Screen', 'Navigator', 'Rectangle', 'Animation', 'PropertyAnimation', 'NumberAnimation'];
    ABSTRACT_TYPES = {
      'Class': true,
      'Transition': true
    };

    if ("1") {
      if ("") {
        platformImpl = require('./impl/pixi')(impl);
      }

      if ("1") {
        platformImpl = require('./impl/css')(impl);
      }

      if ("") {
        platformImpl = require('./impl/native')(impl);
      }
    }

    for (i = 0, len = TYPES.length; i < len; i++) {
      name = TYPES[i];
      type = impl.Types[name] = impl.Types[name](impl);
      utils.merge(impl, type);
    }

    if (platformImpl) {
      utils.mergeDeep(impl, platformImpl);
    }

    for (j = 0, len1 = TYPES.length; j < len1; j++) {
      name = TYPES[j];

      if (typeof impl.Types[name] === 'function') {
        type = impl.Types[name] = impl.Types[name](impl);
        utils.merge(impl, type);
      }
    }

    for (k = 0, len2 = TYPES.length; k < len2; k++) {
      name = TYPES[k];

      if (impl.Types[name].createData) {
        impl.Types[name].createData = impl.Types[name].createData();
      }
    }

    ref = impl.Extras;

    for (name in ref) {
      extra = ref[name];
      extra = impl.Extras[name] = extra(impl);
      utils.merge(impl, extra);
    }

    impl.createObject = function (object, type) {
      var base, obj, ref1;

      if (!ABSTRACT_TYPES[type]) {
        obj = object;

        while (type && impl.Types[type] == null) {
          obj = Object.getPrototypeOf(obj);

          if (!obj) {
            break;
          }

          type = obj.constructor.name;
        }
      }

      object._impl = ((ref1 = impl.Types[type]) != null ? typeof ref1.createData === "function" ? ref1.createData() : void 0 : void 0) || {};

      if ((base = object._impl).bindings == null) {
        base.bindings = {};
      }

      return Object.seal(object._impl);
    };

    impl.initializeObject = function (object, type) {
      var obj, ref1, ref2;

      if (!ABSTRACT_TYPES[type]) {
        obj = object;

        while (type && impl.Types[type] == null) {
          obj = Object.getPrototypeOf(obj);
          type = obj.constructor.name;
        }

        return (ref1 = impl.Types[type]) != null ? (ref2 = ref1.create) != null ? ref2.call(object, object._impl) : void 0 : void 0;
      }
    };

    windowItemClass = null;

    impl.setWindow = function (_super) {
      return function (item) {
        utils.defineProperty(impl, 'windowItem', utils.ENUMERABLE, item);
        windowItemClass = Renderer.Class.New();
        windowItemClass.target = item;
        windowItemClass.running = true;

        _super.call(impl, item);

        impl.onWindowItemReady.emit(item);
        item.keys.focus = true;
      };
    }(impl.setWindow);

    impl.setWindowSize = function (width, height) {
      if (!impl.windowItem) {
        return;
      }

      eventLoop.lock();
      windowItemClass.changes = {
        width: width,
        height: height
      };
      return eventLoop.release();
    };

    impl.addTypeImplementation = function (type, methods) {
      impl.Types[type] = methods;
      return utils.merge(impl, methods);
    };

    return impl;
  };
}).call(this);
},{"../util":"../../../node_modules/@neft/core/src/util/index.litcoffee","../signal":"../../../node_modules/@neft/core/src/signal/index.js","../event-loop":"../../../node_modules/@neft/core/src/event-loop/index.coffee","./impl/base":"../../../node_modules/@neft/core/src/renderer/impl/base/index.coffee","./impl/css":"../../../node_modules/@neft/core/src/renderer/impl/css/index.coffee"}],"../../../node_modules/@neft/core/src/renderer/utils/item.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  var SignalsEmitter, assert, isArray, log, utils,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  assert = require('../../assert');

  utils = require('../../util');

  SignalsEmitter = require('../../signal').SignalsEmitter;

  log = require('../../log');

  log = log.scope('Renderer');

  isArray = Array.isArray;

  module.exports = function(Renderer, Impl) {
    var CustomObject, DeepObject, FixedObject, MutableDeepObject, NOP, UtilsObject, exports, getObjAsString, getObjFile, getPropHandlerName, getPropInternalName;
    NOP = function() {};
    getObjAsString = function(item) {
      var attrs, ctorName;
      ctorName = item.constructor.name;
      attrs = [];
      if (item.id) {
        attrs.push("id=" + item.id);
      }
      if (item._path) {
        attrs.push("file=" + item._path);
      }
      return ctorName + "(" + (attrs.join(', ')) + ")";
    };
    getObjFile = function(item) {
      var path, tmp;
      path = '';
      tmp = item;
      while (tmp) {
        if (path = tmp.constructor.__file__) {
          break;
        } else {
          tmp = tmp._parent;
        }
      }
      return path || '';
    };
    UtilsObject = (function(superClass) {
      var createClass, initObject, setOpts;

      extend(UtilsObject, superClass);

      initObject = function(opts) {
        var obj, path, prop, val;
        for (prop in opts) {
          val = opts[prop];
          path = exports.splitAttribute(prop);
          prop = path[path.length - 1];
          obj = exports.getObjectByPath(this, path);
          if (typeof val === 'function' && typeof obj[prop] === 'function') {
            obj[prop](exports.bindSignalListener(this, val));
          } else if (Array.isArray(val) && val.length === 2 && typeof val[0] === 'function' && Array.isArray(val[1])) {
            continue;
          } else if (prop in obj) {
            obj[prop] = val;
          } else {
            log.error("Object '" + obj + "' has no property '" + prop + "'");
          }
        }
        for (prop in opts) {
          val = opts[prop];
          path = exports.splitAttribute(prop);
          prop = path[path.length - 1];
          obj = exports.getObjectByPath(this, path);
          if (Array.isArray(val) && val.length === 2 && typeof val[0] === 'function' && Array.isArray(val[1])) {
            obj.createBinding(prop, val);
          }
        }
      };

      setOpts = function(opts) {
        var child, classElem, j, len1, ref1, ref2;
        if (typeof opts.id === 'string') {
          this.id = opts.id;
        }
        if (Array.isArray(opts.children)) {
          ref1 = opts.children;
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            child = ref1[j];
            if (child instanceof Renderer.Item) {
              child.parent = this;
            } else if (this instanceof Renderer.Extension) {
              this._children = opts.children;
            } else if (child instanceof Renderer.Extension && !((ref2 = child._bindings) != null ? ref2.target : void 0)) {
              child.target = this;
            }
          }
        }
        classElem = createClass(opts);
        classElem.target = this;
        classElem.running = true;
      };

      createClass = function(opts) {
        var classElem;
        classElem = Renderer.Class.New();
        classElem._priority = -1;
        classElem.changes = opts;
        return classElem;
      };

      UtilsObject.createProperty = function(object, name) {
        assert.isString(name, "Property must be a string, but '" + name + "' given");
        assert.notLengthOf(name, 0, "Property cannot be an empty string");
        assert.notOk(name in object, object + " already has a property '" + name + "'");
        exports.defineProperty({
          object: object,
          name: name
        });
      };

      UtilsObject.createSignal = function(object, name) {
        assert.isString(name);
        assert.notLengthOf(name, 0);
        assert.notOk(name in object, object + " already has a signal '" + name + "'");
        SignalsEmitter.createSignal(object, name);
      };

      UtilsObject.setOpts = function(object, opts) {
        if (opts.id != null) {
          object.id = opts.id;
        }
        if (object instanceof Renderer.Class || object instanceof FixedObject) {
          initObject.call(object, opts);
        } else {
          setOpts.call(object, opts);
        }
        return object;
      };

      UtilsObject.initialize = function(object, opts) {
        Impl.initializeObject(object, object.constructor.name);
        if (opts) {
          UtilsObject.setOpts(object, opts);
        }
      };

      function UtilsObject() {
        SignalsEmitter.call(this);
        this.id = '';
        //<development>;
        this._path = '';
        //</development>;
        this._impl = null;
        this._bindings = null;
        if (!(this instanceof Renderer.Class)) {
          this._classList = [];
          this._classQueue = [];
          this._extensions = [];
        }
        Impl.createObject(this, this.constructor.name);
      }

      UtilsObject.prototype.createBinding = function(prop, val, ctx) {
        var bindings;
        if (ctx == null) {
          ctx = this;
        }
        assert.isString(prop);
        if (val != null) {
          assert.isArray(val);
        }
        //<development>;
        if (!(prop in this)) {
          log.warn("Binding on the '" + prop + "' property can't be created, because this object (" + (this.toString()) + ") doesn't have such property");
          return;
        }
        //</development>;
        if (!val && (!this._bindings || !this._bindings.hasOwnProperty(prop))) {
          return;
        }
        bindings = this._bindings != null ? this._bindings : this._bindings = {};
        if (bindings[prop] !== val) {
          bindings[prop] = val;
          Impl.setItemBinding.call(this, prop, val, ctx);
        }
      };

      UtilsObject.prototype.toString = function() {
        return getObjAsString(this);
      };

      return UtilsObject;

    })(SignalsEmitter);
    FixedObject = (function(superClass) {
      extend(FixedObject, superClass);

      function FixedObject(opts) {
        FixedObject.__super__.constructor.call(this, opts);
      }

      return FixedObject;

    })(UtilsObject);
    MutableDeepObject = (function(superClass) {
      extend(MutableDeepObject, superClass);

      function MutableDeepObject(ref) {
        assert.instanceOf(ref, UtilsObject);
        MutableDeepObject.__super__.constructor.call(this);
        this._ref = ref;
        this._impl = {
          bindings: null
        };
        this._bindings = null;
        this._extensions = [];
      }

      MutableDeepObject.prototype.createBinding = UtilsObject.prototype.createBinding;

      MutableDeepObject.prototype.toString = function() {
        return getObjAsString(this._ref);
      };

      return MutableDeepObject;

    })(SignalsEmitter);
    DeepObject = (function(superClass) {
      extend(DeepObject, superClass);

      function DeepObject(ref) {
        DeepObject.__super__.constructor.call(this, ref);
      }

      return DeepObject;

    })(MutableDeepObject);
    CustomObject = (function(superClass) {
      extend(CustomObject, superClass);

      function CustomObject(ref) {
        CustomObject.__super__.constructor.call(this, ref);
      }

      return CustomObject;

    })(MutableDeepObject);
    Impl.DeepObject = DeepObject;
    return exports = {
      Object: UtilsObject,
      FixedObject: FixedObject,
      DeepObject: DeepObject,
      MutableDeepObject: MutableDeepObject,
      CustomObject: CustomObject,
      getPropHandlerName: getPropHandlerName = (function() {
        var cache;
        cache = Object.create(null);
        return function(prop) {
          return cache[prop] || (cache[prop] = "on" + (utils.capitalize(prop)) + "Change");
        };
      })(),
      getPropInternalName: getPropInternalName = (function() {
        var cache;
        cache = Object.create(null);
        return function(prop) {
          return cache[prop] || (cache[prop] = "_" + prop);
        };
      })(),
      getInnerPropName: (function() {
        var cache;
        cache = Object.create(null);
        cache[''] = '';
        return function(val) {
          return cache[val] != null ? cache[val] : cache[val] = '_' + val;
        };
      })(),
      splitAttribute: (function() {
        var cache;
        cache = Object.create(null);
        return function(attr) {
          return cache[attr] != null ? cache[attr] : cache[attr] = attr.split('.');
        };
      })(),
      getObjectByPath: function(item, path) {
        var i, len;
        len = path.length - 1;
        i = 0;
        while (i < len) {
          if (!(item = item[path[i]])) {
            return null;
          }
          i++;
        }
        return item;
      },
      bindSignalListener: function(object, func) {
        return function(arg1, arg2) {
          return func.call(object, arg1, arg2);
        };
      },
      defineProperty: function(opts) {
        var basicGetter, basicSetter, customGetter, customSetter, developmentSetter, func, getter, implementation, implementationValue, internalName, name, namespace, namespaceSignalName, propGetter, propSetter, prototype, setter, signalName, uniquePropName, valueConstructor;
        assert.isPlainObject(opts);
        name = opts.name, namespace = opts.namespace, valueConstructor = opts.valueConstructor, implementation = opts.implementation, implementationValue = opts.implementationValue;
        //<development>;
        developmentSetter = opts.developmentSetter;
        //</development>;
        prototype = opts.object || opts.constructor.prototype;
        customGetter = opts.getter;
        customSetter = opts.setter;
        signalName = getPropHandlerName(name);
        if (opts.hasOwnProperty('constructor')) {
          SignalsEmitter.createSignal(opts.constructor, signalName, opts.signalInitializer);
        } else {
          SignalsEmitter.createSignal(prototype, signalName, opts.signalInitializer);
        }
        internalName = getPropInternalName(name);
        propGetter = basicGetter = Function("return this." + internalName);
        if (valueConstructor) {
          propGetter = function() {
            return this[internalName] != null ? this[internalName] : this[internalName] = new valueConstructor(this);
          };
        }
        if (valueConstructor) {
          if (developmentSetter) {
            //<development>;
            propSetter = basicSetter = developmentSetter;
            //</development>;
          } else {
            propSetter = basicSetter = NOP;
          }
        } else if (namespace != null) {
          namespaceSignalName = "on" + (utils.capitalize(namespace)) + "Change";
          uniquePropName = namespace + utils.capitalize(name);
          func = (function() {
            var funcStr;
            funcStr = "return function(val){\n";
            //<development>;
            if (developmentSetter != null) {
              funcStr += "debug.call(this, val);\n";
            }
            //</development>;
            funcStr += "var oldVal = this." + internalName + ";\n";
            funcStr += "if (oldVal === val) return;\n";
            if (implementation != null) {
              if (implementationValue != null) {
                funcStr += "impl.call(this._ref, implValue.call(this._ref, val));\n";
              } else {
                funcStr += "impl.call(this._ref, val);\n";
              }
            }
            funcStr += "this." + internalName + " = val;\n";
            funcStr += "this.emit('" + signalName + "', oldVal);\n";
            funcStr += "this._ref.emit('" + namespaceSignalName + "', '" + name + "', oldVal);\n";
            funcStr += "};";
            return func = new Function('impl', 'implValue', 'debug', funcStr);
          })();
          propSetter = basicSetter = func(implementation, implementationValue, developmentSetter);
        } else {
          func = (function() {
            var funcStr;
            funcStr = "return function(val){\n";
            //<development>;
            if (developmentSetter != null) {
              funcStr += "debug.call(this, val);\n";
            }
            //</development>;
            funcStr += "var oldVal = this." + internalName + ";\n";
            funcStr += "if (oldVal === val) return;\n";
            if (implementation != null) {
              if (implementationValue != null) {
                funcStr += "impl.call(this, implValue.call(this, val));\n";
              } else {
                funcStr += "impl.call(this, val);\n";
              }
            }
            funcStr += "this." + internalName + " = val;\n";
            funcStr += "this.emit('" + signalName + "', oldVal);\n";
            funcStr += "};";
            return func = new Function('impl', 'implValue', 'debug', funcStr);
          })();
          propSetter = basicSetter = func(implementation, implementationValue, developmentSetter);
        }
        getter = customGetter != null ? customGetter(propGetter) : propGetter;
        setter = customSetter != null ? customSetter(propSetter) : propSetter;
        prototype[internalName] = opts.defaultValue;
        utils.defineProperty(prototype, name, null, getter, setter);
        return prototype;
      },
      setPropertyValue: function(item, prop, val) {
        var internalName, oldVal, signalName;
        assert.instanceOf(item, Renderer.Item);
        assert.isString(prop);
        internalName = getPropInternalName(prop);
        signalName = getPropHandlerName(prop);
        oldVal = item[internalName];
        if (val !== oldVal) {
          item[internalName] = val;
          item.emit(signalName, oldVal);
        }
      }
    };
  };

}).call(this);

},{"../../assert":"../../../node_modules/@neft/core/src/assert/index.litcoffee","../../util":"../../../node_modules/@neft/core/src/util/index.litcoffee","../../signal":"../../../node_modules/@neft/core/src/signal/index.js","../../log":"../../../node_modules/@neft/core/src/log/index.litcoffee"}],"../../../node_modules/@neft/core/src/renderer/utils/size.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  var HEIGHT_PROPS, WIDTH_PROPS, assert;

  assert = require('../../assert');

  WIDTH_PROPS = ['width', 'anchors.fill', 'anchors.fillWidth', 'fillWidth'];

  HEIGHT_PROPS = ['height', 'anchors.fill', 'anchors.fillHeight', 'fillHeight'];

  module.exports = function(Renderer) {
    var hasOneOfProps;
    hasOneOfProps = function(item, props) {
      var attributes, bindings, ext, i, j, len, len1, prop, ref;
      assert.instanceOf(item, Renderer.Item);
      ref = item._extensions;
      for (i = 0, len = ref.length; i < len; i++) {
        ext = ref[i];
        if (!(ext instanceof Renderer.Class)) {
          continue;
        }
        attributes = ext.changes._attributes;
        bindings = ext.changes._bindings;
        for (j = 0, len1 = props.length; j < len1; j++) {
          prop = props[j];
          if ((attributes[prop] != null) || (bindings[prop] != null)) {
            return true;
          }
        }
      }
      return false;
    };
    return {
      isAutoWidth: function(item) {
        return !hasOneOfProps(item, WIDTH_PROPS);
      },
      isAutoHeight: function(item) {
        return !hasOneOfProps(item, HEIGHT_PROPS);
      }
    };
  };

}).call(this);

},{"../../assert":"../../../node_modules/@neft/core/src/assert/index.litcoffee"}],"../../../node_modules/@neft/core/src/renderer/utils/color.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  var assert;

  assert = require('../../assert');


  /*
  Parse 3-digit hex, 6-digit hex, rgb, rgba, hsl, hsla, or named color into RGBA hex.
   */

  exports.toRGBAHex = (function() {
    var DIGIT_3_RE, DIGIT_6_RE, HSLA_RE, HSL_RE, NAMED_COLORS, RGBA_RE, RGB_RE, alphaToHex, hslToRgb, numberToHex;
    NAMED_COLORS = {
      '': 0x00000000,
      transparent: 0x00000000,
      black: 0x000000ff,
      silver: 0xc0c0c0ff,
      gray: 0x808080ff,
      white: 0xffffffff,
      maroon: 0x800000ff,
      red: 0xff0000ff,
      purple: 0x800080ff,
      fuchsia: 0xff00ffff,
      green: 0x008000ff,
      lime: 0x00ff00ff,
      olive: 0x808000ff,
      yellow: 0xffff00ff,
      navy: 0x000080ff,
      blue: 0x0000ffff,
      teal: 0x008080ff,
      aqua: 0x00ffffff,
      orange: 0xffa500ff,
      aliceblue: 0xf0f8ffff,
      antiquewhite: 0xfaebd7ff,
      aquamarine: 0x7fffd4ff,
      azure: 0xf0ffffff,
      beige: 0xf5f5dcff,
      bisque: 0xffe4c4ff,
      blanchedalmond: 0xffe4c4ff,
      blueviolet: 0x8a2be2ff,
      brown: 0xa52a2aff,
      burlywood: 0xdeb887ff,
      cadetblue: 0x5f9ea0ff,
      chartreuse: 0x7fff00ff,
      chocolate: 0xd2691eff,
      coral: 0xff7f50ff,
      cornflowerblue: 0x6495edff,
      cornsilk: 0xfff8dcff,
      crimson: 0xdc143cff,
      darkblue: 0x00008bff,
      darkcyan: 0x008b8bff,
      darkgoldenrod: 0xb8860bff,
      darkgray: 0xa9a9a9ff,
      darkgreen: 0x006400ff,
      darkgrey: 0xa9a9a9ff,
      darkkhaki: 0xbdb76bff,
      darkmagenta: 0x8b008bff,
      darkolivegreen: 0x556b2fff,
      darkorange: 0xff8c00ff,
      darkorchid: 0x9932ccff,
      darkred: 0x8b0000ff,
      darksalmon: 0xe9967aff,
      darkseagreen: 0x8fbc8fff,
      darkslateblue: 0x483d8bff,
      darkslategray: 0x2f4f4fff,
      darkslategrey: 0x2f4f4fff,
      darkturquoise: 0x00ced1ff,
      darkviolet: 0x9400d3ff,
      deeppink: 0xff1493ff,
      deepskyblue: 0x00bfffff,
      dimgray: 0x696969ff,
      dimgrey: 0x696969ff,
      dodgerblue: 0x1e90ffff,
      firebrick: 0xb22222ff,
      floralwhite: 0xfffaf0ff,
      forestgreen: 0x228b22ff,
      gainsboro: 0xdcdcdcff,
      ghostwhite: 0xf8f8ffff,
      gold: 0xffd700ff,
      goldenrod: 0xdaa520ff,
      greenyellow: 0xadff2fff,
      grey: 0x808080ff,
      honeydew: 0xf0fff0ff,
      hotpink: 0xff69b4ff,
      indianred: 0xcd5c5cff,
      indigo: 0x4b0082ff,
      ivory: 0xfffff0ff,
      khaki: 0xf0e68cff,
      lavender: 0xe6e6faff,
      lavenderblush: 0xfff0f5ff,
      lawngreen: 0x7cfc00ff,
      lemonchiffon: 0xfffacdff,
      lightblue: 0xadd8e6ff,
      lightcoral: 0xf08080ff,
      lightcyan: 0xe0ffffff,
      lightgoldenrodyellow: 0xfafad2ff,
      lightgray: 0xd3d3d3ff,
      lightgreen: 0x90ee90ff,
      lightgrey: 0xd3d3d3ff,
      lightpink: 0xffb6c1ff,
      lightsalmon: 0xffa07aff,
      lightseagreen: 0x20b2aaff,
      lightskyblue: 0x87cefaff,
      lightslategray: 0x778899ff,
      lightslategrey: 0x778899ff,
      lightsteelblue: 0xb0c4deff,
      lightyellow: 0xffffe0ff,
      limegreen: 0x32cd32ff,
      linen: 0xfaf0e6ff,
      mediumaquamarine: 0x66cdaaff,
      mediumblue: 0x0000cdff,
      mediumorchid: 0xba55d3ff,
      mediumpurple: 0x9370dbff,
      mediumseagreen: 0x3cb371ff,
      mediumslateblue: 0x7b68eeff,
      mediumspringgreen: 0x00fa9aff,
      mediumturquoise: 0x48d1ccff,
      mediumvioletred: 0xc71585ff,
      midnightblue: 0x191970ff,
      mintcream: 0xf5fffaff,
      mistyrose: 0xffe4e1ff,
      moccasin: 0xffe4b5ff,
      navajowhite: 0xffdeadff,
      oldlace: 0xfdf5e6ff,
      olivedrab: 0x6b8e23ff,
      orangered: 0xff4500ff,
      orchid: 0xda70d6ff,
      palegoldenrod: 0xeee8aaff,
      palegreen: 0x98fb98ff,
      paleturquoise: 0xafeeeeff,
      palevioletred: 0xdb7093ff,
      papayawhip: 0xffefd5ff,
      peachpuff: 0xffdab9ff,
      peru: 0xcd853fff,
      pink: 0xffc0cbff,
      plum: 0xdda0ddff,
      powderblue: 0xb0e0e6ff,
      rosybrown: 0xbc8f8fff,
      royalblue: 0x4169e1ff,
      saddlebrown: 0x8b4513ff,
      salmon: 0xfa8072ff,
      sandybrown: 0xf4a460ff,
      seagreen: 0x2e8b57ff,
      seashell: 0xfff5eeff,
      sienna: 0xa0522dff,
      skyblue: 0x87ceebff,
      slateblue: 0x6a5acdff,
      slategray: 0x708090ff,
      slategrey: 0x708090ff,
      snow: 0xfffafaff,
      springgreen: 0x00ff7fff,
      steelblue: 0x4682b4ff,
      tan: 0xd2b48cff,
      thistle: 0xd8bfd8ff,
      tomato: 0xff6347ff,
      turquoise: 0x40e0d0ff,
      violet: 0xee82eeff,
      wheat: 0xf5deb3ff,
      whitesmoke: 0xf5f5f5ff,
      yellowgreen: 0x9acd32ff,
      rebeccapurple: 0x663399ff
    };
    DIGIT_3_RE = /^#[0-9a-fA-F]{3}$/;
    DIGIT_6_RE = /^#[0-9a-fA-F]{6}$/;
    RGB_RE = /^rgb\s*\(\s*([0-9.]+)\s*,\s*([0-9.]+)\s*,\s*([0-9.]+)\s*\)$/;
    RGBA_RE = /^rgba\s*\(\s*([0-9.]+)\s*,\s*([0-9.]+)\s*,\s*([0-9.]+)\s*,\s*([0-9.]+)\s*\)$/;
    HSL_RE = /^hsl\s*\(\s*([0-9.]+)\s*,\s*([0-9.]+)\s*%\s*,\s*([0-9.]+)\s*%\s*\)$/;
    HSLA_RE = /^hsla\s*\(\s*([0-9.]+)\s*,\s*([0-9.]+)\s*%\s*,\s*([0-9.]+)\s*%\s*,\s*([0-9.]+)\s*\)$/;
    numberToHex = function(val) {
      var hex;
      val = parseFloat(val);
      if (val < 0) {
        val = 0;
      } else if (val > 255) {
        val = 255;
      }
      hex = Math.round(val);
      return hex;
    };
    alphaToHex = function(val) {
      return numberToHex(Math.round(parseFloat(val) * 255));
    };
    hslToRgb = (function() {
      var hueToRgb;
      hueToRgb = function(p, q, t) {
        if (t < 0) {
          t += 1;
        }
        if (t > 1) {
          t -= 1;
        }
        if (t * 6 < 1) {
          return p + (q - p) * t * 6;
        }
        if (t * 2 < 1) {
          return q;
        }
        if (t * 3 < 2) {
          return p + (q - p) * (2 / 3 - t) * 6;
        }
        return p;
      };
      return function(hStr, sStr, lStr) {
        var blue, green, h, l, p, q, red, s;
        p = q = h = s = l = 0.0;
        h = (parseFloat(hStr) % 360) / 360;
        s = parseFloat(sStr) / 100;
        l = parseFloat(lStr) / 100;
        if (s === 0) {
          red = green = blue = l;
        } else {
          if (l <= 0.5) {
            q = l * (s + 1);
          } else {
            q = l + s - l * s;
          }
          p = l * 2 - q;
          red = hueToRgb(p, q, h + 1 / 3);
          green = hueToRgb(p, q, h);
          blue = hueToRgb(p, q, h - 1 / 3);
        }
        return Math.round(red * 255) << 16 | Math.round(green * 255) << 8 | Math.round(blue * 255);
      };
    })();
    return function(color, defaultColor) {
      var a, b, g, match, r, result;
      if (defaultColor == null) {
        defaultColor = 'transparent';
      }
      assert.isString(color);
      r = g = b = a = 0;
      if ((result = NAMED_COLORS[color]) !== void 0) {
        return result;
      }
      if (DIGIT_3_RE.test(color)) {
        r = parseInt(color[1], 16);
        g = parseInt(color[2], 16);
        b = parseInt(color[3], 16);
        r = r << 4 | r;
        g = g << 4 | g;
        b = b << 4 | b;
        a = 0xFF;
      } else if (DIGIT_6_RE.test(color)) {
        r = parseInt(color.substr(1, 2), 16);
        g = parseInt(color.substr(3, 2), 16);
        b = parseInt(color.substr(5, 2), 16);
        a = 0xFF;
      } else if (match = RGB_RE.exec(color)) {
        r = numberToHex(match[1]);
        g = numberToHex(match[2]);
        b = numberToHex(match[3]);
        a = 0xFF;
      } else if (match = RGBA_RE.exec(color)) {
        r = numberToHex(match[1]);
        g = numberToHex(match[2]);
        b = numberToHex(match[3]);
        a = alphaToHex(match[4]);
      } else if (match = HSL_RE.exec(color)) {
        b = hslToRgb(match[1], match[2], match[3]);
        a = 0xFF;
      } else if (match = HSLA_RE.exec(color)) {
        b = hslToRgb(match[1], match[2], match[3]);
        a = alphaToHex(match[4]);
      } else {
        return exports.toRGBAHex(defaultColor);
      }
      return (r << 24 | g << 16 | b << 8 | a) >>> 0;
    };
  })();

}).call(this);

},{"../../assert":"../../../node_modules/@neft/core/src/assert/index.litcoffee"}],"../../../node_modules/@neft/core/src/renderer/types/namespace/screen/statusBar.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  var SignalsEmitter, assert, log, utils,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  log = require('../../../../log');

  utils = require('../../../../util');

  SignalsEmitter = require('../../../../signal').SignalsEmitter;

  assert = require('../../../../assert');

  module.exports = function(Renderer, Impl, itemUtils) {
    var StatusBar;
    return StatusBar = (function(superClass) {
      extend(StatusBar, superClass);

      function StatusBar() {
        StatusBar.__super__.constructor.call(this);
        this._height = 0;
        this._color = 'Dark';
        Object.preventExtensions(this);
      }

      itemUtils.defineProperty({
        constructor: StatusBar,
        name: 'height'
      });

      itemUtils.defineProperty({
        constructor: StatusBar,
        name: 'color',
        implementation: Impl.setScreenStatusBarColor,
        implementationValue: function(val) {
          val = utils.capitalize(val.toLowerCase());
          if (val !== 'Light' && val !== 'Dark') {
            log.warn("Unknown Screen.StatusBar.color `" + val + "` given");
            val = 'Dark';
          }
          return val;
        },
        developmentSetter: function(val) {
          return assert.isString(val);
        }
      });

      return StatusBar;

    })(SignalsEmitter);
  };

}).call(this);

},{"../../../../log":"../../../node_modules/@neft/core/src/log/index.litcoffee","../../../../util":"../../../node_modules/@neft/core/src/util/index.litcoffee","../../../../signal":"../../../node_modules/@neft/core/src/signal/index.js","../../../../assert":"../../../node_modules/@neft/core/src/assert/index.litcoffee"}],"../../../node_modules/@neft/core/src/renderer/types/namespace/screen/navigationBar.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  var SignalsEmitter,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  SignalsEmitter = require('../../../../signal').SignalsEmitter;

  module.exports = function(Renderer, Impl, itemUtils) {
    var NavigationBar;
    return NavigationBar = (function(superClass) {
      extend(NavigationBar, superClass);

      function NavigationBar() {
        NavigationBar.__super__.constructor.call(this);
        this._height = 0;
        Object.preventExtensions(this);
      }

      itemUtils.defineProperty({
        constructor: NavigationBar,
        name: 'height'
      });

      return NavigationBar;

    })(SignalsEmitter);
  };

}).call(this);

},{"../../../../signal":"../../../node_modules/@neft/core/src/signal/index.js"}],"../../../node_modules/@neft/core/src/renderer/types/namespace/screen.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  var SignalsEmitter, assert, utils,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  utils = require('../../../util');

  SignalsEmitter = require('../../../signal').SignalsEmitter;

  assert = require('../../../assert');

  module.exports = function(Renderer, Impl, itemUtils) {
    var NavigationBar, Screen, StatusBar, screen;
    StatusBar = require('./screen/statusBar')(Renderer, Impl, itemUtils);
    NavigationBar = require('./screen/navigationBar')(Renderer, Impl, itemUtils);
    Screen = (function(superClass) {
      extend(Screen, superClass);

      function Screen() {
        Screen.__super__.constructor.call(this);
        this._impl = {
          bindings: null
        };
        this._touch = false;
        this._width = 1024;
        this._height = 800;
        this._orientation = 'Portrait';
        this._statusBar = new StatusBar;
        this._navigationBar = new NavigationBar;
        Object.preventExtensions(this);
      }

      utils.defineProperty(Screen.prototype, 'touch', null, function() {
        return this._touch;
      }, null);

      utils.defineProperty(Screen.prototype, 'width', null, function() {
        return this._width;
      }, null);

      utils.defineProperty(Screen.prototype, 'height', null, function() {
        return this._height;
      }, null);

      itemUtils.defineProperty({
        constructor: Screen,
        name: 'orientation',
        developmentSetter: function(val) {
          return assert.isString(val);
        }
      });

      utils.defineProperty(Screen.prototype, 'statusBar', null, function() {
        return this._statusBar;
      }, null);

      utils.defineProperty(Screen.prototype, 'navigationBar', null, function() {
        return this._navigationBar;
      }, null);

      return Screen;

    })(SignalsEmitter);
    screen = new Screen;
    Impl.initScreenNamespace.call(screen, function() {
      Impl.setWindowSize(screen.width, screen.height);
    });
    return screen;
  };

}).call(this);

},{"../../../util":"../../../node_modules/@neft/core/src/util/index.litcoffee","../../../signal":"../../../node_modules/@neft/core/src/signal/index.js","../../../assert":"../../../node_modules/@neft/core/src/assert/index.litcoffee","./screen/statusBar":"../../../node_modules/@neft/core/src/renderer/types/namespace/screen/statusBar.coffee","./screen/navigationBar":"../../../node_modules/@neft/core/src/renderer/types/namespace/screen/navigationBar.coffee"}],"../../../node_modules/@neft/core/src/renderer/types/namespace/device.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  var SignalsEmitter, utils,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  utils = require('../../../util');

  SignalsEmitter = require('../../../signal').SignalsEmitter;

  module.exports = function(Renderer, Impl, itemUtils) {
    var Device, DeviceKeyboardEvent, DevicePointerEvent, device;
    Device = (function(superClass) {
      extend(Device, superClass);

      function Device() {
        Device.__super__.constructor.call(this);
        this._platform = 'Unix';
        this._desktop = true;
        this._phone = false;
        this._pixelRatio = 1;
        this._pointer = new DevicePointerEvent;
        this._keyboard = new DeviceKeyboardEvent;
        Object.preventExtensions(this);
      }

      utils.defineProperty(Device.prototype, 'platform', null, function() {
        return this._platform;
      }, null);

      utils.defineProperty(Device.prototype, 'desktop', null, function() {
        return this._desktop;
      }, null);

      utils.defineProperty(Device.prototype, 'tablet', null, function() {
        return !this.desktop && !this.phone;
      }, null);

      utils.defineProperty(Device.prototype, 'phone', null, function() {
        return this._phone;
      }, null);

      utils.defineProperty(Device.prototype, 'mobile', null, function() {
        return this.tablet || this.phone;
      }, null);

      utils.defineProperty(Device.prototype, 'pixelRatio', null, function() {
        return this._pixelRatio;
      }, null);

      Device.prototype.log = function() {
        var msgs;
        msgs = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        return Impl.logDevice(msgs.join(' '));
      };

      utils.defineProperty(Device.prototype, 'pointer', null, function() {
        return this._pointer;
      }, null);

      SignalsEmitter.createSignal(Device, 'onPointerPress');

      SignalsEmitter.createSignal(Device, 'onPointerRelease');

      SignalsEmitter.createSignal(Device, 'onPointerMove');

      SignalsEmitter.createSignal(Device, 'onPointerWheel');

      utils.defineProperty(Device.prototype, 'keyboard', null, function() {
        return this._keyboard;
      }, null);

      SignalsEmitter.createSignal(Device, 'onKeyPress');

      SignalsEmitter.createSignal(Device, 'onKeyHold');

      SignalsEmitter.createSignal(Device, 'onKeyRelease');

      SignalsEmitter.createSignal(Device, 'onKeyInput');

      return Device;

    })(SignalsEmitter);
    DevicePointerEvent = (function(superClass) {
      extend(DevicePointerEvent, superClass);

      function DevicePointerEvent() {
        DevicePointerEvent.__super__.constructor.call(this);
        this._x = 0;
        this._y = 0;
        this._movementX = 0;
        this._movementY = 0;
        this._deltaX = 0;
        this._deltaY = 0;
        Object.preventExtensions(this);
      }

      itemUtils.defineProperty({
        constructor: DevicePointerEvent,
        name: 'x',
        defaultValue: 0
      });

      itemUtils.defineProperty({
        constructor: DevicePointerEvent,
        name: 'y',
        defaultValue: 0
      });

      itemUtils.defineProperty({
        constructor: DevicePointerEvent,
        name: 'movementX',
        defaultValue: 0
      });

      itemUtils.defineProperty({
        constructor: DevicePointerEvent,
        name: 'movementY',
        defaultValue: 0
      });

      itemUtils.defineProperty({
        constructor: DevicePointerEvent,
        name: 'deltaX',
        defaultValue: 0
      });

      itemUtils.defineProperty({
        constructor: DevicePointerEvent,
        name: 'deltaY',
        defaultValue: 0
      });

      return DevicePointerEvent;

    })(SignalsEmitter);
    DeviceKeyboardEvent = (function(superClass) {
      extend(DeviceKeyboardEvent, superClass);

      function DeviceKeyboardEvent() {
        DeviceKeyboardEvent.__super__.constructor.call(this);
        this._visible = false;
        this._height = 0;
        this._key = '';
        this._text = '';
        Object.preventExtensions(this);
      }

      itemUtils.defineProperty({
        constructor: DeviceKeyboardEvent,
        name: 'visible',
        defaultValue: false
      });

      itemUtils.defineProperty({
        constructor: DeviceKeyboardEvent,
        name: 'height',
        defaultValue: 0
      });

      itemUtils.defineProperty({
        constructor: DeviceKeyboardEvent,
        name: 'key',
        defaultValue: ''
      });

      itemUtils.defineProperty({
        constructor: DeviceKeyboardEvent,
        name: 'text',
        defaultValue: ''
      });

      DeviceKeyboardEvent.prototype.show = function() {
        return Impl.showDeviceKeyboard.call(device);
      };

      DeviceKeyboardEvent.prototype.hide = function() {
        return Impl.hideDeviceKeyboard.call(device);
      };

      return DeviceKeyboardEvent;

    })(SignalsEmitter);
    device = new Device;
    (function() {
      var updateMovement, x, y;
      x = y = 0;
      updateMovement = function(event) {
        event.movementX = event.x - x;
        event.movementY = event.y - y;
        x = event.x;
        y = event.y;
      };
      device.onPointerPress.connect(updateMovement);
      device.onPointerRelease.connect(updateMovement);
      return device.onPointerMove.connect(updateMovement);
    })();
    Impl.initDeviceNamespace.call(device);
    return device;
  };

}).call(this);

},{"../../../util":"../../../node_modules/@neft/core/src/util/index.litcoffee","../../../signal":"../../../node_modules/@neft/core/src/signal/index.js"}],"../../../node_modules/@neft/core/src/renderer/types/namespace/navigator.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  var SignalsEmitter, assert, utils,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  utils = require('../../../util');

  SignalsEmitter = require('../../../signal').SignalsEmitter;

  assert = require('../../../assert');

  module.exports = function(Renderer, Impl, itemUtils) {
    var Navigator, navigator, ref;
    Navigator = (function(superClass) {
      extend(Navigator, superClass);

      function Navigator() {
        Navigator.__super__.constructor.call(this);
        this._impl = {
          bindings: null
        };
        this._language = 'en';
        this._browser = true;
        this._online = true;
        Object.preventExtensions(this);
      }

      utils.defineProperty(Navigator.prototype, 'language', null, function() {
        return this._language;
      }, null);

      utils.defineProperty(Navigator.prototype, 'browser', null, function() {
        return this._browser;
      }, null);

      utils.defineProperty(Navigator.prototype, 'native', null, function() {
        return !this._browser;
      }, null);

      itemUtils.defineProperty({
        constructor: Navigator,
        name: 'online',
        developmentSetter: function(val) {
          return assert.isBoolean(val);
        }
      });

      return Navigator;

    })(SignalsEmitter);
    navigator = new Navigator;
    if ((ref = Impl.initNavigatorNamespace) != null) {
      ref.call(navigator);
    }
    return navigator;
  };

}).call(this);

},{"../../../util":"../../../node_modules/@neft/core/src/util/index.litcoffee","../../../signal":"../../../node_modules/@neft/core/src/signal/index.js","../../../assert":"../../../node_modules/@neft/core/src/assert/index.litcoffee"}],"../../../node_modules/@neft/core/src/renderer/types/extension.litcoffee":[function(require,module,exports) {
(function() {
  'use strict';
  var assert, signal, utils,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  utils = require('../../util');

  signal = require('../../signal');

  assert = require('../../assert');

  module.exports = function(Renderer, Impl, itemUtils) {
    var Extension;
    return Extension = (function(superClass) {
      extend(Extension, superClass);

      Extension.__name__ = 'Extension';

      function Extension() {
        Extension.__super__.constructor.call(this);
        this._target = null;
        this._running = false;
      }

      itemUtils.defineProperty({
        constructor: Extension,
        name: 'target',
        defaultValue: null
      });

      itemUtils.defineProperty({
        constructor: Extension,
        name: 'running',
        defaultValue: false,
        setter: function(_super) {
          return function(val) {
            var oldVal;
            assert.isBoolean(val);
            oldVal = this._running;
            _super.call(this, val);
            if (oldVal && !val) {
              this._disable();
            }
            if (!oldVal && val) {
              this._enable();
            }
          };
        }
      });

      Extension.prototype._enable = function() {};

      Extension.prototype._disable = function() {};

      return Extension;

    })(itemUtils.Object);
  };

}).call(this);

},{"../../util":"../../../node_modules/@neft/core/src/util/index.litcoffee","../../signal":"../../../node_modules/@neft/core/src/signal/index.js","../../assert":"../../../node_modules/@neft/core/src/assert/index.litcoffee"}],"../../../node_modules/@neft/core/src/document/element/element/tag/query.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  var ATTRS_PRIORITY, ATTR_CLASS_SEARCH, ATTR_SEARCH, ATTR_VALUES, ATTR_VALUE_SEARCH, CONTAINS, DEEP, DEFAULT_PRIORITY, ELEMENTS_PRIORITY, ENDS_WITH, MAX_QUERIES_CACHE_LENGTH, OPTS_ADD_ANCHOR, OPTS_QUERY_BY_PARENTS, OPTS_REVERSED, QUERIES_CACHE_OVERFLOW_REDUCTION, STARTS_WITH, SignalsEmitter, TRIM_ATTR_VALUE, TYPE, Tag, Text, Watcher, anyChild, anyDescendant, anyParent, assert, byInstance, byName, byProp, byPropContainsValue, byPropEndsWithValue, byPropStartsWithValue, byPropValue, byTag, directParent, eventLoop, getQueries, i, queriesCache, queriesCacheLengths, test, utils,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  utils = require('../../../../util');

  SignalsEmitter = require('../../../../signal').SignalsEmitter;

  eventLoop = require('../../../../event-loop');

  assert = require('../../../../assert');

  Tag = Text = null;

  DEFAULT_PRIORITY = 0;

  ELEMENTS_PRIORITY = 1;

  ATTRS_PRIORITY = 100;

  test = function(node, funcs, index, targetFunc, targetCtx, single) {
    var data1, data2, func;
    while (index < funcs.length) {
      func = funcs[index];
      if (func.isIterator) {
        return func(node, funcs, index + 3, targetFunc, targetCtx, single);
      } else {
        data1 = funcs[index + 1];
        data2 = funcs[index + 2];
        if (!func(node, data1, data2)) {
          return false;
        }
      }
      index += 3;
    }
    targetFunc.call(targetCtx, node);
    return true;
  };

  anyDescendant = function(node, funcs, index, targetFunc, targetCtx, single) {
    var child, j, len, ref;
    ref = node.children;
    for (j = 0, len = ref.length; j < len; j++) {
      child = ref[j];
      if (!(child instanceof Tag) || child.name !== 'blank') {
        if (test(child, funcs, index, targetFunc, targetCtx, single)) {
          if (single) {
            return true;
          }
        }
      }
      if (child instanceof Tag) {
        if (anyDescendant(child, funcs, index, targetFunc, targetCtx, single)) {
          if (single) {
            return true;
          }
        }
      }
    }
    return false;
  };

  anyDescendant.isIterator = true;

  anyDescendant.priority = DEFAULT_PRIORITY;

  anyDescendant.toString = function() {
    return 'anyDescendant';
  };

  directParent = function(node, funcs, index, targetFunc, targetCtx, single) {
    var parent;
    if (parent = node._parent) {
      if (test(parent, funcs, index, targetFunc, targetCtx, single)) {
        return true;
      }
      if (parent.name === 'blank') {
        return directParent(parent, funcs, index, targetFunc, targetCtx, single);
      }
    }
    return false;
  };

  directParent.isIterator = true;

  directParent.priority = DEFAULT_PRIORITY;

  directParent.toString = function() {
    return 'directParent';
  };

  anyChild = function(node, funcs, index, targetFunc, targetCtx, single) {
    var child, j, len, ref;
    ref = node.children;
    for (j = 0, len = ref.length; j < len; j++) {
      child = ref[j];
      if (child instanceof Tag && child.name === 'blank') {
        if (anyChild(child, funcs, index, targetFunc, targetCtx, single)) {
          if (single) {
            return true;
          }
        }
      } else {
        if (test(child, funcs, index, targetFunc, targetCtx, single)) {
          if (single) {
            return true;
          }
        }
      }
    }
    return false;
  };

  anyChild.isIterator = true;

  anyChild.priority = DEFAULT_PRIORITY;

  anyChild.toString = function() {
    return 'anyChild';
  };

  anyParent = function(node, funcs, index, targetFunc, targetCtx, single) {
    var parent;
    if (parent = node._parent) {
      if (test(parent, funcs, index, targetFunc, targetCtx, single)) {
        return true;
      } else {
        return anyParent(parent, funcs, index, targetFunc, targetCtx, single);
      }
    }
    return false;
  };

  anyParent.isIterator = true;

  anyParent.priority = DEFAULT_PRIORITY;

  anyParent.toString = function() {
    return 'anyParent';
  };

  byName = function(node, data1) {
    if (node instanceof Tag) {
      return node.name === data1;
    } else if (data1 === '#text' && node instanceof Text) {
      return true;
    }
  };

  byName.isIterator = false;

  byName.priority = ELEMENTS_PRIORITY;

  byName.toString = function() {
    return 'byName';
  };

  byInstance = function(node, data1) {
    return node instanceof data1;
  };

  byInstance.isIterator = false;

  byInstance.priority = DEFAULT_PRIORITY;

  byInstance.toString = function() {
    return 'byInstance';
  };

  byTag = function(node, data1) {
    return node === data1;
  };

  byTag.isIterator = false;

  byTag.priority = DEFAULT_PRIORITY;

  byTag.toString = function() {
    return 'byTag';
  };

  byProp = function(node, data1) {
    if (node instanceof Tag) {
      return node.props[data1] !== void 0;
    } else {
      return false;
    }
  };

  byProp.isIterator = false;

  byProp.priority = ATTRS_PRIORITY;

  byProp.toString = function() {
    return 'byProp';
  };

  byPropValue = function(node, data1, data2) {
    if (node instanceof Tag) {
      return node.props[data1] == data2;
    } else {
      return false;
    }
  };

  byPropValue.isIterator = false;

  byPropValue.priority = ATTRS_PRIORITY;

  byPropValue.toString = function() {
    return 'byPropValue';
  };

  byPropStartsWithValue = function(node, data1, data2) {
    var prop;
    if (node instanceof Tag) {
      prop = node.props[data1];
      if (typeof prop === 'string') {
        return prop.indexOf(data2) === 0;
      }
    }
    return false;
  };

  byPropStartsWithValue.isIterator = false;

  byPropStartsWithValue.priority = ATTRS_PRIORITY;

  byPropStartsWithValue.toString = function() {
    return 'byPropStartsWithValue';
  };

  byPropEndsWithValue = function(node, data1, data2) {
    var prop;
    if (node instanceof Tag) {
      prop = node.props[data1];
      if (typeof prop === 'string') {
        return prop.indexOf(data2, prop.length - data2.length) > -1;
      }
    }
    return false;
  };

  byPropEndsWithValue.isIterator = false;

  byPropEndsWithValue.priority = ATTRS_PRIORITY;

  byPropEndsWithValue.toString = function() {
    return 'byPropEndsWithValue';
  };

  byPropContainsValue = function(node, data1, data2) {
    var prop;
    if (node instanceof Tag) {
      prop = node.props[data1];
      if (typeof prop === 'string') {
        return prop.indexOf(data2) > -1;
      }
    }
    return false;
  };

  byPropContainsValue.isIterator = false;

  byPropContainsValue.priority = ATTRS_PRIORITY;

  byPropContainsValue.toString = function() {
    return 'byPropContainsValue';
  };

  TYPE = /^#?[a-zA-Z0-9|\-:_]+/;

  DEEP = /^([ ]*)>([ ]*)|^([ ]+)/;

  ATTR_SEARCH = /^\[([^\]]+?)\]/;

  ATTR_VALUE_SEARCH = /^\[([^=]+?)=([^\]]+?)\]/;

  ATTR_CLASS_SEARCH = /^\.([a-zA-Z0-9|\-_]+)/;

  STARTS_WITH = /\^$/;

  ENDS_WITH = /\$$/;

  CONTAINS = /\*$/;

  TRIM_ATTR_VALUE = /(?:'|")?([^'"]*)/;

  ATTR_VALUES = {
    __proto__: null,
    'true': true,
    'false': false,
    'null': null,
    'undefined': void 0
  };

  i = 0;

  OPTS_QUERY_BY_PARENTS = 1 << (i++);

  OPTS_REVERSED = 1 << (i++);

  OPTS_ADD_ANCHOR = 1 << (i++);

  MAX_QUERIES_CACHE_LENGTH = 2000;

  QUERIES_CACHE_OVERFLOW_REDUCTION = 100;

  queriesCache = [];

  queriesCacheLengths = [];

  getQueries = function(selector, opts) {
    var _, arrFunc, cache, closeTagFunc, deep, distantTagFunc, exec, firstFunc, func, funcs, j, key, len, name, queries, r, ref, removed, reversed, reversedArrFunc, sel, val;
    if (opts == null) {
      opts = 0;
    }
    reversed = !!(opts & OPTS_REVERSED);
    if (r = (ref = queriesCache[opts]) != null ? ref[selector] : void 0) {
      return r;
    }
    distantTagFunc = reversed ? anyParent : anyDescendant;
    closeTagFunc = reversed ? directParent : anyChild;
    arrFunc = reversed ? 'unshift' : 'push';
    reversedArrFunc = reversed ? 'push' : 'unshift';
    funcs = [];
    queries = [funcs];
    sel = selector.trim();
    while (sel.length) {
      if (sel[0] === '*') {
        sel = sel.slice(1);
        funcs[arrFunc](byInstance, Tag, null);
      } else if (sel[0] === '&') {
        sel = sel.slice(1);
        if (!(opts & OPTS_QUERY_BY_PARENTS)) {
          funcs[arrFunc](byTag, null, null);
        }
      } else if (exec = TYPE.exec(sel)) {
        sel = sel.slice(exec[0].length);
        name = exec[0];
        funcs[arrFunc](byName, name, null);
      } else if (exec = ATTR_VALUE_SEARCH.exec(sel)) {
        sel = sel.slice(exec[0].length);
        _ = exec[0], name = exec[1], val = exec[2];
        if (val in ATTR_VALUES) {
          val = ATTR_VALUES[val];
        } else {
          val = TRIM_ATTR_VALUE.exec(val)[1];
        }
        if (STARTS_WITH.test(name)) {
          func = byPropStartsWithValue;
        } else if (ENDS_WITH.test(name)) {
          func = byPropEndsWithValue;
        } else if (CONTAINS.test(name)) {
          func = byPropContainsValue;
        } else {
          func = byPropValue;
        }
        if (func !== byPropValue) {
          name = name.slice(0, -1);
        }
        funcs[arrFunc](func, name, val);
      } else if (exec = ATTR_SEARCH.exec(sel)) {
        sel = sel.slice(exec[0].length);
        funcs[arrFunc](byProp, exec[1], null);
      } else if (exec = ATTR_CLASS_SEARCH.exec(sel)) {
        sel = sel.slice(exec[0].length);
        funcs[arrFunc](byPropContainsValue, 'class', exec[1]);
      } else if (exec = DEEP.exec(sel)) {
        sel = sel.slice(exec[0].length);
        deep = exec[0].trim();
        if (deep === '') {
          funcs[arrFunc](distantTagFunc, null, null);
        } else if (deep === '>') {
          funcs[arrFunc](closeTagFunc, null, null);
        }
      } else if (sel[0] === ',') {
        funcs = [];
        queries.push(funcs);
        sel = sel.slice(1);
        sel = sel.trim();
      } else {
        throw new Error("queryAll: unexpected selector '" + sel + "' in '" + selector + "'");
      }
    }
    for (j = 0, len = queries.length; j < len; j++) {
      funcs = queries[j];
      firstFunc = reversed && !(opts & OPTS_QUERY_BY_PARENTS) ? funcs[funcs.length - 3] : funcs[0];
      if (firstFunc === byTag) {
        continue;
      }
      if (opts & OPTS_QUERY_BY_PARENTS && !(firstFunc != null ? firstFunc.isIterator : void 0)) {
        funcs[arrFunc](distantTagFunc, null, null);
      } else if (reversed && !(firstFunc != null ? firstFunc.isIterator : void 0)) {
        funcs[reversedArrFunc](distantTagFunc, null, null);
      } else if (!reversed && !(firstFunc != null ? firstFunc.isIterator : void 0)) {
        funcs[reversedArrFunc](distantTagFunc, null, null);
      }
      if (opts & OPTS_ADD_ANCHOR) {
        funcs[reversedArrFunc](byTag, null, null);
      }
    }
    if (!(cache = queriesCache[opts])) {
      cache = queriesCache[opts] = {};
      queriesCacheLengths[opts] = 0;
    }
    cache[selector] = queries;
    if ((queriesCacheLengths[opts] += 1) > MAX_QUERIES_CACHE_LENGTH) {
      removed = 0;
      for (key in cache) {
        delete cache[key];
        removed += 1;
        if (removed >= QUERIES_CACHE_OVERFLOW_REDUCTION) {
          break;
        }
      }
      queriesCacheLengths[opts] -= removed;
    }
    return queries;
  };

  Watcher = (function(superClass) {
    var NOP, lastUid, pool;

    extend(Watcher, superClass);

    NOP = function() {};

    lastUid = 0;

    pool = [];

    Watcher.create = function(node, queries) {
      var nodeWatchers, watcher;
      if (pool.length) {
        watcher = pool.pop();
        watcher.node = node;
        watcher.queries = queries;
        watcher._forceUpdate = true;
      } else {
        watcher = new Watcher(node, queries);
      }
      nodeWatchers = node._watchers != null ? node._watchers : node._watchers = [];
      nodeWatchers.push(watcher);
      return watcher;
    };

    function Watcher(node, queries) {
      Watcher.__super__.constructor.call(this);
      this._forceUpdate = true;
      this.node = node;
      this.queries = queries;
      this.uid = (lastUid++) + '';
      this.nodes = [];
      this.nodesToAdd = [];
      this.nodesToRemove = [];
      this.nodesWillChange = false;
      Object.seal(this);
    }

    SignalsEmitter.createSignal(Watcher, 'onAdd');

    SignalsEmitter.createSignal(Watcher, 'onRemove');

    Watcher.prototype.test = function(tag) {
      var funcs, j, len, ref;
      ref = this.queries;
      for (j = 0, len = ref.length; j < len; j++) {
        funcs = ref[j];
        funcs[funcs.length - 2] = this.node;
        if (test(tag, funcs, 0, NOP, null, true)) {
          return true;
        }
      }
      return false;
    };

    Watcher.prototype.disconnect = function() {
      var node, nodes, nodesToAdd, nodesToRemove, ref, uid;
      assert.ok(this.node);
      ref = this, uid = ref.uid, node = ref.node, nodes = ref.nodes, nodesToAdd = ref.nodesToAdd, nodesToRemove = ref.nodesToRemove;
      utils.remove(node._watchers, this);
      while (node = nodesToAdd.pop()) {
        delete node._inWatchers[uid];
      }
      while (node = nodesToRemove.pop()) {
        this.emit('onRemove', node);
      }
      while (node = nodes.pop()) {
        delete node._inWatchers[uid];
        this.emit('onRemove', node);
      }
      this.onAdd.disconnectAll();
      this.onRemove.disconnectAll();
      this.node = this.queries = null;
      pool.push(this);
    };

    return Watcher;

  })(SignalsEmitter);

  module.exports = function(Element, _Tag) {
    var checkWatchersDeeply, query, queryAll;
    Tag = _Tag;
    Text = Element.Text;
    return {
      getSelectorCommandsLength: module.exports.getSelectorCommandsLength,
      queryAll: queryAll = function(selector, target, targetCtx, opts) {
        var func, funcs, j, len, queries;
        if (target == null) {
          target = [];
        }
        if (targetCtx == null) {
          targetCtx = target;
        }
        if (opts == null) {
          opts = 0;
        }
        assert.isString(selector);
        assert.notLengthOf(selector, 0);
        if (typeof target !== 'function') {
          assert.isArray(target);
        }
        queries = getQueries(selector, opts);
        func = Array.isArray(target) ? target.push : target;
        for (j = 0, len = queries.length; j < len; j++) {
          funcs = queries[j];
          funcs[0](this, funcs, 3, func, targetCtx, false);
        }
        if (Array.isArray(target)) {
          return target;
        }
      },
      queryAllParents: function(selector, target, targetCtx) {
        var func, onNode, opts;
        if (target == null) {
          target = [];
        }
        if (targetCtx == null) {
          targetCtx = target;
        }
        if (typeof target !== 'function') {
          assert.isArray(target);
        }
        func = Array.isArray(target) ? target.push : target;
        opts = OPTS_REVERSED | OPTS_QUERY_BY_PARENTS;
        onNode = function(node) {
          func.call(targetCtx, node);
          queryAll.call(node, selector, onNode, null, opts);
        };
        queryAll.call(this, selector, onNode, null, opts);
        if (Array.isArray(target)) {
          return target;
        }
      },
      query: query = (function() {
        var result, resultFunc;
        result = null;
        resultFunc = function(arg) {
          return result = arg;
        };
        return function(selector, opts) {
          var funcs, j, len, queries;
          if (opts == null) {
            opts = 0;
          }
          assert.isString(selector);
          assert.notLengthOf(selector, 0);
          queries = getQueries(selector, opts);
          for (j = 0, len = queries.length; j < len; j++) {
            funcs = queries[j];
            if (funcs[0](this, funcs, 3, resultFunc, null, true)) {
              return result;
            }
          }
          return null;
        };
      })(),
      queryParents: function(selector) {
        return query.call(this, selector, OPTS_REVERSED | OPTS_QUERY_BY_PARENTS);
      },
      watch: function(selector) {
        var queries, watcher;
        assert.isString(selector);
        assert.notLengthOf(selector, 0);
        queries = getQueries(selector, OPTS_REVERSED | OPTS_ADD_ANCHOR);
        watcher = Watcher.create(this, queries);
        checkWatchersDeeply(this);
        return watcher;
      },
      checkWatchersDeeply: checkWatchersDeeply = (function() {
        var CHECK_WATCHERS_CHILDREN, CHECK_WATCHERS_IS_MASTER_NODE, CHECK_WATCHERS_THIS, checkNodeRec, invalidateWatcher, isChildOf, masterNodes, pending, updateWatchers, updateWatchersQueue, watchersToUpdate;
        pending = false;
        masterNodes = [];
        watchersToUpdate = [];
        updateWatchersQueue = [];
        i = 0;
        CHECK_WATCHERS_THIS = 1 << i++;
        CHECK_WATCHERS_CHILDREN = 1 << i++;
        CHECK_WATCHERS_IS_MASTER_NODE = 1 << i++;
        invalidateWatcher = function(watcher) {
          if (!watcher.nodesWillChange) {
            watchersToUpdate.push(watcher);
            watcher.nodesWillChange = true;
          }
        };
        isChildOf = function(child, parent) {
          var tmp;
          tmp = child;
          while (tmp = tmp._parent) {
            if (tmp === parent) {
              return true;
            }
          }
          return false;
        };
        checkNodeRec = function(node, watchersQueue, flags, hasForcedWatcher) {
          var checkWatchers, childNode, inWatchers, j, k, l, len, len1, len2, m, n, nodes, ref, ref1, watcher, watcherNode, watcherUid, watchers;
          checkWatchers = node._checkWatchers;
          flags |= checkWatchers;
          if (watchers = node._watchers) {
            for (j = 0, len = watchers.length; j < len; j++) {
              watcher = watchers[j];
              watchersQueue.push(watcher);
              if (!hasForcedWatcher && watcher._forceUpdate) {
                hasForcedWatcher = true;
              }
              watcherNode = watcher.node;
              nodes = watcher.nodes;
              i = n = nodes.length;
              while (i-- > 0) {
                childNode = nodes[i];
                if (childNode !== watcherNode && !isChildOf(childNode, watcherNode)) {
                  delete childNode._inWatchers[watcher.uid];
                  nodes[i] = nodes[n - 1];
                  nodes.pop();
                  watcher.nodesToRemove.push(childNode);
                  invalidateWatcher(watcher);
                  n--;
                }
              }
            }
          }
          if (hasForcedWatcher || flags & CHECK_WATCHERS_THIS) {
            inWatchers = node._inWatchers;
            for (k = 0, len1 = watchersQueue.length; k < len1; k++) {
              watcher = watchersQueue[k];
              if (hasForcedWatcher && !watcher._forceUpdate && !(flags & CHECK_WATCHERS_THIS)) {
                continue;
              }
              watcherUid = watcher.uid;
              if ((!inWatchers || !inWatchers[watcherUid]) && watcher.test(node)) {
                if (!inWatchers) {
                  inWatchers = node._inWatchers = {};
                }
                inWatchers[watcherUid] = true;
                watcher.nodesToAdd.push(node);
                invalidateWatcher(watcher);
              } else if (inWatchers && inWatchers[watcherUid] && !watcher.test(node)) {
                delete inWatchers[watcherUid];
                utils.removeFromUnorderedArray(watcher.nodes, node);
                watcher.nodesToRemove.push(node);
                invalidateWatcher(watcher);
              }
            }
          }
          if (flags & CHECK_WATCHERS_CHILDREN && node instanceof Tag) {
            ref = node.children;
            for (l = 0, len2 = ref.length; l < len2; l++) {
              childNode = ref[l];
              if (hasForcedWatcher || flags & CHECK_WATCHERS_THIS || childNode._checkWatchers > 0) {
                checkNodeRec(childNode, watchersQueue, flags, hasForcedWatcher);
              }
            }
          }
          if (watchers) {
            for (i = m = 0, ref1 = watchers.length; m < ref1; i = m += 1) {
              watcher = watchersQueue.pop();
            }
          }
          node._checkWatchers = 0;
        };
        updateWatchers = function() {
          var masterNode, node, nodesToAdd, nodesToRemove, watcher;
          pending = false;
          while (masterNode = masterNodes.pop()) {
            if (!masterNode._parent) {
              checkNodeRec(masterNode, updateWatchersQueue, 0, false);
            }
          }
          while (watcher = watchersToUpdate.pop()) {
            nodesToAdd = watcher.nodesToAdd, nodesToRemove = watcher.nodesToRemove;
            while (node = nodesToRemove.pop()) {
              watcher.emit('onRemove', node);
            }
            while (node = nodesToAdd.pop()) {
              watcher.nodes.push(node);
              watcher.emit('onAdd', node);
            }
            watcher.nodesWillChange = false;
          }
        };
        return function(node, parent) {
          var tmp;
          if (parent == null) {
            parent = node._parent;
          }
          node._checkWatchers |= CHECK_WATCHERS_THIS;
          if (node instanceof Tag) {
            node._checkWatchers |= CHECK_WATCHERS_CHILDREN;
          }
          tmp = node;
          while (parent) {
            tmp = parent;
            if (tmp._checkWatchers & CHECK_WATCHERS_CHILDREN) {
              break;
            }
            tmp._checkWatchers |= CHECK_WATCHERS_CHILDREN;
            parent = tmp._parent;
          }
          if (!parent) {
            if (!(tmp._checkWatchers & CHECK_WATCHERS_IS_MASTER_NODE)) {
              masterNodes.push(tmp);
              tmp._checkWatchers |= CHECK_WATCHERS_IS_MASTER_NODE;
            }
          }
          if (!pending) {
            pending = true;
            eventLoop.setImmediate(updateWatchers);
          }
        };
      })()
    };
  };

  module.exports.getSelectorCommandsLength = function(selector, beginQuery, endQuery) {
    var j, len, queries, query, sum;
    if (beginQuery == null) {
      beginQuery = 0;
    }
    if (endQuery == null) {
      endQuery = 2e308;
    }
    sum = 0;
    queries = getQueries(selector, 0);
    for (i = j = 0, len = queries.length; j < len; i = ++j) {
      query = queries[i];
      if (i < beginQuery) {
        continue;
      }
      if (i >= endQuery) {
        break;
      }
      sum += query.length;
    }
    return sum;
  };

  module.exports.getSelectorPriority = function(selector, beginQuery, endQuery) {
    var func, j, k, len, len1, queries, query, sum;
    if (beginQuery == null) {
      beginQuery = 0;
    }
    if (endQuery == null) {
      endQuery = 2e308;
    }
    sum = 0;
    queries = getQueries(selector, 0);
    for (i = j = 0, len = queries.length; j < len; i = ++j) {
      query = queries[i];
      if (i < beginQuery) {
        continue;
      }
      if (i >= endQuery) {
        break;
      }
      for (k = 0, len1 = query.length; k < len1; k += 3) {
        func = query[k];
        sum += func.priority;
      }
    }
    return sum;
  };

}).call(this);

},{"../../../../util":"../../../node_modules/@neft/core/src/util/index.litcoffee","../../../../signal":"../../../node_modules/@neft/core/src/signal/index.js","../../../../event-loop":"../../../node_modules/@neft/core/src/event-loop/index.coffee","../../../../assert":"../../../node_modules/@neft/core/src/assert/index.litcoffee"}],"../../../node_modules/@neft/core/src/renderer/types/extensions/class.litcoffee":[function(require,module,exports) {
(function() {
  'use strict';
  var SignalsEmitter, TagQuery, assert, log, utils,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  assert = require('../../../assert');

  utils = require('../../../util');

  SignalsEmitter = require('../../../signal').SignalsEmitter;

  log = require('../../../log');

  TagQuery = require('../../../document/element/element/tag/query');

  log = log.scope('Rendering', 'Class');

  module.exports = function(Renderer, Impl, itemUtils) {
    var ATTRS_ALIAS, ATTRS_CONFLICTS, ChangesObject, Class, ClassChildDocument, ClassDocument, ElementTarget, classListSortFunc, cloneClassChild, cloneClassWithNoDocument, disableClass, enableClass, getContainedAlias, getContainedAttribute, getContainedAttributeOrAlias, getObjectByPath, getPropertyDefaultValue, ifClassListWillChange, loadObjects, runQueue, saveAndDisableClass, saveAndEnableClass, setAttribute, splitAttribute, unloadObjects, updateChildPriorities, updateClassList, updatePriorities, updateTargetClass;
    ChangesObject = (function() {
      function ChangesObject() {
        this._attributes = Object.create(null);
        this._bindings = Object.create(null);
      }

      ChangesObject.prototype.setAttribute = function(prop, val) {
        this._attributes[prop] = val;
      };

      ChangesObject.prototype.setBinding = function(prop, val) {
        this._attributes[prop] = val;
        this._bindings[prop] = true;
      };

      return ChangesObject;

    })();
    Class = (function(superClass) {
      var CHANGES_OMIT_ATTRIBUTES, ChildrenObject, lastUid;

      extend(Class, superClass);

      Class.__name__ = 'Class';

      Class.New = function(opts) {
        var item;
        item = new Class;
        itemUtils.Object.initialize(item, opts);
        return item;
      };

      lastUid = 0;

      function Class() {
        Class.__super__.constructor.call(this);
        this._classUid = String(lastUid++);
        this._priority = 0;
        this._inheritsPriority = 0;
        this._nestingPriority = 0;
        this._changes = null;
        this._document = null;
        this._children = null;
        this._nesting = null;
      }

      itemUtils.defineProperty({
        constructor: Class,
        name: 'target',
        developmentSetter: function(val) {
          if (val != null) {
            return assert.instanceOf(val, itemUtils.Object);
          }
        },
        setter: function(_super) {
          return function(val) {
            var isRunning, oldVal, ref1, ref2, ref3;
            oldVal = this._target;
            if (oldVal === val) {
              return;
            }
            isRunning = this._running;
            if (isRunning) {
              this.running = false;
            }
            if (oldVal) {
              utils.remove(oldVal._extensions, this);
              if (this._running && !((ref1 = this._document) != null ? ref1._query : void 0)) {
                unloadObjects(this, oldVal);
              }
            }
            _super.call(this, val);
            if (val) {
              val._extensions.push(this);
              if (this._priority !== -1 && !((ref2 = this._bindings) != null ? ref2.running : void 0) && !((ref3 = this._document) != null ? ref3._query : void 0)) {
                this.running = true;
              }
            }
            if (isRunning) {
              this.running = true;
            }
          };
        }
      });

      CHANGES_OMIT_ATTRIBUTES = {
        __proto__: null,
        id: true,
        properties: true,
        signals: true,
        children: true
      };

      utils.defineProperty(Class.prototype, 'changes', null, function() {
        return this._changes || (this._changes = new ChangesObject);
      }, function(obj) {
        var changes, isRunning, prop, val;
        if (obj == null) {
          obj = {};
        }
        assert.isObject(obj);
        isRunning = this._running && !!this._target;
        if (isRunning) {
          updateTargetClass(disableClass, this._target, this);
        }
        this._changes = new ChangesObject;
        changes = this._changes;
        for (prop in obj) {
          val = obj[prop];
          if (Array.isArray(val) && val.length === 2 && typeof val[0] === 'function' && Array.isArray(val[1])) {
            changes.setBinding(prop, val);
          } else if (!CHANGES_OMIT_ATTRIBUTES[prop]) {
            changes.setAttribute(prop, val);
          }
        }
        if (isRunning) {
          updateTargetClass(enableClass, this._target, this);
        }
      });

      itemUtils.defineProperty({
        constructor: Class,
        name: 'priority',
        defaultValue: 0,
        developmentSetter: function(val) {
          return assert.isInteger(val);
        },
        setter: function(_super) {
          return function(val) {
            _super.call(this, val);
            updatePriorities(this);
          };
        }
      });

      Class.prototype._enable = function() {
        var classElem, docQuery, j, len, ref1, ref2, ref3;
        assert.ok(this._running);
        docQuery = (ref1 = this._document) != null ? ref1._query : void 0;
        if (!this._target || docQuery) {
          if (docQuery) {
            ref2 = this._document._classesInUse;
            for (j = 0, len = ref2.length; j < len; j++) {
              classElem = ref2[j];
              classElem.running = true;
            }
          }
          return;
        }
        updateTargetClass(saveAndEnableClass, this._target, this);
        if (!((ref3 = this._document) != null ? ref3._query : void 0)) {
          loadObjects(this, this._target);
        }
      };

      Class.prototype._disable = function() {
        var classElem, j, len, ref1, ref2;
        assert.notOk(this._running);
        if (!this._target) {
          if (this._document && this._document._query) {
            ref1 = this._document._classesInUse;
            for (j = 0, len = ref1.length; j < len; j++) {
              classElem = ref1[j];
              classElem.running = false;
            }
          }
          return;
        }
        if (!((ref2 = this._document) != null ? ref2._query : void 0)) {
          unloadObjects(this, this._target);
        }
        updateTargetClass(saveAndDisableClass, this._target, this);
      };

      utils.defineProperty(Class.prototype, 'children', null, function() {
        return this._children || (this._children = new ChildrenObject(this));
      }, function(val) {
        var child, children, j, len, length;
        children = this.children;
        length = children.length;
        while (length--) {
          children.pop(length);
        }
        if (val) {
          assert.isArray(val);
          for (j = 0, len = val.length; j < len; j++) {
            child = val[j];
            children.append(child);
          }
        }
      });

      utils.defineProperty(Class.prototype, 'nesting', null, null, function(val) {
        assert.notOk(this._running);
        this._nesting = val;
      });

      ChildrenObject = (function() {
        function ChildrenObject(ref) {
          this._ref = ref;
          this.length = 0;
        }

        ChildrenObject.prototype.append = function(val) {
          assert.instanceOf(val, itemUtils.Object);
          assert.isNot(val, this._ref);
          if (val instanceof Class) {
            updateChildPriorities(this._ref, val);
          }
          this[this.length++] = val;
          return val;
        };

        ChildrenObject.prototype.pop = function(i) {
          var oldVal;
          if (i == null) {
            i = this.length - 1;
          }
          assert.operator(i, '>=', 0);
          assert.operator(i, '<', this.length);
          oldVal = this[i];
          delete this[i];
          --this.length;
          return oldVal;
        };

        return ChildrenObject;

      })();

      Class.prototype.clone = function() {
        var arr, clone, cloneDoc, doc, name, ref1;
        clone = cloneClassWithNoDocument.call(this);
        if (doc = this._document) {
          cloneDoc = clone.document;
          cloneDoc.query = doc.query;
          ref1 = doc._signals;
          for (name in ref1) {
            arr = ref1[name];
            cloneDoc._signals[name] = utils.clone(arr);
          }
        }
        return clone;
      };

      return Class;

    })(Renderer.Extension);
    loadObjects = function(classElem, item) {
      var child, children, j, len;
      if (children = classElem._children) {
        for (j = 0, len = children.length; j < len; j++) {
          child = children[j];
          if (child instanceof Renderer.Item) {
            if (child.parent == null) {
              child.parent = item;
            }
          } else {
            if (child instanceof Class) {
              updateChildPriorities(classElem, child);
            }
            if (child.target == null) {
              child.target = item;
            }
          }
        }
      }
    };
    unloadObjects = function(classElem, item) {
      var child, children, j, len;
      if (children = classElem._children) {
        for (j = 0, len = children.length; j < len; j++) {
          child = children[j];
          if (child instanceof Renderer.Item) {
            if (child.parent === item) {
              child.parent = null;
            }
          } else {
            if (child.target === item) {
              child.target = null;
            }
          }
        }
      }
    };
    updateChildPriorities = function(parent, child) {
      var ref1;
      child._inheritsPriority = parent._inheritsPriority + parent._priority;
      child._nestingPriority = parent._nestingPriority + 1 + (((ref1 = child._document) != null ? ref1._priority : void 0) || 0);
      updatePriorities(child);
    };
    updatePriorities = function(classElem) {
      var _inheritsPriority, _nestingPriority, child, children, document, j, k, l, len, len1, len2, ref1, ref2, target;
      if (classElem._running && ifClassListWillChange(classElem)) {
        target = classElem._target;
        updateTargetClass(disableClass, target, classElem);
        updateClassList(target);
        updateTargetClass(enableClass, target, classElem);
      }
      if (children = classElem._children) {
        for (j = 0, len = children.length; j < len; j++) {
          child = children[j];
          if (child instanceof Class) {
            updateChildPriorities(classElem, child);
          }
        }
      }
      if (document = classElem._document) {
        _inheritsPriority = classElem._inheritsPriority, _nestingPriority = classElem._nestingPriority;
        ref1 = document._classesInUse;
        for (k = 0, len1 = ref1.length; k < len1; k++) {
          child = ref1[k];
          child._inheritsPriority = _inheritsPriority;
          child._nestingPriority = _nestingPriority;
          updatePriorities(child);
        }
        ref2 = document._classesPool;
        for (l = 0, len2 = ref2.length; l < len2; l++) {
          child = ref2[l];
          child._inheritsPriority = _inheritsPriority;
          child._nestingPriority = _nestingPriority;
        }
      }
    };
    ifClassListWillChange = function(classElem) {
      var classList, index, target;
      if (!(target = classElem._target)) {
        return false;
      }
      classList = target._classList;
      index = classList.indexOf(classElem);
      if (index > 0 && classListSortFunc(classElem, classList[index - 1]) < 0) {
        return true;
      }
      if (index < classList.length - 1 && classListSortFunc(classElem, classList[index + 1]) > 0) {
        return true;
      }
      return false;
    };
    classListSortFunc = function(a, b) {
      return (b._priority + b._inheritsPriority) - (a._priority + a._inheritsPriority) || b._nestingPriority - a._nestingPriority;
    };
    updateClassList = function(item) {
      return item._classList.sort(classListSortFunc);
    };
    cloneClassChild = function(classElem, child) {
      return child.clone();
    };
    cloneClassWithNoDocument = function() {
      var child, childClone, children, clone, i, j, k, len, len1, prop, ref1, ref2, val;
      clone = Class.New();
      clone.id = this.id;
      clone._classUid = this._classUid;
      clone._priority = this._priority;
      clone._inheritsPriority = this._inheritsPriority;
      clone._nestingPriority = this._nestingPriority;
      clone._changes = this._changes;
      clone._nesting = this._nesting;
      if (this._bindings) {
        ref1 = this._bindings;
        for (prop in ref1) {
          val = ref1[prop];
          clone.createBinding(prop, val);
        }
      }
      if (children = this._children) {
        for (i = j = 0, len = children.length; j < len; i = ++j) {
          child = children[i];
          childClone = cloneClassChild(clone, child);
          clone.children.append(childClone);
        }
      }
      if (typeof this._nesting === 'function') {
        ref2 = this._nesting();
        for (k = 0, len1 = ref2.length; k < len1; k++) {
          child = ref2[k];
          clone.children.append(child);
        }
      }
      return clone;
    };
    splitAttribute = itemUtils.splitAttribute, getObjectByPath = itemUtils.getObjectByPath;
    setAttribute = function(item, attr, val) {
      var object, path;
      path = splitAttribute(attr);
      if (object = getObjectByPath(item, path)) {
        object[path[path.length - 1]] = val;
      }
    };
    saveAndEnableClass = function(item, classElem) {
      assert.notOk(utils.has(item._classList, classElem));
      item._classList.unshift(classElem);
      if (ifClassListWillChange(classElem)) {
        updateClassList(item);
      }
      return enableClass(item, classElem);
    };
    saveAndDisableClass = function(item, classElem) {
      assert.ok(utils.has(item._classList, classElem));
      disableClass(item, classElem);
      return utils.remove(item._classList, classElem);
    };
    ATTRS_CONFLICTS = [['x', 'anchors.left', 'anchors.right', 'anchors.horizontalCenter', 'anchors.centerIn'], ['y', 'anchors.top', 'anchors.bottom', 'anchors.verticalCenter', 'anchors.centerIn'], ['width', 'anchors.fill', 'anchors.fillWidth', 'fillWidth'], ['height', 'anchors.fill', 'anchors.fillHeight', 'fillHeight']];
    ATTRS_ALIAS = Object.create(null);
    (function() {
      var alias, aliases, arr, j, k, l, len, len1, len2, prop;
      for (j = 0, len = ATTRS_CONFLICTS.length; j < len; j++) {
        aliases = ATTRS_CONFLICTS[j];
        for (k = 0, len1 = aliases.length; k < len1; k++) {
          prop = aliases[k];
          arr = ATTRS_ALIAS[prop] != null ? ATTRS_ALIAS[prop] : ATTRS_ALIAS[prop] = [];
          for (l = 0, len2 = aliases.length; l < len2; l++) {
            alias = aliases[l];
            if (alias !== prop) {
              arr.push(alias);
            }
          }
        }
      }
    })();
    getContainedAttribute = function(classElem, attr) {
      var attrs, changes;
      if (changes = classElem._changes) {
        attrs = changes._attributes;
        if (attrs[attr] !== void 0) {
          return attr;
        }
      }
      return '';
    };
    getContainedAlias = function(classElem, attr) {
      var alias, aliases, attrs, changes, j, len;
      if (changes = classElem._changes) {
        attrs = changes._attributes;
        if (aliases = ATTRS_ALIAS[attr]) {
          for (j = 0, len = aliases.length; j < len; j++) {
            alias = aliases[j];
            if (attrs[alias] !== void 0) {
              return alias;
            }
          }
        }
      }
      return '';
    };
    getContainedAttributeOrAlias = function(classElem, attr) {
      var alias, aliases, attrs, changes, j, len;
      if (changes = classElem._changes) {
        attrs = changes._attributes;
        if (attrs[attr] !== void 0) {
          return attr;
        } else if (aliases = ATTRS_ALIAS[attr]) {
          for (j = 0, len = aliases.length; j < len; j++) {
            alias = aliases[j];
            if (attrs[alias] !== void 0) {
              return alias;
            }
          }
        }
      }
      return '';
    };
    getPropertyDefaultValue = function(obj, prop) {
      var innerProp, proto;
      proto = Object.getPrototypeOf(obj);
      innerProp = itemUtils.getInnerPropName(prop);
      if (innerProp in proto) {
        return proto[innerProp];
      } else {
        return proto[prop];
      }
    };
    enableClass = function(item, classElem) {
      var alias, attr, attributes, bindings, changes, classList, classListIndex, classListLength, defaultIsBinding, defaultValue, i, j, k, lastPath, object, path, ref1, ref2, ref3, ref4, ref5, val, writeAttr;
      assert.instanceOf(item, itemUtils.Object);
      assert.instanceOf(classElem, Class);
      classList = item._classList;
      classListIndex = classList.indexOf(classElem);
      classListLength = classList.length;
      if (classListIndex === -1) {
        return;
      }
      if (!(changes = classElem._changes)) {
        return;
      }
      attributes = changes._attributes;
      bindings = changes._bindings;
      for (attr in attributes) {
        val = attributes[attr];
        path = null;
        writeAttr = true;
        alias = '';
        for (i = j = ref1 = classListIndex - 1; j >= 0; i = j += -1) {
          if (getContainedAttributeOrAlias(classList[i], attr)) {
            writeAttr = false;
            break;
          }
        }
        if (writeAttr) {
          for (i = k = ref2 = classListIndex + 1, ref3 = classListLength; k < ref3; i = k += 1) {
            if ((alias = getContainedAlias(classList[i], attr))) {
              path = splitAttribute(alias);
              object = getObjectByPath(item, path);
              lastPath = path[path.length - 1];
              if (!object) {
                continue;
              }
              defaultValue = getPropertyDefaultValue(object, lastPath);
              defaultIsBinding = !!classList[i].changes._bindings[alias];
              if (defaultIsBinding) {
                object.createBinding(lastPath, null, item);
              }
              object[lastPath] = defaultValue;
              break;
            }
          }
          if (attr !== alias || !path) {
            path = splitAttribute(attr);
            lastPath = path[path.length - 1];
            object = getObjectByPath(item, path);
          }
          if (!object || !(lastPath in object)) {
            //<development>;
            log.error("Attribute '" + attr + "' doesn't exist in '" + item + "'");
            //</development>;
            continue;
          }
          if (bindings[attr]) {
            object.createBinding(lastPath, val, item);
          } else if (typeof val === 'function' && ((ref4 = object[lastPath]) != null ? ref4.connect : void 0)) {
            object[lastPath].connect(val, item);
          } else {
            if ((ref5 = object._bindings) != null ? ref5[lastPath] : void 0) {
              object.createBinding(lastPath, null, item);
            }
            object[lastPath] = val;
          }
        }
      }
    };
    disableClass = function(item, classElem) {
      var alias, attr, attributes, bindings, changes, classList, classListIndex, classListLength, defaultIsBinding, defaultValue, getAttributeMethod, i, j, k, lastPath, object, path, ref1, ref2, ref3, ref4, restoreDefault, val;
      assert.instanceOf(item, itemUtils.Object);
      assert.instanceOf(classElem, Class);
      classList = item._classList;
      classListIndex = classList.indexOf(classElem);
      classListLength = classList.length;
      if (classListIndex === -1) {
        return;
      }
      if (!(changes = classElem._changes)) {
        return;
      }
      attributes = changes._attributes;
      bindings = changes._bindings;
      for (attr in attributes) {
        val = attributes[attr];
        restoreDefault = true;
        for (i = j = ref1 = classListIndex - 1; j >= 0; i = j += -1) {
          if (getContainedAttributeOrAlias(classList[i], attr)) {
            restoreDefault = false;
            break;
          }
        }
        if (restoreDefault) {
          getAttributeMethod = getContainedAttribute;
          while (getAttributeMethod) {
            path = null;
            alias = '';
            defaultValue = void 0;
            defaultIsBinding = false;
            for (i = k = ref2 = classListIndex + 1, ref3 = classListLength; k < ref3; i = k += 1) {
              if (alias = getAttributeMethod(classList[i], attr)) {
                defaultValue = classList[i].changes._attributes[alias];
                defaultIsBinding = !!classList[i].changes._bindings[alias];
                break;
              }
            }
            if (getAttributeMethod === getContainedAttribute) {
              alias || (alias = attr);
              getAttributeMethod = getContainedAlias;
            } else {
              getAttributeMethod = null;
            }
            if (!alias) {
              continue;
            }
            if (!!bindings[attr]) {
              path = splitAttribute(attr);
              object = getObjectByPath(item, path);
              lastPath = path[path.length - 1];
              if (!object) {
                continue;
              }
              object.createBinding(lastPath, null, item);
            }
            if (attr !== alias || !path) {
              path = splitAttribute(alias);
              object = getObjectByPath(item, path);
              lastPath = path[path.length - 1];
              if (!object) {
                continue;
              }
            }
            if (defaultIsBinding) {
              object.createBinding(lastPath, defaultValue, item);
            } else if (typeof val === 'function' && ((ref4 = object[lastPath]) != null ? ref4.connect : void 0)) {
              object[lastPath].disconnect(val, item);
            } else {
              if (defaultValue === void 0) {
                defaultValue = getPropertyDefaultValue(object, lastPath);
              }
              object[lastPath] = defaultValue;
            }
          }
        }
      }
    };
    runQueue = function(target) {
      var classElem, classQueue, func;
      classQueue = target._classQueue;
      func = classQueue[0], target = classQueue[1], classElem = classQueue[2];
      func(target, classElem);
      classQueue.shift();
      classQueue.shift();
      classQueue.shift();
      if (classQueue.length > 0) {
        runQueue(target);
      }
    };
    updateTargetClass = function(func, target, classElem) {
      var classQueue;
      classQueue = target._classQueue;
      classQueue.push(func, target, classElem);
      if (classQueue.length === 3) {
        runQueue(target);
      }
    };
    ElementTarget = (function(superClass) {
      extend(ElementTarget, superClass);

      function ElementTarget(element) {
        ElementTarget.__super__.constructor.call(this);
        this._element = element;
        Object.seal(this);
      }

      itemUtils.defineProperty({
        constructor: ElementTarget,
        name: 'element',
        defaultValue: null
      });

      return ElementTarget;

    })(itemUtils.Object);
    Class.ElementTarget = ElementTarget;
    ClassChildDocument = (function() {
      function ClassChildDocument(parent) {
        this._ref = parent._ref;
        this._parent = parent;
        this._multiplicity = 0;
        Object.preventExtensions(this);
      }

      return ClassChildDocument;

    })();
    ClassDocument = (function(superClass) {
      var connectNodeStyle, disconnectNodeStyle, getChildClass, onNodeAdd, onNodeRemove, onNodeStyleChange, onTargetChange;

      extend(ClassDocument, superClass);

      ClassDocument.__name__ = 'ClassDocument';

      itemUtils.defineProperty({
        constructor: Class,
        name: 'document',
        valueConstructor: ClassDocument
      });

      onTargetChange = function(oldVal) {
        var val;
        if (oldVal) {
          oldVal.onElementChange.disconnect(this.reloadQuery, this);
        }
        if (val = this._ref._target) {
          val.onElementChange.connect(this.reloadQuery, this);
        }
        if (oldVal !== val) {
          this.reloadQuery();
        }
      };

      function ClassDocument(ref) {
        this._query = '';
        this._classesInUse = [];
        this._classesPool = [];
        this._nodeWatcher = null;
        this._priority = 0;
        ClassDocument.__super__.constructor.call(this, ref);
        ref.onTargetChange.connect(onTargetChange, this);
        onTargetChange.call(this, ref._target);
      }

      SignalsEmitter.createSignal(ClassDocument, 'onNodeAdd');

      SignalsEmitter.createSignal(ClassDocument, 'onNodeRemove');

      itemUtils.defineProperty({
        constructor: ClassDocument,
        name: 'query',
        defaultValue: '',
        namespace: 'document',
        parentConstructor: ClassDocument,
        developmentSetter: function(val) {
          return assert.isString(val);
        },
        setter: function(_super) {
          return function(val) {
            var cmdLen, oldPriority;
            assert.notOk(this._parent);
            if (this._query === val) {
              return;
            }
            if (!this._query) {
              unloadObjects(this, this._target);
            }
            _super.call(this, val);
            this.reloadQuery();
            if (this._ref._priority < 1) {
              cmdLen = TagQuery.getSelectorPriority(val, 0, 1);
              oldPriority = this._priority;
              this._priority = cmdLen;
              this._ref._nestingPriority += cmdLen - oldPriority;
              updatePriorities(this._ref);
            }
            if (!val) {
              loadObjects(this, this._target);
            }
          };
        }
      });

      getChildClass = function(style, parentClass) {
        var classElem, j, len, ref1, ref2;
        ref1 = style._extensions;
        for (j = 0, len = ref1.length; j < len; j++) {
          classElem = ref1[j];
          if (classElem instanceof Class) {
            if (((ref2 = classElem._document) != null ? ref2._parent : void 0) === parentClass) {
              return classElem;
            }
          }
        }
      };

      connectNodeStyle = function(style) {
        var classElem, j, len, ref1, ref2, uid;
        uid = this._ref._classUid;
        ref1 = style._extensions;
        for (j = 0, len = ref1.length; j < len; j++) {
          classElem = ref1[j];
          if (classElem instanceof Class) {
            if (classElem !== this._ref && classElem._classUid === uid && classElem._document instanceof ClassChildDocument) {
              classElem._document._multiplicity++;
              return;
            }
          }
        }
        if (!(classElem = this._classesPool.pop())) {
          classElem = cloneClassWithNoDocument.call(this._ref);
          classElem._document = new ClassChildDocument(this);
        }
        this._classesInUse.push(classElem);
        classElem.target = style;
        if (!((ref2 = classElem._bindings) != null ? ref2.running : void 0)) {
          classElem.running = true;
        }
      };

      disconnectNodeStyle = function(style) {
        var classElem;
        if (!(classElem = getChildClass(style, this))) {
          return;
        }
        if (classElem._document._multiplicity > 0) {
          classElem._document._multiplicity--;
          return;
        }
        classElem.target = null;
        utils.remove(this._classesInUse, classElem);
        this._classesPool.push(classElem);
      };

      onNodeStyleChange = function(oldVal, val) {
        if (oldVal) {
          disconnectNodeStyle.call(this, oldVal);
        }
        if (val) {
          connectNodeStyle.call(this, val);
        }
      };

      onNodeAdd = function(node) {
        var style;
        node.onStyleChange.connect(onNodeStyleChange, this);
        if (style = node._style) {
          connectNodeStyle.call(this, style);
        }
        this.emit('onNodeAdd', node);
      };

      onNodeRemove = function(node) {
        var style;
        node.onStyleChange.disconnect(onNodeStyleChange, this);
        if (style = node._style) {
          disconnectNodeStyle.call(this, style);
        }
        this.emit('onNodeRemove', node);
      };

      ClassDocument.prototype.reloadQuery = function() {
        var classElem, node, query, ref1, target, watcher;
        if ((ref1 = this._nodeWatcher) != null) {
          ref1.disconnect();
        }
        this._nodeWatcher = null;
        while (classElem = this._classesInUse.pop()) {
          classElem.target = null;
          this._classesPool.push(classElem);
        }
        if ((query = this._query) && (target = this._ref.target) && (node = target.element) && node.watch) {
          watcher = this._nodeWatcher = node.watch(query);
          watcher.onAdd.connect(onNodeAdd, this);
          watcher.onRemove.connect(onNodeRemove, this);
        }
      };

      return ClassDocument;

    })(itemUtils.DeepObject);
    return Class;
  };

}).call(this);

},{"../../../assert":"../../../node_modules/@neft/core/src/assert/index.litcoffee","../../../util":"../../../node_modules/@neft/core/src/util/index.litcoffee","../../../signal":"../../../node_modules/@neft/core/src/signal/index.js","../../../log":"../../../node_modules/@neft/core/src/log/index.litcoffee","../../../document/element/element/tag/query":"../../../node_modules/@neft/core/src/document/element/element/tag/query.coffee"}],"../../../node_modules/@neft/core/src/renderer/types/extensions/animation.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  var SignalsEmitter, assert, utils,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  utils = require('../../../util');

  assert = require('../../../assert');

  SignalsEmitter = require('../../../signal').SignalsEmitter;

  module.exports = function(Renderer, Impl, itemUtils) {
    var Animation;
    return Animation = (function(superClass) {
      extend(Animation, superClass);

      Animation.__name__ = 'Animation';

      function Animation() {
        Animation.__super__.constructor.call(this);
        this._loop = false;
        this._paused = false;
        this._reversed = false;
      }

      SignalsEmitter.createSignal(Animation, 'onStart');

      SignalsEmitter.createSignal(Animation, 'onStop');

      itemUtils.defineProperty({
        constructor: Animation,
        name: 'paused',
        developmentSetter: function(val) {
          return assert.isBoolean(val);
        },
        setter: function(_super) {
          return function(val) {
            var oldVal;
            oldVal = this._paused;
            if (oldVal === val) {
              return;
            }
            _super.call(this, val);
            if (val) {
              Impl.pauseAnimation.call(this);
            } else {
              Impl.resumeAnimation.call(this);
            }
          };
        }
      });

      itemUtils.defineProperty({
        constructor: Animation,
        name: 'reversed',
        implementation: Impl.setAnimationReversed,
        developmentSetter: function(val) {
          return assert.isBoolean(val);
        }
      });

      itemUtils.defineProperty({
        constructor: Animation,
        name: 'loop',
        implementation: Impl.setAnimationLoop,
        developmentSetter: function(val) {
          return assert.isBoolean(val);
        }
      });

      Animation.prototype.start = function() {
        this.running = true;
        return this;
      };

      Animation.prototype.stop = function() {
        this.running = false;
        return this;
      };

      Animation.prototype.pause = function() {
        if (this.running) {
          this.paused = true;
        }
        return this;
      };

      Animation.prototype.resume = function() {
        this.paused = false;
        return this;
      };

      Animation.prototype._enable = function() {
        Impl.startAnimation.call(this);
        this.emit('onStart');
        if (this._paused) {
          return Impl.pauseAnimation.call(this);
        }
      };

      Animation.prototype._disable = function() {
        if (this._paused) {
          this.paused = false;
        }
        Impl.stopAnimation.call(this);
        return this.emit('onStop');
      };

      return Animation;

    })(Renderer.Extension);
  };

}).call(this);

},{"../../../util":"../../../node_modules/@neft/core/src/util/index.litcoffee","../../../assert":"../../../node_modules/@neft/core/src/assert/index.litcoffee","../../../signal":"../../../node_modules/@neft/core/src/signal/index.js"}],"../../../node_modules/@neft/core/src/renderer/types/extensions/animation/types/property/easing.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  var assert, log,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  assert = require('../../../../../../assert');

  log = require('../../../../../../log');

  log = log.scope('Renderer', 'PropertyAnimation', 'Easing');

  module.exports = function(Renderer, Impl, itemUtils) {
    var Easing;
    return Easing = (function(superClass) {
      var EASINGS, EASING_ALIASES, easing, i, len;

      extend(Easing, superClass);

      function Easing(ref) {
        this._type = 'Linear';
        this._steps = 1;
        Easing.__super__.constructor.call(this, ref);
      }

      EASINGS = ['Linear', 'InQuad', 'OutQuad', 'InOutQuad', 'InCubic', 'OutCubic', 'InOutCubic', 'InQuart', 'OutQuart', 'InOutQuart', 'InQuint', 'OutQuint', 'InOutQuint', 'InSine', 'OutSine', 'InOutSine', 'InExpo', 'OutExpo', 'InOutExpo', 'InCirc', 'OutCirc', 'InOutCirc', 'InElastic', 'OutElastic', 'InOutElastic', 'InBack', 'OutBack', 'InOutBack', 'InBounce', 'OutBounce', 'InOutBounce', 'Steps'];

      EASING_ALIASES = Object.create(null);

      for (i = 0, len = EASINGS.length; i < len; i++) {
        easing = EASINGS[i];
        EASING_ALIASES[easing] = easing;
        EASING_ALIASES[easing.toLowerCase()] = easing;
      }

      itemUtils.defineProperty({
        constructor: Easing,
        name: 'type',
        defaultValue: 'Linear',
        namespace: 'easing',
        implementation: Impl.setPropertyAnimationEasingType,
        developmentSetter: function(val) {
          if (val) {
            return assert.isString(val);
          }
        },
        setter: function(_super) {
          return function(val) {
            var type;
            if (!val) {
              val = 'Linear';
            }
            type = EASING_ALIASES[val];
            type || (type = EASING_ALIASES[val.toLowerCase()]);
            if (!type) {
              log.warn("Easing type '" + val + "' not recognized");
              type = 'Linear';
            }
            _super.call(this, type);
          };
        }
      });

      itemUtils.defineProperty({
        constructor: Easing,
        name: 'steps',
        defaultValue: 1,
        namespace: 'easing',
        implementation: Impl.setPropertyAnimationEasingSteps,
        developmentSetter: function(val) {
          if (val) {
            assert.isInteger(val);
            return assert.operator(val, '>', 0);
          }
        }
      });

      return Easing;

    })(itemUtils.DeepObject);
  };

}).call(this);

},{"../../../../../../assert":"../../../node_modules/@neft/core/src/assert/index.litcoffee","../../../../../../log":"../../../node_modules/@neft/core/src/log/index.litcoffee"}],"../../../node_modules/@neft/core/src/renderer/types/extensions/animation/types/property.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  var assert, log, utils,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  utils = require('../../../../../util');

  assert = require('../../../../../assert');

  log = require('../../../../../log');

  log = log.scope('Renderer', 'PropertyAnimation');

  module.exports = function(Renderer, Impl, itemUtils) {
    var PropertyAnimation;
    return PropertyAnimation = (function(superClass) {
      var Easing, getter, setter;

      extend(PropertyAnimation, superClass);

      PropertyAnimation.__name__ = 'PropertyAnimation';

      (function(i) {
        PropertyAnimation.NEVER = 0;
        PropertyAnimation.ON_START = 1 << i++;
        PropertyAnimation.ON_STOP = 1 << i++;
        PropertyAnimation.ON_PENDING = 1 << i++;
        PropertyAnimation.ALWAYS = (1 << i) - 1;
        return PropertyAnimation.ON_END = PropertyAnimation.ON_STOP;
      })(0);

      function PropertyAnimation() {
        PropertyAnimation.__super__.constructor.call(this);
        this._property = '';
        this._autoFrom = true;
        this._duration = 250;
        this._startDelay = 0;
        this._loopDelay = 0;
        this._updateProperty = PropertyAnimation.ON_START | PropertyAnimation.ON_STOP;
        this._easing = null;
        this._updatePending = false;
      }

      getter = utils.lookupGetter(PropertyAnimation.prototype, 'running');

      setter = utils.lookupSetter(PropertyAnimation.prototype, 'running');

      utils.defineProperty(PropertyAnimation.prototype, 'running', null, getter, (function(_super) {
        return function(val) {
          if (val && this._autoFrom && this._target) {
            this.from = this._target[this._property];
            this._autoFrom = true;
          }
          _super.call(this, val);
        };
      })(setter));

      itemUtils.defineProperty({
        constructor: PropertyAnimation,
        name: 'target',
        defaultValue: null,
        implementation: Impl.setPropertyAnimationTarget,
        setter: function(_super) {
          return function(val) {
            var oldVal;
            oldVal = this._target;
            if (oldVal) {
              if (this._running) {
                this._disable();
              }
              utils.remove(oldVal._extensions, this);
            }
            if (val) {
              val._extensions.push(this);
            }
            _super.call(this, val);
            if (val && this._running) {
              this._enable();
            }
          };
        }
      });

      itemUtils.defineProperty({
        constructor: PropertyAnimation,
        name: 'property',
        defaultValue: '',
        implementation: Impl.setPropertyAnimationProperty,
        developmentSetter: function(val) {
          return assert.isString(val);
        }
      });

      itemUtils.defineProperty({
        constructor: PropertyAnimation,
        name: 'duration',
        defaultValue: 250,
        implementation: Impl.setPropertyAnimationDuration,
        developmentSetter: function(val) {
          return assert.isFloat(val);
        },
        setter: function(_super) {
          return function(val) {
            if (val < 0) {
              _super.call(this, 0);
            } else {
              _super.call(this, val);
            }
          };
        }
      });

      itemUtils.defineProperty({
        constructor: PropertyAnimation,
        name: 'startDelay',
        defaultValue: 0,
        implementation: Impl.setPropertyAnimationStartDelay,
        developmentSetter: function(val) {
          return assert.isFloat(val);
        }
      });

      itemUtils.defineProperty({
        constructor: PropertyAnimation,
        name: 'loopDelay',
        defaultValue: 0,
        implementation: Impl.setPropertyAnimationLoopDelay,
        developmentSetter: function(val) {
          return assert.isFloat(val);
        }
      });

      itemUtils.defineProperty({
        constructor: PropertyAnimation,
        name: 'delay',
        defaultValue: 0,
        developmentSetter: function(val) {
          return assert.isFloat(val);
        },
        getter: function(_super) {
          return function(val) {
            if (this._startDelay === this._loopDelay) {
              return this._startDelay;
            } else {
              throw new Error("startDelay and loopDelay are different");
            }
          };
        },
        setter: function(_super) {
          return function(val) {
            this.startDelay = val;
            this.loopDelay = val;
            _super.call(this, val);
          };
        }
      });

      itemUtils.defineProperty({
        constructor: PropertyAnimation,
        name: 'updateProperty',
        defaultValue: PropertyAnimation.ON_START | PropertyAnimation.ON_STOP,
        implementation: Impl.setPropertyAnimationUpdateProperty,
        developmentSetter: function(val) {
          var msg;
          msg = "PropertyAnimation::updateProperty needs to be a bitmask of PropertyAnimation.ON_START, PropertyAnimation.ON_STOP, PropertyAnimation.ON_PENDING or PropertyAnimation.NEVER, PropertyAnimation.ALWAYS";
          assert.isInteger(val, msg);
          assert.operator(val, '>=', PropertyAnimation.NEVER, msg);
          return assert.operator(val, '<=', PropertyAnimation.ALWAYS, msg);
        }
      });

      itemUtils.defineProperty({
        constructor: PropertyAnimation,
        name: 'from',
        implementation: Impl.setPropertyAnimationFrom,
        setter: function(_super) {
          return function(val) {
            this._autoFrom = false;
            _super.call(this, val);
          };
        }
      });

      itemUtils.defineProperty({
        constructor: PropertyAnimation,
        name: 'to',
        implementation: Impl.setPropertyAnimationTo
      });

      utils.defineProperty(PropertyAnimation.prototype, 'progress', null, function() {
        return Impl.getPropertyAnimationProgress.call(this);
      }, null);

      utils.defineProperty(PropertyAnimation.prototype, 'updatePending', null, function() {
        return this._updatePending;
      }, null);

      Easing = require('./property/easing')(Renderer, Impl, itemUtils);

      utils.defineProperty(PropertyAnimation.prototype, 'easing', null, function() {
        return this._easing || (this._easing = new Easing(this));
      }, function(val) {
        if (typeof val === 'string') {
          return this.easing.type = val;
        } else if (utils.isObject(val)) {
          return utils.merge(this.easing, val);
        } else if (!val) {
          return this.easing.type = 'Linear';
        }
      });

      return PropertyAnimation;

    })(Renderer.Animation);
  };

}).call(this);

},{"../../../../../util":"../../../node_modules/@neft/core/src/util/index.litcoffee","../../../../../assert":"../../../node_modules/@neft/core/src/assert/index.litcoffee","../../../../../log":"../../../node_modules/@neft/core/src/log/index.litcoffee","./property/easing":"../../../node_modules/@neft/core/src/renderer/types/extensions/animation/types/property/easing.coffee"}],"../../../node_modules/@neft/core/src/renderer/types/extensions/animation/types/property/types/number.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  var utils,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  utils = require('../../../../../../../util');

  module.exports = function(Renderer, Impl, itemUtils) {
    var NumberAnimation;
    return NumberAnimation = (function(superClass) {
      extend(NumberAnimation, superClass);

      NumberAnimation.__name__ = 'NumberAnimation';

      NumberAnimation.New = function(opts) {
        var item;
        item = new NumberAnimation;
        itemUtils.Object.initialize(item, opts);
        return item;
      };

      function NumberAnimation() {
        NumberAnimation.__super__.constructor.call(this);
        this._from = 0;
        this._to = 0;
      }

      return NumberAnimation;

    })(Renderer.PropertyAnimation);
  };

}).call(this);

},{"../../../../../../../util":"../../../node_modules/@neft/core/src/util/index.litcoffee"}],"../../../node_modules/@neft/core/src/renderer/types/extensions/animation/types/sequential.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  var assert, log, utils,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  utils = require('../../../../../util');

  assert = require('../../../../../assert');

  log = require('../../../../../log');

  log = log.scope('Renderer', 'SequentialAnimation');

  module.exports = function(Renderer, Impl, itemUtils) {
    var SequentialAnimation;
    return SequentialAnimation = (function(superClass) {
      var onStart, onStop, runNext, shouldStop;

      extend(SequentialAnimation, superClass);

      SequentialAnimation.__name__ = 'SequentialAnimation';

      SequentialAnimation.New = function(opts) {
        var item;
        item = new SequentialAnimation;
        itemUtils.Object.initialize(item, opts);
        return item;
      };

      function SequentialAnimation() {
        SequentialAnimation.__super__.constructor.call(this);
        this._children = [];
        this._runningChildIndex = -1;
        this.onStart.connect(onStart);
        this.onStop.connect(onStop);
      }

      itemUtils.defineProperty({
        constructor: SequentialAnimation,
        name: 'target',
        setter: function(_super) {
          return function(val) {
            var child, i, len, ref;
            ref = this._children;
            for (i = 0, len = ref.length; i < len; i++) {
              child = ref[i];
              child.target = val;
            }
            _super.call(this, val);
          };
        }
      });

      shouldStop = function() {
        return this._runningChildIndex >= this._children.length || this._runningChildIndex < 0;
      };

      runNext = function() {
        var child;
        if (!this._running) {
          return;
        }
        if (this._runningChildIndex >= 0) {
          this._children[this._runningChildIndex].onStop.disconnect(runNext, this);
        }
        this._runningChildIndex += this._reversed ? -1 : 1;
        if (this._loop && shouldStop.call(this)) {
          this._runningChildIndex = this._reversed ? this._children.length - 1 : 0;
        }
        if (shouldStop.call(this)) {
          this.running = false;
        } else {
          child = this._children[this._runningChildIndex];
          child.onStop.connect(runNext, this);
          child.running = true;
          child.paused = this._paused;
        }
      };

      onStart = function() {
        if (!this._children.length) {
          this.running = false;
          return;
        }
        runNext.call(this);
      };

      onStop = function() {
        var ref;
        if ((ref = this._children[this._runningChildIndex]) != null) {
          ref.running = false;
        }
        this._runningChildIndex = -1;
      };

      itemUtils.defineProperty({
        constructor: SequentialAnimation,
        name: 'paused',
        setter: function(_super) {
          return function(val) {
            var ref;
            _super.call(this, val);
            if ((ref = this._children[this._runningChildIndex]) != null) {
              ref.paused = val;
            }
          };
        }
      });

      itemUtils.defineProperty({
        constructor: SequentialAnimation,
        name: 'reversed',
        developmentSetter: function(val) {
          return assert.isBoolean(val);
        },
        setter: function(_super) {
          return function(val) {
            _super.call(this, val);
          };
        }
      });

      return SequentialAnimation;

    })(Renderer.Animation);
  };

}).call(this);

},{"../../../../../util":"../../../node_modules/@neft/core/src/util/index.litcoffee","../../../../../assert":"../../../node_modules/@neft/core/src/assert/index.litcoffee","../../../../../log":"../../../node_modules/@neft/core/src/log/index.litcoffee"}],"../../../node_modules/@neft/core/src/renderer/types/extensions/animation/types/parallel.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  var assert, log, utils,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  utils = require('../../../../../util');

  assert = require('../../../../../assert');

  log = require('../../../../../log');

  log = log.scope('Renderer', 'ParallelAnimation');

  module.exports = function(Renderer, Impl, itemUtils) {
    var ParallelAnimation;
    return ParallelAnimation = (function(superClass) {
      var onChildStop, onChildrenStop, onStart, onStop;

      extend(ParallelAnimation, superClass);

      ParallelAnimation.__name__ = 'ParallelAnimation';

      ParallelAnimation.New = function(opts) {
        var item;
        item = new ParallelAnimation;
        itemUtils.Object.initialize(item, opts);
        return item;
      };

      function ParallelAnimation() {
        ParallelAnimation.__super__.constructor.call(this);
        this._children = [];
        this._runningChildren = 0;
        this.onStart.connect(onStart);
        this.onStop.connect(onStop);
      }

      itemUtils.defineProperty({
        constructor: ParallelAnimation,
        name: 'target',
        setter: function(_super) {
          return function(val) {
            var child, i, len, ref;
            ref = this._children;
            for (i = 0, len = ref.length; i < len; i++) {
              child = ref[i];
              child.target = val;
            }
            _super.call(this, val);
          };
        }
      });

      onChildrenStop = function() {
        if (this.loop) {
          onStop.call(this);
          onStart.call(this);
        } else {
          this.running = false;
        }
      };

      onChildStop = function() {
        this._runningChildren -= 1;
        if (this._runningChildren === 0) {
          onChildrenStop.call(this);
        }
      };

      onStart = function() {
        var child, i, len, ref;
        if (!this._children.length) {
          this.running = false;
          return;
        }
        this._runningChildren = this._children.length;
        ref = this._children;
        for (i = 0, len = ref.length; i < len; i++) {
          child = ref[i];
          child.onStop.connect(onChildStop, this);
          child.running = true;
        }
      };

      onStop = function() {
        var child, i, len, ref;
        ref = this._children;
        for (i = 0, len = ref.length; i < len; i++) {
          child = ref[i];
          child.onStop.disconnect(onChildStop, this);
          child.running = false;
        }
      };

      itemUtils.defineProperty({
        constructor: ParallelAnimation,
        name: 'paused',
        setter: function(_super) {
          return function(val) {
            var child, i, len, ref;
            _super.call(this, val);
            ref = this._children;
            for (i = 0, len = ref.length; i < len; i++) {
              child = ref[i];
              child.paused = val;
            }
          };
        }
      });

      itemUtils.defineProperty({
        constructor: ParallelAnimation,
        name: 'reversed',
        developmentSetter: function(val) {
          return assert.isBoolean(val);
        },
        setter: function(_super) {
          return function(val) {
            var child, i, len, ref;
            _super.call(this, val);
            ref = this._children;
            for (i = 0, len = ref.length; i < len; i++) {
              child = ref[i];
              child.reversed = val;
            }
          };
        }
      });

      return ParallelAnimation;

    })(Renderer.Animation);
  };

}).call(this);

},{"../../../../../util":"../../../node_modules/@neft/core/src/util/index.litcoffee","../../../../../assert":"../../../node_modules/@neft/core/src/assert/index.litcoffee","../../../../../log":"../../../node_modules/@neft/core/src/log/index.litcoffee"}],"../../../node_modules/@neft/core/src/renderer/types/extensions/transition.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  var assert, log, signal, utils,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  utils = require('../../../util');

  assert = require('../../../assert');

  signal = require('../../../signal');

  log = require('../../../log');

  log = log.scope('Renderer', 'Transition');

  module.exports = function(Renderer, Impl, itemUtils) {
    var Transition;
    return Transition = (function(superClass) {
      var listener, onTargetReady;

      extend(Transition, superClass);

      Transition.__name__ = 'Transition';

      Transition.New = function(opts) {
        var item;
        item = new Transition;
        itemUtils.Object.initialize(item, opts);
        return item;
      };

      function Transition() {
        Transition.__super__.constructor.call(this);
        this._running = true;
        this._ready = false;
        this._animation = null;
        this._property = '';
        this._animationClass = Renderer.Class.New({
          priority: -2,
          changes: {
            updateProperty: Renderer.PropertyAnimation.NEVER
          }
        });
      }

      listener = function(oldVal) {
        var animation, shouldRun, to;
        animation = this.animation;
        to = this._target[this.property];
        shouldRun = animation && this.running && this._ready && !animation.updatePending;
        shouldRun && (shouldRun = utils.isFloat(oldVal) && utils.isFloat(to));
        if (!shouldRun) {
          return;
        }
        animation.stop();
        animation.from = oldVal;
        animation.to = to;
        animation.start();
      };

      onTargetReady = function() {
        return this._ready = true;
      };

      itemUtils.defineProperty({
        constructor: Transition,
        name: 'target',
        defaultValue: null,
        setter: function(_super) {
          return function(val) {
            var animation, handlerName, item, oldVal, property, ref, ref1;
            oldVal = this.target;
            if (oldVal === val) {
              return;
            }
            ref = this, animation = ref.animation, property = ref.property;
            if (animation) {
              animation.stop();
              animation.target = val;
            }
            _super.call(this, val);
            if (oldVal) {
              utils.remove(oldVal._extensions, this);
            }
            this._ready = false;
            if (val instanceof itemUtils.Object) {
              item = val;
            } else if (val instanceof itemUtils.MutableDeepObject) {
              item = val._ref;
            } else {
              setImmediate(onTargetReady.bind(this));
            }
            if (item) {
              item._extensions.push(this);
              this._ready = true;
            }
            if (property) {
              handlerName = itemUtils.getPropHandlerName(property);
              if (oldVal) {
                if ((ref1 = oldVal[handlerName]) != null) {
                  ref1.disconnect(listener, this);
                }
              }
              if (val) {
                if (handlerName in val) {
                  val[handlerName].connect(listener, this);
                } else {
                  log.error("'" + property + "' property signal not found");
                }
              }
            }
          };
        }
      });

      itemUtils.defineProperty({
        constructor: Transition,
        name: 'animation',
        defaultValue: null,
        developmentSetter: function(val) {
          if (val != null) {
            return assert.instanceOf(val, Renderer.PropertyAnimation);
          }
        },
        setter: function(_super) {
          return function(val) {
            var oldVal;
            oldVal = this.animation;
            if (oldVal === val) {
              return;
            }
            _super.call(this, val);
            if (oldVal) {
              this._animationClass.disable();
              oldVal.target = null;
              oldVal.stop();
            }
            if (val) {
              this._animationClass.target = val;
              this._animationClass.running = true;
              val.target = this.target;
              val.property = this.property;
            }
          };
        }
      });

      itemUtils.defineProperty({
        constructor: Transition,
        name: 'property',
        defaultValue: '',
        setter: function(_super) {
          return function(val) {
            var animation, chain, chains, handlerName, i, j, len, n, oldVal, ref, target;
            oldVal = this.property;
            if (oldVal === val) {
              return;
            }
            ref = this, animation = ref.animation, target = ref.target;
            if (target && val.indexOf('.') !== -1) {
              chains = val.split('.');
              n = chains.length;
              for (i = j = 0, len = chains.length; j < len; i = ++j) {
                chain = chains[i];
                if (!(i < n - 1)) {
                  continue;
                }
                target = target[chain];
                if (!target) {
                  log.error("No object found for the '" + val + "' property");
                  break;
                }
              }
              val = chains[n - 1];
              this.target = target;
            }
            if (animation) {
              animation.stop();
              animation.property = val;
            }
            _super.call(this, val);
            if (target) {
              if (oldVal) {
                handlerName = itemUtils.getPropHandlerName(oldVal);
                target[handlerName].disconnect(listener, this);
              }
              if (val) {
                handlerName = itemUtils.getPropHandlerName(val);
                target[handlerName].connect(listener, this);
              }
            }
          };
        }
      });

      return Transition;

    })(Renderer.Extension);
  };

}).call(this);

},{"../../../util":"../../../node_modules/@neft/core/src/util/index.litcoffee","../../../assert":"../../../node_modules/@neft/core/src/assert/index.litcoffee","../../../signal":"../../../node_modules/@neft/core/src/signal/index.js","../../../log":"../../../node_modules/@neft/core/src/log/index.litcoffee"}],"../../../node_modules/@neft/core/src/renderer/utils/Matrix.coffee":[function(require,module,exports) {
(function() {
  'use strict';

  /*
  A C E
  B D F
  0 0 1
   */
  var Matrix;

  module.exports = Matrix = (function() {
    function Matrix() {
      this.a = this.d = 1;
      this.b = this.c = this.e = this.f = 0;
    }

    Matrix.prototype.transform = function(a2, b2, c2, d2, e2, f2) {
      var a1, b1, c1, d1, e1, f1;
      a1 = this.a;
      b1 = this.b;
      c1 = this.c;
      d1 = this.d;
      e1 = this.e;
      f1 = this.f;
      this.a = a1 * a2 + c1 * b2;
      this.b = b1 * a2 + d1 * b2;
      this.c = a1 * c2 + c1 * d2;
      this.d = b1 * c2 + d1 * d2;
      this.e = a1 * e2 + c1 * f2 + e1;
      this.f = b1 * e2 + d1 * f2 + f1;
      return this;
    };

    Matrix.prototype.rotate = function(angle) {
      var cos, sin;
      cos = Math.cos(angle);
      sin = Math.sin(angle);
      return this.transform(cos, sin, -sin, cos, 0, 0);
    };

    Matrix.prototype.scale = function(f) {
      return this.transform(f, 0, 0, f, 0, 0);
    };

    Matrix.prototype.translate = function(tx, ty) {
      return this.transform(1, 0, 0, 1, tx, ty);
    };

    Matrix.prototype.multiply = function(m) {
      return this.transform(m.a, m.b, m.c, m.d, m.e, m.f);
    };

    Matrix.prototype.getRotation = function() {
      var r;
      r = Math.sqrt(this.a * this.a + this.b * this.b);
      if (this.b > 0) {
        return Math.acos(this.a / r);
      } else {
        return -Math.acos(this.a / r);
      }
    };

    Matrix.prototype.getScale = function() {
      return Math.sqrt(this.a * this.a + this.b * this.b);
    };

    Matrix.prototype.getTranslate = function() {
      return {
        x: this.e,
        y: this.f
      };
    };

    return Matrix;

  })();

}).call(this);

},{}],"../../../node_modules/@neft/core/src/document/element/styles.coffee":[function(require,module,exports) {
(function() {
  exports.onSetParent = (function() {
    var findItemParent, setItemParent;
    findItemParent = function(node) {
      var docStyle, item, tmp;
      tmp = node;
      while (tmp) {
        if ((docStyle = tmp._documentStyle) && (item = docStyle.item)) {
          return item;
        }
        tmp = tmp.parent;
      }
      return null;
    };
    setItemParent = function(node, newParent) {
      var child, docStyle, i, len, ref;
      if ((docStyle = node._documentStyle)) {
        docStyle.setItemParent(newParent);
      } else if (node.children) {
        ref = node.children;
        for (i = 0, len = ref.length; i < len; i++) {
          child = ref[i];
          setItemParent(child, newParent);
        }
      }
    };
    return function(element, val) {
      var newParent;
      newParent = findItemParent(val);
      return setItemParent(element, newParent);
    };
  })();

  exports.onSetIndex = (function() {
    var updateItemIndex;
    updateItemIndex = function(node) {
      var child, docStyle, i, len, ref;
      if ((docStyle = node._documentStyle)) {
        docStyle.findItemIndex();
      } else if (node.children) {
        ref = node.children;
        for (i = 0, len = ref.length; i < len; i++) {
          child = ref[i];
          updateItemIndex(child);
        }
      }
    };
    return function(element) {
      return updateItemIndex(element);
    };
  })();

  exports.onSetVisible = (function() {
    var setVisibleForNode, updateTextNode;
    setVisibleForNode = function(node, val) {
      var child, docStyle, i, len, ref;
      if ((docStyle = node._documentStyle)) {
        docStyle.setVisibility(val);
      } else if (node.children) {
        ref = node.children;
        for (i = 0, len = ref.length; i < len; i++) {
          child = ref[i];
          if (child.visible) {
            setVisibleForNode(child, val);
          }
        }
      }
    };
    updateTextNode = function(node) {
      var docStyle;
      while (node) {
        if ((docStyle = node._documentStyle)) {
          if (docStyle.textProp) {
            docStyle.updateText();
          }
          break;
        }
        node = node.parent;
      }
    };
    return function(element, val) {
      setVisibleForNode(element, val);
      return updateTextNode(element);
    };
  })();

  exports.onSetText = function(element) {
    var ref;
    if ((ref = element._documentStyle) != null) {
      ref.updateText();
    }
  };

  exports.onSetProp = function(element, name, val, oldVal) {
    var docStyle;
    docStyle = element._documentStyle;
    if (!docStyle) {
      return;
    }
    return docStyle.setProp(name, val, oldVal);
  };

}).call(this);

},{}],"../../../node_modules/@neft/core/src/document/element/element/text.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  var SignalsEmitter, assert, styles, utils,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  utils = require('../../../util');

  assert = require('../../../assert');

  SignalsEmitter = require('../../../signal').SignalsEmitter;

  styles = require('../styles');

  assert = assert.scope('View.Element.Text');

  module.exports = function(Element) {
    var Text;
    return Text = (function(superClass) {
      var JSON_ARGS_LENGTH, JSON_CTOR_ID, JSON_TEXT, i, opts;

      extend(Text, superClass);

      Text.__name__ = 'Text';

      Text.__path__ = 'File.Element.Text';

      JSON_CTOR_ID = Text.JSON_CTOR_ID = Element.JSON_CTORS.push(Text) - 1;

      i = Element.JSON_ARGS_LENGTH;

      JSON_TEXT = i++;

      JSON_ARGS_LENGTH = Text.JSON_ARGS_LENGTH = i;

      Text._fromJSON = function(arr, obj) {
        if (obj == null) {
          obj = new Text;
        }
        Element._fromJSON(arr, obj);
        obj._text = arr[JSON_TEXT];
        return obj;
      };

      function Text() {
        Text.__super__.constructor.call(this);
        this._text = '';
        //<development>;
        if (this.constructor === Text) {
          Object.seal(this);
        }
        //</development>;
      }

      Text.prototype.clone = function(clone) {
        if (clone == null) {
          clone = new Text;
        }
        Text.__super__.clone.call(this, clone);
        clone._text = this._text;
        return clone;
      };

      opts = utils.CONFIGURABLE;

      utils.defineProperty(Text.prototype, 'text', opts, function() {
        return this._text;
      }, function(value) {
        var old;
        assert.isString(value);
        old = this._text;
        if (old === value) {
          return false;
        }
        this._text = value;
        this.emit('onTextChange', old);
        Element.Tag.query.checkWatchersDeeply(this);
        styles.onSetText(this);
        return true;
      });

      SignalsEmitter.createSignal(Text, 'onTextChange');

      Text.prototype.toJSON = function(arr) {
        if (!arr) {
          arr = new Array(JSON_ARGS_LENGTH);
          arr[0] = JSON_CTOR_ID;
        }
        Text.__super__.toJSON.call(this, arr);
        arr[JSON_TEXT] = this.text;
        return arr;
      };

      return Text;

    })(Element);
  };

}).call(this);

},{"../../../util":"../../../node_modules/@neft/core/src/util/index.litcoffee","../../../assert":"../../../node_modules/@neft/core/src/assert/index.litcoffee","../../../signal":"../../../node_modules/@neft/core/src/signal/index.js","../styles":"../../../node_modules/@neft/core/src/document/element/styles.coffee"}],"../../../node_modules/@neft/core/src/document/element/element/tag/stringify.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  var SINGLE_TAG, getInnerHTML, getOuterHTML, isPublicProp, isPublicTag;

  SINGLE_TAG = {
    __proto__: null,
    area: true,
    base: true,
    basefont: true,
    br: true,
    col: true,
    command: true,
    embed: true,
    frame: true,
    hr: true,
    img: true,
    input: true,
    isindex: true,
    keygen: true,
    link: true,
    meta: true,
    param: true,
    source: true,
    track: true,
    wbr: true
  };

  isPublicTag = function(name) {
    return name !== '' && name !== 'blank' && !/^(?:[A-Z]|n-)/.test(name);
  };

  isPublicProp = function(name) {
    return !/^(?:n-|style:)/.test(name);
  };

  getInnerHTML = function(elem) {
    var child, i, len, r, ref;
    if (elem.children) {
      r = '';
      ref = elem.children;
      for (i = 0, len = ref.length; i < len; i++) {
        child = ref[i];
        r += getOuterHTML(child);
      }
      return r;
    } else {
      return '';
    }
  };

  getOuterHTML = function(elem) {
    var innerHTML, name, propName, propValue, props, ret;
    if (elem._visible === false) {
      return '';
    }
    if (elem._text !== void 0) {
      return elem._text;
    }
    name = elem.name;
    if (!name || !isPublicTag(name)) {
      return getInnerHTML(elem);
    }
    ret = '<' + name;
    props = elem.props;
    for (propName in props) {
      propValue = props[propName];
      if (!props.hasOwnProperty(propName)) {
        continue;
      }
      if ((propValue == null) || typeof propValue === 'function' || !isPublicProp(propName)) {
        continue;
      }
      ret += ' ' + propName + '="' + propValue + '"';
    }
    innerHTML = getInnerHTML(elem);
    if (!innerHTML && SINGLE_TAG[name]) {
      return ret + ' />';
    } else {
      return ret + '>' + innerHTML + '</' + name + '>';
    }
  };

  module.exports = {
    getInnerHTML: getInnerHTML,
    getOuterHTML: getOuterHTML
  };

}).call(this);

},{}],"../../../node_modules/@neft/core/src/document/element/element/tag/props.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  var assert, styles, utils;

  utils = require('../../../../util');

  assert = require('../../../../assert');

  styles = require('../../styles');

  module.exports = function(Tag) {
    var Props;
    return Props = (function() {
      var NOT_ENUMERABLE;

      function Props(ref) {
        utils.defineProperty(this, '_ref', 0, ref);
      }

      NOT_ENUMERABLE = utils.CONFIGURABLE | utils.WRITABLE;

      utils.defineProperty(Props.prototype, 'constructor', NOT_ENUMERABLE, Props);

      utils.defineProperty(Props.prototype, 'item', NOT_ENUMERABLE, function(index, target) {
        var i, key, ref1, val;
        if (target == null) {
          target = [];
        }
        assert.isArray(target);
        target[0] = target[1] = void 0;
        i = 0;
        ref1 = this;
        for (key in ref1) {
          val = ref1[key];
          if (this.hasOwnProperty(key) && i === index) {
            target[0] = key;
            target[1] = val;
            break;
          }
          i++;
        }
        return target;
      });

      utils.defineProperty(Props.prototype, 'has', NOT_ENUMERABLE, function(name) {
        assert.isString(name);
        assert.notLengthOf(name, 0);
        return this.hasOwnProperty(name);
      });

      utils.defineProperty(Props.prototype, 'set', NOT_ENUMERABLE, function(name, value) {
        var old;
        assert.isString(name);
        assert.notLengthOf(name, 0);
        old = this[name];
        if (old === value) {
          return false;
        }
        this[name] = value;
        this._ref.emit('onPropsChange', name, old);
        Tag.query.checkWatchersDeeply(this._ref);
        styles.onSetProp(this._ref, name, value, old);
        return true;
      });

      return Props;

    })();
  };

}).call(this);

},{"../../../../util":"../../../node_modules/@neft/core/src/util/index.litcoffee","../../../../assert":"../../../node_modules/@neft/core/src/assert/index.litcoffee","../../styles":"../../../node_modules/@neft/core/src/document/element/styles.coffee"}],"../../../node_modules/@neft/core/src/document/element/element/tag/custom.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  var SignalsEmitter, util,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  util = require('../../../../util');

  SignalsEmitter = require('../../../../signal').SignalsEmitter;

  module.exports = function(Element, Tag) {
    var CustomTag;
    return CustomTag = (function(superClass) {
      var JSON_ARGS_LENGTH, JSON_CTOR_ID, JSON_FIELDS, customTags, i;

      extend(CustomTag, superClass);

      customTags = CustomTag.customTags = {};

      JSON_CTOR_ID = CustomTag.JSON_CTOR_ID = Element.JSON_CTORS.push(CustomTag) - 1;

      i = Tag.JSON_ARGS_LENGTH;

      JSON_FIELDS = i++;

      JSON_ARGS_LENGTH = CustomTag.JSON_ARGS_LENGTH = i;

      CustomTag._fromJSON = function(arr, obj) {
        var ctor, field, fields, val;
        fields = arr[JSON_FIELDS];
        if (!obj) {
          ctor = customTags[arr[Tag.JSON_NAME]];
          obj = new ctor;
        }
        Tag._fromJSON(arr, obj);
        for (field in fields) {
          val = fields[field];
          obj[field] = val;
        }
        return obj;
      };

      CustomTag.registerAs = function(tagName) {
        customTags[tagName] = this;
      };

      CustomTag.defineProperty = function(arg) {
        var defaultValue, field, getter, internalName, name, ref, setter, signalName;
        name = arg.name, defaultValue = (ref = arg.defaultValue) != null ? ref : null;
        if (this === CustomTag) {
          throw new Error('Cannot define a property on CustomTag; create new class');
        }
        internalName = "_" + name;
        signalName = "on" + (util.capitalize(name)) + "Change";
        if (this._fields == null) {
          this._fields = [];
        }
        if (this._fieldsByName == null) {
          this._fieldsByName = {};
        }
        field = {
          name: name,
          internalName: internalName,
          signalName: signalName,
          defaultValue: defaultValue
        };
        this._fields.push(field);
        this._fieldsByName[name] = field;
        SignalsEmitter.createSignal(this, signalName);
        getter = function() {
          return this[internalName];
        };
        setter = function(val) {
          var oldVal;
          oldVal = this[internalName];
          if (oldVal === val) {
            return;
          }
          this[internalName] = val;
          this.emit(signalName, oldVal);
        };
        util.defineProperty(this.prototype, name, util.CONFIGURABLE, getter, setter);
      };

      CustomTag.defineStyleProperty = function(arg) {
        var getter, internalStyleName, name, ref, setter, signalGetter, signalName, signalStyleName, styleName;
        name = arg.name, styleName = (ref = arg.styleName) != null ? ref : name;
        if (this === CustomTag) {
          throw new Error('Cannot define a property on CustomTag; create your own class');
        }
        internalStyleName = "_" + styleName;
        signalName = "on" + (util.capitalize(name)) + "Change";
        signalStyleName = "on" + (util.capitalize(styleName)) + "Change";
        if (this._styleAliases == null) {
          this._styleAliases = [];
        }
        if (this._styleAliasesByName == null) {
          this._styleAliasesByName = {};
        }
        this._styleAliases.push({
          name: name,
          signalName: signalName,
          styleName: styleName
        });
        this._styleAliasesByName[signalName] = {
          styleName: signalStyleName
        };
        this._styleAliasesByName[name] = {
          styleName: styleName
        };
        signalGetter = function() {
          var ref1;
          return (ref1 = this._style) != null ? ref1[signalStyleName] : void 0;
        };
        getter = function() {
          var ref1;
          return (ref1 = this._style) != null ? ref1[internalStyleName] : void 0;
        };
        setter = function(val) {
          var ref1;
          return (ref1 = this._style) != null ? ref1[styleName] = val : void 0;
        };
        util.defineProperty(this.prototype, signalName, util.CONFIGURABLE, signalGetter, null);
        util.defineProperty(this.prototype, name, util.CONFIGURABLE, getter, setter);
      };

      function CustomTag() {
        var field, fields, fieldsByName, j, len;
        CustomTag.__super__.constructor.call(this);
        fields = this.constructor._fields;
        fieldsByName = this.constructor._fieldsByName;
        if (fields) {
          for (j = 0, len = fields.length; j < len; j++) {
            field = fields[j];
            this[field.internalName] = field.defaultValue;
          }
        }
        Object.seal(this);
        if (fieldsByName) {
          this.onPropsChange.connect(function(name) {
            if (fieldsByName[name]) {
              return this[name] = this.props[name];
            }
          });
        }
      }

      CustomTag.prototype.clone = function(clone) {
        var field, fields, j, len;
        if (clone == null) {
          clone = new this.constructor;
        }
        CustomTag.__super__.clone.call(this, clone);
        fields = this.constructor._fields;
        if (fields) {
          for (j = 0, len = fields.length; j < len; j++) {
            field = fields[j];
            clone[field.internalName] = this[field.internalName];
          }
        }
        return clone;
      };

      CustomTag.prototype.toJSON = function(arr) {
        var field, fields, j, jsonFields, len;
        if (!arr) {
          arr = new Array(JSON_ARGS_LENGTH);
          arr[0] = JSON_CTOR_ID;
        }
        CustomTag.__super__.toJSON.call(this, arr);
        jsonFields = arr[JSON_FIELDS] = {};
        fields = this.constructor._fields;
        if (fields) {
          for (j = 0, len = fields.length; j < len; j++) {
            field = fields[j];
            jsonFields[field.internalName] = this[field.internalName];
          }
        }
        return arr;
      };

      return CustomTag;

    })(Tag);
  };

}).call(this);

},{"../../../../util":"../../../node_modules/@neft/core/src/util/index.litcoffee","../../../../signal":"../../../node_modules/@neft/core/src/signal/index.js"}],"../../../node_modules/@neft/core/src/document/element/element/tag.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  var SignalsEmitter, TypedArray, assert, stringify, utils,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  utils = require('../../../util');

  assert = require('../../../assert');

  SignalsEmitter = require('../../../signal').SignalsEmitter;

  TypedArray = require('../../../typed-array');

  stringify = require('./tag/stringify');

  assert = assert.scope('View.Element.Tag');

  module.exports = function(Element) {
    var Tag;
    return Tag = (function(superClass) {
      var JSON_ARGS_LENGTH, JSON_CHILDREN, JSON_CTOR_ID, JSON_NAME, JSON_PROPS, Props, i, query;

      extend(Tag, superClass);

      Tag.Props = Props = require('./tag/props')(Tag);

      Tag.__name__ = 'Tag';

      Tag.__path__ = 'File.Element.Tag';

      JSON_CTOR_ID = Tag.JSON_CTOR_ID = Element.JSON_CTORS.push(Tag) - 1;

      i = Element.JSON_ARGS_LENGTH;

      JSON_NAME = Tag.JSON_NAME = i++;

      JSON_CHILDREN = i++;

      JSON_PROPS = i++;

      JSON_ARGS_LENGTH = Tag.JSON_ARGS_LENGTH = i;

      Tag.CustomTag = require('./tag/custom')(Element, Tag);

      Tag._fromJSON = function(arr, obj) {
        var child, childObj, j, len, name, prevChild, ref;
        name = arr[JSON_NAME];
        if (!obj) {
          obj = new Tag;
        }
        Element._fromJSON(arr, obj);
        obj.name = name;
        utils.merge(obj.props, arr[JSON_PROPS]);
        prevChild = null;
        ref = arr[JSON_CHILDREN];
        for (j = 0, len = ref.length; j < len; j++) {
          child = ref[j];
          childObj = Element.fromJSON(child);
          obj.children.push(childObj);
          childObj._parent = obj;
          if (childObj._previousSibling = prevChild) {
            prevChild._nextSibling = childObj;
          }
          prevChild = childObj;
        }
        return obj;
      };

      function Tag() {
        Tag.__super__.constructor.call(this);
        this.name = 'blank';
        this.children = [];
        this.props = new Props(this);
        //<development>;
        if (this.constructor === Tag) {
          Object.seal(this);
        }
        //</development>;
      }

      SignalsEmitter.createSignal(Tag, 'onChildrenChange');

      SignalsEmitter.createSignal(Tag, 'onPropsChange');

      Tag.prototype.clone = function(clone) {
        if (clone == null) {
          clone = new this.constructor;
        }
        Tag.__super__.clone.call(this, clone);
        clone.name = this.name;
        utils.merge(clone.props, this.props);
        return clone;
      };

      Tag.prototype.cloneDeep = function() {
        var child, clone, clonedChild, j, len, prevClonedChild, ref;
        clone = this.clone();
        prevClonedChild = null;
        ref = this.children;
        for (j = 0, len = ref.length; j < len; j++) {
          child = ref[j];
          if (child instanceof Tag) {
            clonedChild = child.cloneDeep();
          } else {
            clonedChild = child.clone();
          }
          clone.children.push(clonedChild);
          clonedChild._parent = clone;
          if (clonedChild._previousSibling = prevClonedChild) {
            prevClonedChild._nextSibling = clonedChild;
          }
          prevClonedChild = clonedChild;
        }
        return clone;
      };

      Tag.prototype.getCopiedElement = (function() {
        var arr;
        arr = new TypedArray.Uint16(256);
        return function(lookForElement, copiedParent) {
          var elem, index, parent;
          assert.instanceOf(this, Tag);
          assert.instanceOf(lookForElement, Element);
          assert.instanceOf(copiedParent, Element);
          if (lookForElement === this) {
            return copiedParent;
          }
          i = 0;
          elem = lookForElement;
          while (parent = elem._parent) {
            arr[i++] = parent.children.indexOf(elem);
            elem = parent;
            if (elem === this) {
              break;
            }
          }
          elem = copiedParent;
          while (i-- > 0) {
            index = arr[i];
            elem = elem.children[index];
          }
          return elem;
        };
      })();

      Tag.prototype.getChildByAccessPath = function(arr) {
        var elem, j;
        assert.isArray(arr);
        elem = this;
        for (j = arr.length - 1; j >= 0; j += -1) {
          i = arr[j];
          if (!(elem = elem.children[i])) {
            return null;
          }
        }
        return elem;
      };

      Tag.query = query = require('./tag/query')(Element, Tag);

      Tag.prototype.queryAll = query.queryAll;

      Tag.prototype.query = query.query;

      Tag.prototype.watch = query.watch;

      Tag.prototype.stringify = function() {
        return stringify.getOuterHTML(this);
      };

      Tag.prototype.stringifyChildren = function() {
        return stringify.getInnerHTML(this);
      };

      Tag.prototype.replace = function(oldElement, newElement) {
        var index;
        assert.instanceOf(oldElement, Element);
        assert.instanceOf(newElement, Element);
        assert.is(oldElement.parent, this);
        index = this.children.indexOf(oldElement);
        oldElement.parent = void 0;
        newElement.parent = this;
        newElement.index = index;
        return null;
      };

      Tag.prototype.toJSON = function(arr) {
        var child, children, j, len, ref;
        if (!arr) {
          arr = new Array(JSON_ARGS_LENGTH);
          arr[0] = JSON_CTOR_ID;
        }
        Tag.__super__.toJSON.call(this, arr);
        arr[JSON_NAME] = this.name;
        children = arr[JSON_CHILDREN] = [];
        arr[JSON_PROPS] = this.props;
        ref = this.children;
        for (j = 0, len = ref.length; j < len; j++) {
          child = ref[j];
          children.push(child.toJSON());
        }
        return arr;
      };

      return Tag;

    })(Element);
  };

}).call(this);

},{"../../../util":"../../../node_modules/@neft/core/src/util/index.litcoffee","../../../assert":"../../../node_modules/@neft/core/src/assert/index.litcoffee","../../../signal":"../../../node_modules/@neft/core/src/signal/index.js","../../../typed-array":"../../../node_modules/@neft/core/src/typed-array/index.litcoffee","./tag/stringify":"../../../node_modules/@neft/core/src/document/element/element/tag/stringify.coffee","./tag/props":"../../../node_modules/@neft/core/src/document/element/element/tag/props.coffee","./tag/custom":"../../../node_modules/@neft/core/src/document/element/element/tag/custom.coffee","./tag/query":"../../../node_modules/@neft/core/src/document/element/element/tag/query.coffee"}],"../../../node_modules/@neft/core/src/document/element/index.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  var Element, SignalsEmitter, assert, isArray, styles, utils,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  utils = require('../../util');

  assert = require('../../assert');

  SignalsEmitter = require('../../signal').SignalsEmitter;

  styles = require('./styles');

  isArray = Array.isArray;

  assert = assert.scope('View.Element');

  Element = (function(superClass) {
    var JSON_ARGS_LENGTH, JSON_CTOR_ID, JSON_VISIBLE, Tag, i, opts;

    extend(Element, superClass);

    Element.__name__ = 'Element';

    Element.__path__ = 'File.Element';

    Element.JSON_CTORS = [];

    JSON_CTOR_ID = Element.JSON_CTOR_ID = Element.JSON_CTORS.push(Element) - 1;

    i = 1;

    JSON_VISIBLE = i++;

    JSON_ARGS_LENGTH = Element.JSON_ARGS_LENGTH = i;

    Element.fromJSON = function(json) {
      if (typeof json === 'string') {
        json = JSON.parse(json);
      }
      assert.isArray(json);
      return Element.JSON_CTORS[json[0]]._fromJSON(json);
    };

    Element._fromJSON = function(arr, obj) {
      if (obj == null) {
        obj = new Element;
      }
      obj._visible = arr[JSON_VISIBLE] === 1;
      return obj;
    };

    Element.Text = require('./element/text')(Element);

    Element.Tag = Tag = require('./element/tag')(Element);

    function Element() {
      Element.__super__.constructor.call(this);
      this._parent = null;
      this._nextSibling = null;
      this._previousSibling = null;
      this._style = null;
      this._documentStyle = null;
      this._visible = true;
      this._watchers = null;
      this._inWatchers = null;
      this._checkWatchers = 0;
      //<development>;
      if (this.constructor === Element) {
        Object.seal(this);
      }
      //</development>;
    }

    opts = utils.CONFIGURABLE;

    utils.defineProperty(Element.prototype, 'index', opts, function() {
      var ref;
      return ((ref = this.parent) != null ? ref.children.indexOf(this) : void 0) || 0;
    }, function(val) {
      var children, index, parent, ref, ref1, ref2, ref3;
      assert.instanceOf(this.parent, Element);
      assert.isInteger(val);
      assert.operator(val, '>=', 0);
      parent = this._parent;
      if (!parent) {
        return false;
      }
      index = this.index;
      children = parent.children;
      if (val > children.length) {
        val = children.length;
      }
      if (index === val || index === val - 1) {
        return false;
      }
      if ((ref = this._previousSibling) != null) {
        ref._nextSibling = this._nextSibling;
      }
      if ((ref1 = this._nextSibling) != null) {
        ref1._previousSibling = this._previousSibling;
      }
      children.splice(index, 1);
      if (val > index) {
        val--;
      }
      children.splice(val, 0, this);
      this._previousSibling = children[val - 1] || null;
      this._nextSibling = children[val + 1] || null;
      if ((ref2 = this._previousSibling) != null) {
        ref2._nextSibling = this;
      }
      if ((ref3 = this._nextSibling) != null) {
        ref3._previousSibling = this;
      }
      assert.is(this.index, val);
      assert.is(children[val], this);
      assert.is(this._previousSibling, children[val - 1] || null);
      assert.is(this._nextSibling, children[val + 1] || null);
      styles.onSetIndex(this);
      return true;
    });

    opts = utils.CONFIGURABLE;

    utils.defineProperty(Element.prototype, 'nextSibling', opts, function() {
      return this._nextSibling;
    }, null);

    opts = utils.CONFIGURABLE;

    utils.defineProperty(Element.prototype, 'previousSibling', opts, function() {
      return this._previousSibling;
    }, null);

    opts = utils.CONFIGURABLE;

    utils.defineProperty(Element.prototype, 'parent', opts, function() {
      return this._parent;
    }, function(val) {
      var index, newChildren, old, oldChildren, parent, ref, ref1;
      assert.instanceOf(this, Element);
      if (val != null) {
        assert.instanceOf(val, Element);
      }
      assert.isNot(this, val);
      old = this._parent;
      if (old === val) {
        return false;
      }
      if (this._parent) {
        oldChildren = this._parent.children;
        assert.ok(utils.has(oldChildren, this));
        if (!this._nextSibling) {
          assert.ok(oldChildren[oldChildren.length - 1] === this);
          oldChildren.pop();
        } else if (!this._previousSibling) {
          assert.ok(oldChildren[0] === this);
          oldChildren.shift();
        } else {
          index = oldChildren.indexOf(this);
          oldChildren.splice(index, 1);
        }
        this._parent.emit('onChildrenChange', null, this);
        if ((ref = this._previousSibling) != null) {
          ref._nextSibling = this._nextSibling;
        }
        if ((ref1 = this._nextSibling) != null) {
          ref1._previousSibling = this._previousSibling;
        }
        this._previousSibling = null;
        this._nextSibling = null;
      }
      this._parent = parent = val;
      if (parent) {
        assert.notOk(utils.has(this._parent.children, this));
        newChildren = this._parent.children;
        index = newChildren.push(this) - 1;
        parent.emit('onChildrenChange', this);
        if (index === 0) {
          this._previousSibling = null;
        } else {
          this._previousSibling = newChildren[index - 1];
          this._previousSibling._nextSibling = this;
        }
      }
      assert.is(this._parent, val);
      assert.is(this._nextSibling, null);
      assert.is(this._previousSibling, (val != null ? val.children[val.children.length - 2] : void 0) || null);
      if (this._previousSibling) {
        assert.is(this._previousSibling._nextSibling, this);
      }
      this.emit('onParentChange', old);
      Tag.query.checkWatchersDeeply(this, old);
      Tag.query.checkWatchersDeeply(this);
      styles.onSetParent(this, val);
      return true;
    });

    SignalsEmitter.createSignal(Element, 'onParentChange');

    opts = utils.CONFIGURABLE;

    utils.defineProperty(Element.prototype, 'style', opts, function() {
      return this._style;
    }, function(val) {
      var old;
      old = this._style;
      if (old === val) {
        return false;
      }
      this._style = val;
      this.emit('onStyleChange', old, val);
      return true;
    });

    SignalsEmitter.createSignal(Element, 'onStyleChange');

    opts = utils.CONFIGURABLE;

    utils.defineProperty(Element.prototype, 'visible', opts, function() {
      return this._visible;
    }, function(val) {
      var old;
      assert.isBoolean(val);
      old = this._visible;
      if (old === val) {
        return false;
      }
      this._visible = val;
      this.emit('onVisibleChange', old);
      styles.onSetVisible(this, val);
      return true;
    });

    SignalsEmitter.createSignal(Element, 'onVisibleChange');

    Element.prototype.queryAllParents = Tag.query.queryAllParents;

    Element.prototype.queryParents = Tag.query.queryParents;

    Element.prototype.getAccessPath = function(toParent) {
      var arr, elem, parent;
      if (toParent != null) {
        assert.instanceOf(toParent, Tag);
      }
      arr = [];
      i = 0;
      elem = this;
      parent = this;
      while (parent = elem._parent) {
        arr.push(parent.children.indexOf(elem));
        elem = parent;
        if (parent === toParent) {
          break;
        }
      }
      return arr;
    };

    Element.prototype.clone = function(clone) {
      if (clone == null) {
        clone = new Element;
      }
      clone._visible = this._visible;
      return clone;
    };

    Element.prototype.toJSON = function(arr) {
      if (!arr) {
        arr = new Array(JSON_ARGS_LENGTH);
        arr[0] = JSON_CTOR_ID;
      }
      arr[JSON_VISIBLE] = this.visible ? 1 : 0;
      return arr;
    };

    return Element;

  })(SignalsEmitter);

  module.exports = Element;

}).call(this);

},{"../../util":"../../../node_modules/@neft/core/src/util/index.litcoffee","../../assert":"../../../node_modules/@neft/core/src/assert/index.litcoffee","../../signal":"../../../node_modules/@neft/core/src/signal/index.js","./styles":"../../../node_modules/@neft/core/src/document/element/styles.coffee","./element/text":"../../../node_modules/@neft/core/src/document/element/element/text.coffee","./element/tag":"../../../node_modules/@neft/core/src/document/element/element/tag.coffee"}],"../../../node_modules/@neft/core/src/renderer/types/basics/item/spacing.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  var assert, utils,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  assert = require('../../../../assert');

  utils = require('../../../../util');

  module.exports = function(Renderer, Impl, itemUtils) {
    return function(ctor) {
      var Spacing;
      return Spacing = (function(superClass) {
        extend(Spacing, superClass);

        Spacing.__name__ = 'Spacing';

        itemUtils.defineProperty({
          constructor: ctor,
          name: 'spacing',
          defaultValue: 0,
          valueConstructor: Spacing,
          setter: function(_super) {
            return function(val) {
              var spacing;
              spacing = this.spacing;
              if (utils.isObject(val)) {
                if (val.column != null) {
                  spacing.column = val.column;
                }
                if (val.row != null) {
                  spacing.row = val.row;
                }
              } else {
                spacing.column = spacing.row = val;
              }
              _super.call(this, val);
            };
          }
        });

        function Spacing(ref) {
          Spacing.__super__.constructor.call(this, ref);
          this._column = 0;
          this._row = 0;
          Object.preventExtensions(this);
        }

        itemUtils.defineProperty({
          constructor: Spacing,
          name: 'column',
          defaultValue: 0,
          namespace: 'spacing',
          parentConstructor: ctor,
          implementation: Impl["set" + ctor.name + "ColumnSpacing"],
          developmentSetter: function(val) {
            return assert.isFloat(val);
          }
        });

        itemUtils.defineProperty({
          constructor: Spacing,
          name: 'row',
          defaultValue: 0,
          namespace: 'spacing',
          parentConstructor: ctor,
          implementation: Impl["set" + ctor.name + "RowSpacing"],
          developmentSetter: function(val) {
            return assert.isFloat(val);
          }
        });

        Spacing.prototype.valueOf = function() {
          if (this.column === this.row) {
            return this.column;
          } else {
            throw new Error("column and row spacing are different");
          }
        };

        Spacing.prototype.toJSON = function() {
          return {
            column: this.column,
            row: this.row
          };
        };

        return Spacing;

      })(itemUtils.DeepObject);
    };
  };

}).call(this);

},{"../../../../assert":"../../../node_modules/@neft/core/src/assert/index.litcoffee","../../../../util":"../../../node_modules/@neft/core/src/util/index.litcoffee"}],"../../../node_modules/@neft/core/src/renderer/types/basics/item/alignment.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  var assert, utils,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  assert = require('../../../../assert');

  utils = require('../../../../util');

  module.exports = function(Renderer, Impl, itemUtils) {
    return function(ctor) {
      var Alignment;
      return Alignment = (function(superClass) {
        extend(Alignment, superClass);

        Alignment.__name__ = 'Alignment';

        itemUtils.defineProperty({
          constructor: ctor,
          name: 'alignment',
          defaultValue: null,
          valueConstructor: Alignment,
          setter: function() {
            return null;
          }
        });

        function Alignment(ref) {
          Alignment.__super__.constructor.call(this, ref);
          this._horizontal = 'left';
          this._vertical = 'top';
          Object.preventExtensions(this);
        }

        itemUtils.defineProperty({
          constructor: Alignment,
          name: 'horizontal',
          defaultValue: 'left',
          namespace: 'alignment',
          parentConstructor: ctor,
          implementation: Impl["set" + ctor.name + "AlignmentHorizontal"],
          developmentSetter: function(val) {
            return assert.isString(val);
          },
          setter: function(_super) {
            return function(val) {
              if (val == null) {
                val = 'left';
              }
              return _super.call(this, val);
            };
          }
        });

        itemUtils.defineProperty({
          constructor: Alignment,
          name: 'vertical',
          defaultValue: 'top',
          namespace: 'alignment',
          parentConstructor: ctor,
          implementation: Impl["set" + ctor.name + "AlignmentVertical"],
          developmentSetter: function(val) {
            return assert.isString(val);
          },
          setter: function(_super) {
            return function(val) {
              if (val == null) {
                val = 'top';
              }
              return _super.call(this, val);
            };
          }
        });

        Alignment.prototype.toJSON = function() {
          return {
            horizontal: this.horizontal,
            vertical: this.vertical
          };
        };

        return Alignment;

      })(itemUtils.DeepObject);
    };
  };

}).call(this);

},{"../../../../assert":"../../../node_modules/@neft/core/src/assert/index.litcoffee","../../../../util":"../../../node_modules/@neft/core/src/util/index.litcoffee"}],"../../../node_modules/@neft/core/src/renderer/types/basics/item/anchors.litcoffee":[function(require,module,exports) {
(function() {
  'use strict';
  var FREE_H_LINE_REQ, FREE_V_LINE_REQ, H_LINE, H_LINES, H_LINE_REQ, LINE_REQ, ONLY_TARGET_ALLOW, V_LINE, V_LINES, V_LINE_REQ, assert, log, utils,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  utils = require('../../../../util');

  log = require('../../../../log');

  assert = require('../../../../assert');

  log = log.scope('Renderer');

  H_LINE = 1 << 0;

  V_LINE = 1 << 1;

  LINE_REQ = 1 << 0;

  ONLY_TARGET_ALLOW = 1 << 1;

  H_LINE_REQ = 1 << 2;

  V_LINE_REQ = 1 << 3;

  FREE_H_LINE_REQ = 1 << 4;

  FREE_V_LINE_REQ = 1 << 5;

  H_LINES = {
    top: true,
    bottom: true,
    verticalCenter: true
  };

  V_LINES = {
    left: true,
    right: true,
    horizontalCenter: true
  };

  module.exports = function(Renderer, Impl, itemUtils, Item) {
    return function(ctor) {
      var Anchors;
      return Anchors = (function(superClass) {
        var createAnchorProp, implMethod, stringValuesCache;

        extend(Anchors, superClass);

        Anchors.__name__ = 'Anchors';

        itemUtils.defineProperty({
          constructor: ctor,
          name: 'anchors',
          valueConstructor: Anchors,
          developmentSetter: function(val) {
            return assert.isObject(val);
          },
          setter: function(_super) {
            return function(val) {
              var anchors;
              anchors = this.anchors;
              if (val.left != null) {
                anchors.left = val.left;
              }
              if (val.right != null) {
                anchors.right = val.right;
              }
              if (val.horizontalCenter != null) {
                anchors.horizontalCenter = val.horizontalCenter;
              }
              if (val.top != null) {
                anchors.top = val.top;
              }
              if (val.bottom != null) {
                anchors.bottom = val.bottom;
              }
              if (val.verticalCenter != null) {
                anchors.verticalCenter = val.verticalCenter;
              }
              if (val.centerIn != null) {
                anchors.centerIn = val.centerIn;
              }
              if (val.fill != null) {
                anchors.fill = val.fill;
              }
              if (val.fillWidth != null) {
                anchors.fillWidth = val.fillWidth;
              }
              if (val.fillHeight != null) {
                anchors.fillHeight = val.fillHeight;
              }
              _super.call(this, val);
            };
          }
        });

        function Anchors(ref) {
          Anchors.__super__.constructor.call(this, ref);
          this._runningCount = 0;
          this._top = null;
          this._bottom = null;
          this._verticalCenter = null;
          this._left = null;
          this._right = null;
          this._horizontalCenter = null;
          this._centerIn = null;
          this._fill = null;
          this._fillWidth = null;
          this._fillHeight = null;
          Object.preventExtensions(this);
        }

        implMethod = Impl["set" + ctor.name + "Anchor"];

        stringValuesCache = Object.create(null);

        createAnchorProp = function(type, opts, getter) {
          var internalProp, setter;
          if (opts == null) {
            opts = 0;
          }
          internalProp = "_" + type;
          setter = function(_super) {
            return function(val) {
              var allowedLines, arr, line, oldVal, target;
              if (val == null) {
                val = null;
              }
              oldVal = this[internalProp];
              if (typeof val === 'string') {
                if (!(arr = stringValuesCache[val])) {
                  arr = stringValuesCache[val] = val.split('.');
                }
                val = arr;
              }
              if (val != null) {
                //<development>;
                allowedLines = H_LINES[type] ? H_LINES : V_LINES;
                if (!(Array.isArray(val) && val.length > 0 && val.length < 3)) {
                  log.error("`anchors." + type + "` expects an array; `'" + val + "'` given");
                }
                target = val[0], line = val[1];
                if (opts & ONLY_TARGET_ALLOW) {
                  if (line !== void 0) {
                    log.error(("`anchors." + type + "` expects only a target to be defined; ") + ("`'" + val + "'` given;\npointing to the line is not required ") + "(e.g `anchors.centerIn = parent`)");
                  }
                }
                if (opts & LINE_REQ) {
                  if (!(H_LINES[line] || V_LINES[line])) {
                    log.error(("`anchors." + type + "` expects an anchor line to be defined; ") + ("`'" + val + "'` given;\nuse one of the `" + (Object.keys(allowedLines)) + "`"));
                  }
                }
                if (opts & H_LINE_REQ) {
                  if (!H_LINES[line]) {
                    log.error(("`anchors." + type + "` can't be anchored to the vertical edge; ") + ("`'" + val + "'` given;\nuse one of the `" + (Object.keys(H_LINES)) + "`"));
                  }
                }
                if (opts & V_LINE_REQ) {
                  if (!V_LINES[line]) {
                    log.error(("`anchors." + type + "` can't be anchored to the horizontal edge; ") + ("`'" + val + "'` given;\nuse one of the `" + (Object.keys(V_LINES)) + "`"));
                  }
                }
                //</development>;
                if (val[0] === 'this') {
                  val[0] = this;
                }
              }
              if (!!oldVal !== !!val) {
                this._runningCount += val ? 1 : -1;
              }
              return _super.call(this, val);
            };
          };
          return itemUtils.defineProperty({
            constructor: Anchors,
            name: type,
            defaultValue: null,
            implementation: function(val) {
              return implMethod.call(this, type, val);
            },
            namespace: 'anchors',
            parentConstructor: ctor,
            setter: setter,
            getter: function() {
              return getter;
            }
          });
        };

        createAnchorProp('left', LINE_REQ | V_LINE_REQ | FREE_V_LINE_REQ, function() {
          var ref1;
          if (this._ref) {
            return this._ref.x - (((ref1 = this._ref._margin) != null ? ref1._left : void 0) || 0);
          }
        });

        createAnchorProp('right', LINE_REQ | V_LINE_REQ | FREE_V_LINE_REQ, function() {
          var ref1;
          if (this._ref) {
            return this._ref._x + this._ref._width + (((ref1 = this._ref._margin) != null ? ref1._right : void 0) || 0);
          }
        });

        createAnchorProp('horizontalCenter', LINE_REQ | V_LINE_REQ | FREE_V_LINE_REQ, function() {
          if (this._ref) {
            return this._ref._x + this._ref._width / 2;
          }
        });

        createAnchorProp('top', LINE_REQ | H_LINE_REQ | FREE_H_LINE_REQ, function() {
          var ref1;
          if (this._ref) {
            return this._ref._y - (((ref1 = this._ref._margin) != null ? ref1._top : void 0) || 0);
          }
        });

        createAnchorProp('bottom', LINE_REQ | H_LINE_REQ | FREE_H_LINE_REQ, function() {
          var ref1;
          if (this._ref) {
            return this._ref._y + this._ref._height + (((ref1 = this._ref._margin) != null ? ref1._bottom : void 0) || 0);
          }
        });

        createAnchorProp('verticalCenter', LINE_REQ | H_LINE_REQ | FREE_H_LINE_REQ, function() {
          if (this._ref) {
            return this._ref._y + this._ref._height / 2;
          }
        });

        createAnchorProp('centerIn', ONLY_TARGET_ALLOW | FREE_H_LINE_REQ | FREE_V_LINE_REQ, function() {
          if (this._ref) {
            return [this.horizontalCenter, this.verticalCenter];
          }
        });

        createAnchorProp('fill', ONLY_TARGET_ALLOW, function() {
          if (this._ref) {
            return [this._ref._x, this._ref._y, this._ref._width, this._ref._height];
          }
        });

        createAnchorProp('fillWidth', ONLY_TARGET_ALLOW, function() {
          if (this._ref) {
            return [this._ref._x, this._ref._width];
          }
        });

        createAnchorProp('fillHeight', ONLY_TARGET_ALLOW, function() {
          if (this._ref) {
            return [this._ref._y, this._ref._height];
          }
        });

        return Anchors;

      })(itemUtils.DeepObject);
    };
  };

}).call(this);

},{"../../../../util":"../../../node_modules/@neft/core/src/util/index.litcoffee","../../../../log":"../../../node_modules/@neft/core/src/log/index.litcoffee","../../../../assert":"../../../node_modules/@neft/core/src/assert/index.litcoffee"}],"../../../node_modules/@neft/core/src/renderer/types/basics/item/margin.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  var SignalsEmitter, assert, utils,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  utils = require('../../../../util');

  SignalsEmitter = require('../../../../signal').SignalsEmitter;

  assert = require('../../../../assert');

  module.exports = function(Renderer, Impl, itemUtils, Item) {
    return function(ctor, opts) {
      var Margin;
      return Margin = (function(superClass) {
        var createMarginProp, propertyName;

        extend(Margin, superClass);

        Margin.__name__ = 'Margin';

        propertyName = (opts != null ? opts.propertyName : void 0) || 'margin';

        itemUtils.defineProperty({
          constructor: ctor,
          name: propertyName,
          defaultValue: 0,
          valueConstructor: Margin,
          setter: function() {
            return null;
          }
        });

        function Margin(ref) {
          Margin.__super__.constructor.call(this, ref);
          this._left = 0;
          this._top = 0;
          this._right = 0;
          this._bottom = 0;
          Object.preventExtensions(this);
        }

        createMarginProp = function(type) {
          var setter;
          setter = function(_super) {
            return function(val) {
              return _super.call(this, Number(val) || 0);
            };
          };
          return itemUtils.defineProperty({
            constructor: Margin,
            name: type,
            defaultValue: 0,
            namespace: propertyName,
            parentConstructor: ctor,
            setter: setter
          });
        };

        createMarginProp('left');

        createMarginProp('top');

        createMarginProp('right');

        createMarginProp('bottom');

        Margin.prototype.valueOf = function() {
          if (this.left === this.top && this.top === this.right && this.right === this.bottom) {
            return this.left;
          } else {
            throw new Error("margin values are different");
          }
        };

        Margin.prototype.toJSON = function() {
          return {
            left: this.left,
            top: this.top,
            right: this.right,
            bottom: this.bottom
          };
        };

        return Margin;

      })(itemUtils.DeepObject);
    };
  };

}).call(this);

},{"../../../../util":"../../../node_modules/@neft/core/src/util/index.litcoffee","../../../../signal":"../../../node_modules/@neft/core/src/signal/index.js","../../../../assert":"../../../node_modules/@neft/core/src/assert/index.litcoffee"}],"../../../node_modules/@neft/core/src/renderer/types/basics/item/pointer.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  var NOP, SignalsEmitter, assert, utils,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  utils = require('../../../../util');

  SignalsEmitter = require('../../../../signal').SignalsEmitter;

  assert = require('../../../../assert');

  NOP = function() {};

  module.exports = function(Renderer, Impl, itemUtils, Item) {
    return function(ctor) {
      var Pointer;
      return Pointer = (function(superClass) {
        var MOVE_SIGNALS, PRESS_SIGNALS, PointerEvent, i, initializeHover, initializePressed, len, onLazySignalInitialized, ref1, signalName;

        extend(Pointer, superClass);

        Pointer.__name__ = 'Pointer';

        itemUtils.defineProperty({
          constructor: ctor,
          name: 'pointer',
          valueConstructor: Pointer
        });

        function Pointer(ref) {
          Pointer.__super__.constructor.call(this, ref);
          this._enabled = true;
          this._draggable = false;
          this._dragActive = false;
          this._pressed = false;
          this._hover = false;
          this._pressedInitialized = false;
          this._hoverInitialized = false;
          Object.preventExtensions(this);
        }

        itemUtils.defineProperty({
          constructor: Pointer,
          name: 'enabled',
          defaultValue: true,
          namespace: 'pointer',
          parentConstructor: ctor,
          implementation: Impl.setItemPointerEnabled,
          developmentSetter: function(val) {
            return assert.isBoolean(val);
          }
        });

        PRESS_SIGNALS = {
          onClick: true,
          onPress: true,
          onRelease: true
        };

        MOVE_SIGNALS = {
          onEnter: true,
          onExit: true,
          onMove: true
        };

        onLazySignalInitialized = function(pointer, name) {
          if (PRESS_SIGNALS[name] || MOVE_SIGNALS[name]) {
            initializePressed(pointer);
            if (MOVE_SIGNALS[name]) {
              initializeHover(pointer);
            }
          }
          Impl.attachItemSignal.call(pointer, 'pointer', name);
        };

        Pointer.SIGNALS = Object.keys(PRESS_SIGNALS).concat(Object.keys(MOVE_SIGNALS)).concat(['onWheel']);

        ref1 = Pointer.SIGNALS;
        for (i = 0, len = ref1.length; i < len; i++) {
          signalName = ref1[i];
          SignalsEmitter.createSignal(Pointer, signalName, onLazySignalInitialized);
        }

        initializePressed = (function() {
          var onPress, onRelease;
          onPress = function(event) {
            event.stopPropagation = false;
            return this.pressed = true;
          };
          onRelease = function() {
            return this.pressed = false;
          };
          return function(pointer) {
            if (!pointer._pressedInitialized) {
              pointer._pressedInitialized = true;
              pointer.onPress.connect(onPress);
              pointer.onRelease.connect(onRelease);
            }
          };
        })();

        itemUtils.defineProperty({
          constructor: Pointer,
          name: 'pressed',
          defaultValue: false,
          namespace: 'pointer',
          parentConstructor: ctor,
          signalInitializer: initializePressed,
          getter: function(_super) {
            return function() {
              initializePressed(this);
              return _super.call(this);
            };
          }
        });

        initializeHover = (function() {
          var onEnter, onExit;
          onEnter = function() {
            return this.hover = true;
          };
          onExit = function() {
            return this.hover = false;
          };
          return function(pointer) {
            if (!pointer._hoverInitialized) {
              pointer._hoverInitialized = true;
              pointer.onEnter.connect(onEnter);
              pointer.onExit.connect(onExit);
            }
          };
        })();

        itemUtils.defineProperty({
          constructor: Pointer,
          name: 'hover',
          defaultValue: false,
          namespace: 'pointer',
          parentConstructor: ctor,
          signalInitializer: initializeHover,
          getter: function(_super) {
            return function() {
              initializeHover(this);
              return _super.call(this);
            };
          }
        });

        Pointer.Event = PointerEvent = (function() {
          function PointerEvent() {
            this._itemX = 0;
            this._itemY = 0;
            this._stopPropagation = true;
            this._checkSiblings = false;
            this._ensureRelease = true;
            this._ensureMove = true;
            this._preventClick = false;
            Object.preventExtensions(this);
          }

          PointerEvent.prototype = Object.create(Renderer.Device.pointer);

          PointerEvent.prototype.constructor = PointerEvent;

          utils.defineProperty(PointerEvent.prototype, 'itemX', null, (function() {
            return this._itemX;
          }), null);

          utils.defineProperty(PointerEvent.prototype, 'itemY', null, (function() {
            return this._itemY;
          }), null);

          utils.defineProperty(PointerEvent.prototype, 'stopPropagation', null, function() {
            return this._stopPropagation;
          }, function(val) {
            assert.isBoolean(val);
            return this._stopPropagation = val;
          });

          utils.defineProperty(PointerEvent.prototype, 'checkSiblings', null, function() {
            return this._checkSiblings;
          }, function(val) {
            assert.isBoolean(val);
            return this._checkSiblings = val;
          });

          utils.defineProperty(PointerEvent.prototype, 'ensureRelease', null, function() {
            return this._ensureRelease;
          }, function(val) {
            assert.isBoolean(val);
            return this._ensureRelease = val;
          });

          utils.defineProperty(PointerEvent.prototype, 'ensureMove', null, function() {
            return this._ensureMove;
          }, function(val) {
            assert.isBoolean(val);
            return this._ensureMove = val;
          });

          utils.defineProperty(PointerEvent.prototype, 'preventClick', null, function() {
            return this._preventClick;
          }, function(val) {
            assert.isBoolean(val);
            return this._preventClick = val;
          });

          return PointerEvent;

        })();

        Pointer.event = new PointerEvent;

        return Pointer;

      })(itemUtils.DeepObject);
    };
  };

}).call(this);

},{"../../../../util":"../../../node_modules/@neft/core/src/util/index.litcoffee","../../../../signal":"../../../node_modules/@neft/core/src/signal/index.js","../../../../assert":"../../../node_modules/@neft/core/src/assert/index.litcoffee"}],"../../../node_modules/@neft/core/src/renderer/types/basics/item/keys.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  var SignalsEmitter, assert, utils,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  utils = require('../../../../util');

  SignalsEmitter = require('../../../../signal').SignalsEmitter;

  assert = require('../../../../assert');

  module.exports = function(Renderer, Impl, itemUtils, Item) {
    return function(ctor) {
      var Keys;
      return Keys = (function(superClass) {
        var Device, KeysEvent, focusedKeys, i, keysEvent, len, ref1, signalName;

        extend(Keys, superClass);

        Keys.__name__ = 'Keys';

        Device = Renderer.Device;

        itemUtils.defineProperty({
          constructor: ctor,
          name: 'keys',
          valueConstructor: Keys
        });

        Keys.focusedItem = null;

        Keys.Event = KeysEvent = (function() {
          function KeysEvent() {
            Object.preventExtensions(this);
          }

          KeysEvent.prototype = Object.create(Device.keyboard);

          KeysEvent.prototype.constructor = KeysEvent;

          return KeysEvent;

        })();

        function Keys(ref) {
          Keys.__super__.constructor.call(this, ref);
          this._focus = false;
          Object.preventExtensions(this);
        }

        Keys.SIGNALS = ['onPress', 'onHold', 'onRelease', 'onInput'];

        ref1 = Keys.SIGNALS;
        for (i = 0, len = ref1.length; i < len; i++) {
          signalName = ref1[i];
          SignalsEmitter.createSignal(Keys, signalName);
        }

        focusedKeys = null;

        itemUtils.defineProperty({
          constructor: Keys,
          name: 'focus',
          defaultValue: false,
          implementation: Impl.setItemKeysFocus,
          namespace: 'keys',
          parentConstructor: ctor,
          developmentSetter: function(val) {
            return assert.isBoolean(val);
          },
          setter: function(_super) {
            return function(val) {
              if (this._focus !== val) {
                if (val && focusedKeys !== this) {
                  if (focusedKeys != null) {
                    focusedKeys.focus = false;
                  }
                  focusedKeys = this;
                  Keys.focusedItem = this._ref;
                }
                _super.call(this, val);
                if (!val && focusedKeys === this) {
                  focusedKeys = null;
                  Keys.focusedItem = null;
                }
              }
            };
          }
        });

        Device.onKeyPress.connect(function(event) {
          return focusedKeys != null ? focusedKeys.emit('onPress', keysEvent) : void 0;
        });

        Device.onKeyHold.connect(function(event) {
          return focusedKeys != null ? focusedKeys.emit('onHold', keysEvent) : void 0;
        });

        Device.onKeyRelease.connect(function(event) {
          return focusedKeys != null ? focusedKeys.emit('onRelease', keysEvent) : void 0;
        });

        Device.onKeyInput.connect(function(event) {
          return focusedKeys != null ? focusedKeys.emit('onInput', keysEvent) : void 0;
        });

        Keys.event = keysEvent = new KeysEvent;

        return Keys;

      })(itemUtils.DeepObject);
    };
  };

}).call(this);

},{"../../../../util":"../../../node_modules/@neft/core/src/util/index.litcoffee","../../../../signal":"../../../node_modules/@neft/core/src/signal/index.js","../../../../assert":"../../../node_modules/@neft/core/src/assert/index.litcoffee"}],"../../../node_modules/@neft/core/src/renderer/types/basics/item.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  var Matrix, SignalsEmitter, assert, isArray, utils,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  assert = require('../../../assert');

  utils = require('../../../util');

  SignalsEmitter = require('../../../signal').SignalsEmitter;

  Matrix = require('../../utils/Matrix');

  isArray = Array.isArray;

  assert = assert.scope('Renderer.Item');

  module.exports = function(Renderer, Impl, itemUtils) {
    var Item;
    return Item = (function(superClass) {
      var ChildrenObject, DocElement, insertItemInImpl, isNextSibling, isPreviousSibling, setFakeParent, updateZSiblingsForAppendedItem, updateZSiblingsForInsertedItem;

      extend(Item, superClass);

      Item.__name__ = 'Item';

      Item.__path__ = 'Renderer.Item';

      DocElement = require('../../../document/element');

      Item.New = function(opts) {
        var item;
        item = new Item;
        itemUtils.Object.initialize(item, opts);
        return item;
      };

      function Item() {
        assert.instanceOf(this, Item);
        Item.__super__.constructor.call(this);
        this._parent = null;
        this._children = null;
        this._previousSibling = null;
        this._nextSibling = null;
        this._belowSibling = null;
        this._aboveSibling = null;
        this._width = 0;
        this._height = 0;
        this._x = 0;
        this._y = 0;
        this._z = 0;
        this._visible = true;
        this._clip = false;
        this._scale = 1;
        this._rotation = 0;
        this._opacity = 1;
        this._anchors = null;
        this._layout = null;
        this._fillWidth = false;
        this._fillHeight = false;
        this._keys = null;
        this._pointer = null;
        this._margin = null;
        this._padding = null;
        this._columns = 2;
        this._rows = 2e308;
        this._spacing = null;
        this._alignment = null;
        this._classes = null;
        this._query = '';
        this._element = null;
      }

      utils.defineProperty(Item.prototype, 'query', null, function() {
        return this._query;
      }, function(val) {
        if (this._query === '') {
          this._query = val;
        }
      });

      itemUtils.defineProperty({
        constructor: Item,
        name: 'element',
        defaultValue: null,
        developmentSetter: function(val) {
          if (val != null) {
            return assert.instanceOf(val, DocElement);
          }
        }
      });

      SignalsEmitter.createSignal(Item, 'onAnimationFrame', (function() {
        var frame, items, now;
        now = Date.now();
        items = [];
        frame = function() {
          var i, item, len, ms, oldNow;
          oldNow = now;
          now = Date.now();
          ms = now - oldNow;
          for (i = 0, len = items.length; i < len; i++) {
            item = items[i];
            item.emit('onAnimationFrame', ms);
          }
          return requestAnimationFrame(frame);
        };
        if (typeof requestAnimationFrame === "function") {
          requestAnimationFrame(frame);
        }
        return function(item) {
          return items.push(item);
        };
      })());

      utils.defineProperty(Item.prototype, 'children', null, function() {
        return this._children || (this._children = new ChildrenObject(this));
      }, function(val) {
        var i, item, len;
        assert.isArray(val, "Item.children needs to be an array, but " + val + " given");
        this.clear();
        for (i = 0, len = val.length; i < len; i++) {
          item = val[i];
          val.parent = this;
        }
      });

      SignalsEmitter.createSignal(Item, 'onChildrenChange');

      ChildrenObject = (function(superClass1) {
        extend(ChildrenObject, superClass1);

        function ChildrenObject(ref) {
          this._firstChild = null;
          this._lastChild = null;
          this._bottomChild = null;
          this._topChild = null;
          this._length = 0;
          ChildrenObject.__super__.constructor.call(this, ref);
        }

        utils.defineProperty(ChildrenObject.prototype, 'firstChild', null, function() {
          return this._firstChild;
        }, null);

        utils.defineProperty(ChildrenObject.prototype, 'lastChild', null, function() {
          return this._lastChild;
        }, null);

        utils.defineProperty(ChildrenObject.prototype, 'bottomChild', null, function() {
          return this._bottomChild;
        }, null);

        utils.defineProperty(ChildrenObject.prototype, 'topChild', null, function() {
          return this._topChild;
        }, null);

        utils.defineProperty(ChildrenObject.prototype, 'length', null, function() {
          return this._length;
        }, null);

        ChildrenObject.prototype.get = function(val) {
          var sibling;
          assert.operator(val, '>=', 0, "Item.children.get index cannot be lower than zero, " + val + " given");
          assert.operator(val, '<', this.length, "Item.children.get index must be lower than children.length, " + val + " given");
          if (val < this.length / 2) {
            sibling = this.firstChild;
            while (val > 0) {
              sibling = sibling.nextSibling;
              val--;
            }
          } else {
            sibling = this.lastChild;
            while (val > 0) {
              sibling = sibling.previousSibling;
              val--;
            }
          }
          return sibling;
        };

        ChildrenObject.prototype.index = function(val) {
          if (this.has(val)) {
            return val.index;
          } else {
            return -1;
          }
        };

        ChildrenObject.prototype.has = function(val) {
          return this._ref === val._parent;
        };

        ChildrenObject.prototype.clear = function() {
          var last;
          while (last = this.last) {
            last.parent = null;
          }
        };

        return ChildrenObject;

      })(itemUtils.MutableDeepObject);

      setFakeParent = function(child, parent, index) {
        if (index == null) {
          index = -1;
        }
        child.parent = null;
        if (index >= 0 && parent.children._length < index) {
          Impl.insertItemBefore.call(child, parent.children[index]);
        } else {
          Impl.setItemParent.call(child, parent);
        }
        child._parent = parent;
        child.emit('onParentChange', null);
      };

      updateZSiblingsForAppendedItem = function(item, z, newChildren) {
        var child, nextChild;
        child = newChildren._topChild;
        while (child) {
          if (child._z <= z) {
            if (item._aboveSibling = child._aboveSibling) {
              item._aboveSibling._belowSibling = item;
            }
            item._belowSibling = child;
            child._aboveSibling = item;
            return;
          }
          if (!(nextChild = child._belowSibling)) {
            item._aboveSibling = child;
            child._belowSibling = item;
            item._belowSibling = null;
            return;
          }
          child = nextChild;
        }
      };

      insertItemInImpl = function(item) {
        var aboveSibling;
        if (aboveSibling = item._aboveSibling) {
          Impl.insertItemBefore.call(item, aboveSibling);
        } else {
          Impl.setItemParent.call(item, item._parent);
        }
      };

      itemUtils.defineProperty({
        constructor: Item,
        name: 'parent',
        defaultValue: null,
        setter: function(_super) {
          return function(val) {
            var old, oldAboveSibling, oldBelowSibling, oldChildren, oldNextSibling, oldPreviousSibling, pointer, previousSibling, valChildren;
            if (val == null) {
              val = null;
            }
            old = this._parent;
            oldChildren = old != null ? old.children : void 0;
            valChildren = val != null ? val.children : void 0;
            if (old === val) {
              return;
            }
            assert.isNot(this, val, "Item.parent cannot be set with context item, " + val + " given");
            if (pointer = this._pointer) {
              pointer.hover = pointer.pressed = false;
            }
            if (val !== null) {
              assert.instanceOf(val, Item, "Item.parent needs to be an Item or null, but " + val + " given");
            }
            oldPreviousSibling = this._previousSibling;
            oldNextSibling = this._nextSibling;
            if (oldPreviousSibling !== null) {
              oldPreviousSibling._nextSibling = oldNextSibling;
            }
            if (oldNextSibling !== null) {
              oldNextSibling._previousSibling = oldPreviousSibling;
            }
            if (val !== null) {
              if (previousSibling = this._previousSibling = valChildren.lastChild) {
                previousSibling._nextSibling = this;
              }
            } else {
              this._previousSibling = null;
            }
            if (oldNextSibling !== null) {
              this._nextSibling = null;
            }
            if (oldChildren) {
              oldChildren._length -= 1;
              if (oldChildren.firstChild === this) {
                oldChildren._firstChild = oldNextSibling;
              }
              if (oldChildren.lastChild === this) {
                oldChildren._lastChild = oldPreviousSibling;
              }
            }
            if (valChildren) {
              if (++valChildren._length === 1) {
                valChildren._firstChild = this;
              }
              valChildren._lastChild = this;
            }
            oldBelowSibling = this._belowSibling;
            oldAboveSibling = this._aboveSibling;
            if (oldBelowSibling !== null) {
              oldBelowSibling._aboveSibling = oldAboveSibling;
            }
            if (oldAboveSibling !== null) {
              oldAboveSibling._belowSibling = oldBelowSibling;
            }
            this._belowSibling = this._aboveSibling = null;
            if (valChildren) {
              updateZSiblingsForAppendedItem(this, this._z, valChildren);
            }
            if (oldChildren) {
              if (!oldAboveSibling) {
                oldChildren._topChild = oldBelowSibling;
              }
              if (!oldBelowSibling) {
                oldChildren._bottomChild = oldAboveSibling;
              }
            }
            if (valChildren) {
              if (!this._aboveSibling) {
                valChildren._topChild = this;
              }
              if (!this._belowSibling) {
                valChildren._bottomChild = this;
              }
            }
            this._parent = val;
            insertItemInImpl(this);
            //<development>;
            assert.is(this.nextSibling, null);
            if (val) {
              assert.is(val.children.lastChild, this);
              assert.isDefined(val.children.firstChild);
              assert.isDefined(val.children.lastChild);
              assert.isDefined(val.children.topChild);
              assert.isDefined(val.children.bottomChild);
            }
            if (old && old.children.length === 0) {
              assert.isNotDefined(old.children.firstChild);
              assert.isNotDefined(old.children.lastChild);
              assert.isNotDefined(old.children.topChild);
              assert.isNotDefined(old.children.bottomChild);
            }
            //</development>;
            if (old !== null) {
              old.emit('onChildrenChange', null, this);
            }
            if (val !== null) {
              val.emit('onChildrenChange', this, null);
            }
            this.emit('onParentChange', old);
            if (oldPreviousSibling !== null) {
              oldPreviousSibling.emit('onNextSiblingChange', this);
            }
            if (oldNextSibling !== null) {
              oldNextSibling.emit('onPreviousSiblingChange', this);
            }
            if (val !== null || oldPreviousSibling !== null) {
              if (previousSibling) {
                previousSibling.emit('onNextSiblingChange', null);
              }
              this.emit('onPreviousSiblingChange', oldPreviousSibling);
            }
            if (oldNextSibling !== null) {
              this.emit('onNextSiblingChange', oldNextSibling);
            }
          };
        }
      });

      utils.defineProperty(Item.prototype, 'previousSibling', null, function() {
        return this._previousSibling;
      }, function(val) {
        var nextSibling;
        if (val == null) {
          val = null;
        }
        assert.isNot(this, val, "Item.previousSibling cannot be set with context Item, " + val + " given");
        if (val === this._previousSibling) {
          return;
        }
        if (val) {
          assert.instanceOf(val, Item, "Item.previousSibling must be an Item or null, but " + val + " given");
          nextSibling = val._nextSibling;
          if (!nextSibling && val._parent !== this._parent) {
            this.parent = val._parent;
          } else {
            this.nextSibling = nextSibling;
          }
        } else {
          assert.isDefined(this._parent, "Cannot null Item.previousSibling when Item has no parent");
          this.nextSibling = this._parent.children.firstChild;
        }
        assert.is(this._previousSibling, val);
      });

      SignalsEmitter.createSignal(Item, 'onPreviousSiblingChange');

      isNextSibling = function(item, sibling) {
        var nextItem;
        while (item) {
          nextItem = item._nextSibling;
          if (nextItem === sibling) {
            return true;
          }
          item = nextItem;
        }
        return false;
      };

      isPreviousSibling = function(item, sibling) {
        var prevItem;
        while (item) {
          prevItem = item._previousSibling;
          if (prevItem === sibling) {
            return true;
          }
          item = prevItem;
        }
        return false;
      };

      updateZSiblingsForInsertedItem = function(item, nextSibling, z, newChildren) {
        var child, nextChild;
        if (nextSibling._z === z) {
          if (item._belowSibling = nextSibling._belowSibling) {
            item._belowSibling._aboveSibling = item;
          }
          item._aboveSibling = nextSibling;
          nextSibling._belowSibling = item;
        } else {
          nextChild = newChildren._bottomChild;
          while (child = nextChild) {
            nextChild = child._aboveSibling;
            if (child._z > z || (child._z === z && isNextSibling(item, child))) {
              item._aboveSibling = child;
              if (item._belowSibling = child._belowSibling) {
                item._belowSibling._aboveSibling = item;
              }
              child._belowSibling = item;
              break;
            }
            if (!nextChild) {
              item._aboveSibling = null;
              item._belowSibling = child;
              child._aboveSibling = item;
            }
          }
        }
      };

      utils.defineProperty(Item.prototype, 'nextSibling', null, function() {
        return this._nextSibling;
      }, function(val) {
        var newChildren, newParent, nextSibling, nextSiblingOldPreviousSibling, oldAboveSibling, oldBelowSibling, oldChildren, oldNextSibling, oldParent, oldPreviousSibling, previousSibling, previousSiblingOldNextSibling;
        if (val == null) {
          val = null;
        }
        assert.isNot(this, val, "Item.nextSibling cannot be set with context Item, " + val + " given");
        if (val) {
          assert.instanceOf(val, Item, "Item.nextSibling needs to be an Item or null, but " + val + " given");
          assert.isDefined(val._parent, "Item.nextSibling value needs to have a parent, given " + val + " has no parent");
        } else {
          assert.isDefined(this._parent, "Cannot null Item.nextSibling when Item has no parent");
        }
        if (val === this._nextSibling) {
          return;
        }
        oldParent = this._parent;
        oldChildren = oldParent != null ? oldParent._children : void 0;
        oldPreviousSibling = this._previousSibling;
        oldNextSibling = this._nextSibling;
        if (val) {
          newParent = val._parent;
          newChildren = newParent._children;
        } else {
          newParent = oldParent;
          newChildren = oldChildren;
        }
        this._parent = newParent;
        if (oldPreviousSibling != null) {
          oldPreviousSibling._nextSibling = oldNextSibling;
        }
        if (oldNextSibling != null) {
          oldNextSibling._previousSibling = oldPreviousSibling;
        }
        previousSibling = previousSiblingOldNextSibling = null;
        nextSibling = nextSiblingOldPreviousSibling = null;
        if (val) {
          if (previousSibling = val._previousSibling) {
            previousSiblingOldNextSibling = previousSibling._nextSibling;
            previousSibling._nextSibling = this;
          }
          nextSibling = val;
          nextSiblingOldPreviousSibling = nextSibling._previousSibling;
          nextSibling._previousSibling = this;
        } else {
          if (previousSibling = newChildren.lastChild) {
            previousSibling._nextSibling = this;
          }
        }
        this._previousSibling = previousSibling;
        this._nextSibling = nextSibling;
        if (oldChildren) {
          oldChildren._length -= 1;
          if (!oldPreviousSibling) {
            oldChildren._firstChild = oldNextSibling;
          }
          if (!oldNextSibling) {
            oldChildren._lastChild = oldPreviousSibling;
          }
        }
        newChildren._length += 1;
        if (newChildren.firstChild === val) {
          newChildren._firstChild = this;
        }
        if (!val) {
          newChildren._lastChild = this;
        }
        oldBelowSibling = this._belowSibling;
        oldAboveSibling = this._aboveSibling;
        if (oldBelowSibling !== null) {
          oldBelowSibling._aboveSibling = oldAboveSibling;
        }
        if (oldAboveSibling !== null) {
          oldAboveSibling._belowSibling = oldBelowSibling;
        }
        this._belowSibling = this._aboveSibling = null;
        if (nextSibling) {
          updateZSiblingsForInsertedItem(this, nextSibling, this._z, newChildren);
        } else {
          updateZSiblingsForAppendedItem(this, this._z, newChildren);
        }
        if (oldChildren) {
          if (!oldAboveSibling) {
            oldChildren._topChild = oldBelowSibling;
          }
          if (!oldBelowSibling) {
            oldChildren._bottomChild = oldAboveSibling;
          }
        }
        if (!this._aboveSibling) {
          newChildren._topChild = this;
        }
        if (!this._belowSibling) {
          newChildren._bottomChild = this;
        }
        insertItemInImpl(this);
        //<development>;
        assert.is(this._nextSibling, val);
        assert.is(this._parent, newParent);
        if (val) {
          assert.is(this._parent, val._parent);
        }
        if (this._previousSibling) {
          assert.is(this._previousSibling._nextSibling, this);
        }
        if (this._nextSibling) {
          assert.is(this._nextSibling._previousSibling, this);
        }
        if (oldPreviousSibling) {
          assert.is(oldPreviousSibling._nextSibling, oldNextSibling);
        }
        if (oldNextSibling) {
          assert.is(oldNextSibling._previousSibling, oldPreviousSibling);
        }
        //</development>;
        if (oldParent !== newParent) {
          if (oldParent) {
            oldParent.emit('onChildrenChange', null, this);
          }
          newParent.emit('onChildrenChange', this, null);
          this.emit('onParentChange', oldParent);
        } else {
          newParent.emit('onChildrenChange', null, null);
        }
        if (oldPreviousSibling) {
          oldPreviousSibling.emit('onNextSiblingChange', this);
        }
        if (oldNextSibling) {
          oldNextSibling.emit('onPreviousSiblingChange', this);
        }
        this.emit('onPreviousSiblingChange', oldPreviousSibling);
        if (previousSibling) {
          previousSibling.emit('onNextSiblingChange', previousSiblingOldNextSibling);
        }
        this.emit('onNextSiblingChange', oldNextSibling);
        if (nextSibling) {
          nextSibling.emit('onPreviousSiblingChange', nextSiblingOldPreviousSibling);
        }
      });

      SignalsEmitter.createSignal(Item, 'onNextSiblingChange');

      utils.defineProperty(Item.prototype, 'belowSibling', null, function() {
        return this._belowSibling;
      }, null);

      utils.defineProperty(Item.prototype, 'aboveSibling', null, function() {
        return this._aboveSibling;
      }, null);

      utils.defineProperty(Item.prototype, 'index', null, function() {
        var index, sibling;
        index = 0;
        sibling = this;
        while (sibling = sibling.previousSibling) {
          index++;
        }
        return index;
      }, function(val) {
        var children, valItem;
        assert.isInteger(val, "Item.index needs to be a integer, but " + val + " given");
        assert.isDefined(this._parent, "When setting Item.index, item needs to have a parent, " + this + " has no parent");
        assert.operator(val, '>=', 0, "Item.index needs to greater than zero, " + val + " given");
        assert.operator(val, '<=', this._parent._children.length, "Item.index needs to be lower than parent.children.length, " + val + " given");
        children = this.parent.children;
        if (val >= children.length) {
          this.nextSibling = null;
        } else if ((valItem = children.get(val)) !== this) {
          this.nextSibling = valItem;
        }
      });

      itemUtils.defineProperty({
        constructor: Item,
        name: 'visible',
        defaultValue: true,
        implementation: Impl.setItemVisible,
        developmentSetter: function(val) {
          return assert.isBoolean(val, "Item.visible needs to be a boolean, but " + val + " given");
        }
      });

      itemUtils.defineProperty({
        constructor: Item,
        name: 'clip',
        defaultValue: false,
        implementation: Impl.setItemClip,
        developmentSetter: function(val) {
          return assert.isBoolean(val, "Item.clip needs to be a boolean, but " + val + " given");
        }
      });

      itemUtils.defineProperty({
        constructor: Item,
        name: 'width',
        defaultValue: 0,
        implementation: Impl.setItemWidth,
        developmentSetter: function(val) {
          return assert.isFloat(val, "Item.width needs to be a float, but " + val + " given");
        }
      });

      itemUtils.defineProperty({
        constructor: Item,
        name: 'height',
        defaultValue: 0,
        implementation: Impl.setItemHeight,
        developmentSetter: function(val) {
          return assert.isFloat(val, "Item.height needs to be a float, but " + val + " given");
        }
      });

      itemUtils.defineProperty({
        constructor: Item,
        name: 'x',
        defaultValue: 0,
        implementation: Impl.setItemX,
        developmentSetter: function(val) {
          return assert.isFloat(val, "Item.x needs to be a float, but " + val + " given");
        }
      });

      itemUtils.defineProperty({
        constructor: Item,
        name: 'y',
        defaultValue: 0,
        implementation: Impl.setItemY,
        developmentSetter: function(val) {
          return assert.isFloat(val, "Item.y needs to be a float, but " + val + " given");
        }
      });

      itemUtils.defineProperty({
        constructor: Item,
        name: 'z',
        defaultValue: 0,
        developmentSetter: function(val) {
          return assert.isFloat(val, "Item.z needs to be a float, but " + val + " given");
        },
        setter: function(_super) {
          return function(val) {
            var aboveSibling, child, children, nextChild, oldAboveSibling, oldBelowSibling, oldVal, parent, prevChild, ref1, ref2;
            oldVal = this._z;
            if (oldVal === val) {
              return;
            }
            _super.call(this, val);
            if (!(parent = this._parent)) {
              return;
            }
            children = parent._children;
            oldAboveSibling = this._aboveSibling;
            oldBelowSibling = this._belowSibling;
            if (val > oldVal) {
              nextChild = this._aboveSibling;
              while (child = nextChild) {
                nextChild = child._aboveSibling;
                if (child._z > val || (child._z === val && isNextSibling(this, child))) {
                  if (oldAboveSibling === child) {
                    break;
                  }
                  this._aboveSibling = child;
                  if (this._belowSibling = child._belowSibling) {
                    this._belowSibling._aboveSibling = this;
                  }
                  child._belowSibling = this;
                  break;
                }
                if (!nextChild) {
                  this._aboveSibling = null;
                  this._belowSibling = child;
                  child._aboveSibling = this;
                }
              }
            }
            if (val < oldVal) {
              prevChild = this._belowSibling;
              while (child = prevChild) {
                prevChild = child._belowSibling;
                if (child._z < val || (child._z === val && isPreviousSibling(this, child))) {
                  if (oldBelowSibling === child) {
                    break;
                  }
                  this._belowSibling = child;
                  aboveSibling = child._aboveSibling;
                  if (this._aboveSibling = child._aboveSibling) {
                    this._aboveSibling._belowSibling = this;
                  }
                  child._aboveSibling = this;
                  break;
                }
                if (!prevChild) {
                  this._belowSibling = null;
                  this._aboveSibling = child;
                  child._belowSibling = this;
                }
              }
            }
            if (oldBelowSibling && oldBelowSibling !== this._belowSibling) {
              oldBelowSibling._aboveSibling = oldAboveSibling;
            }
            if (oldAboveSibling && oldAboveSibling !== this._aboveSibling) {
              oldAboveSibling._belowSibling = oldBelowSibling;
            }
            if (this._belowSibling) {
              if (children._bottomChild === this) {
                children._bottomChild = oldAboveSibling;
              }
            } else {
              children._bottomChild = this;
            }
            if (this._aboveSibling) {
              if (children._topChild === this) {
                children._topChild = oldBelowSibling;
              }
            } else {
              children._topChild = this;
            }
            if (oldAboveSibling !== this._aboveSibling) {
              insertItemInImpl(this);
            }
            //<development>;
            assert.isNot(this._belowSibling, this);
            assert.isNot((ref1 = this._belowSibling) != null ? ref1._belowSibling : void 0, this);
            assert.isNot(this._aboveSibling, this);
            assert.isNot((ref2 = this._aboveSibling) != null ? ref2._aboveSibling : void 0, this);
            if (this._belowSibling) {
              assert.is(this._belowSibling._aboveSibling, this);
            }
            if (this._aboveSibling) {
              assert.is(this._aboveSibling._belowSibling, this);
            }
            //</development>;
          };
        }
      });

      itemUtils.defineProperty({
        constructor: Item,
        name: 'scale',
        defaultValue: 1,
        implementation: Impl.setItemScale,
        developmentSetter: function(val) {
          return assert.isFloat(val, "Item.scale needs to be a float, but " + val + " given");
        }
      });

      itemUtils.defineProperty({
        constructor: Item,
        name: 'rotation',
        defaultValue: 0,
        implementation: Impl.setItemRotation,
        developmentSetter: function(val) {
          return assert.isFloat(val, "Item.rotation needs to be a float, but " + val + " given");
        }
      });

      itemUtils.defineProperty({
        constructor: Item,
        name: 'opacity',
        defaultValue: 1,
        implementation: Impl.setItemOpacity,
        developmentSetter: function(val) {
          return assert.isFloat(val, "Item.opacity needs to be a float, but " + val + " given");
        }
      });

      itemUtils.defineProperty({
        constructor: Item,
        name: 'layout',
        defaultValue: null,
        implementation: Impl.setItemLayout,
        developmentSetter: function(val) {
          if (val !== null) {
            return assert.isString(val);
          }
        }
      });

      itemUtils.defineProperty({
        constructor: Item,
        name: 'fillWidth',
        defaultValue: false,
        developmentSetter: function(val) {
          return assert.isBoolean(val);
        }
      });

      itemUtils.defineProperty({
        constructor: Item,
        name: 'fillHeight',
        defaultValue: false,
        developmentSetter: function(val) {
          return assert.isBoolean(val);
        }
      });

      itemUtils.defineProperty({
        constructor: Item,
        name: 'columns',
        defaultValue: 2,
        implementation: Impl.setItemColumns,
        developmentSetter: function(val) {
          return assert.operator(val, '>=', 0);
        },
        setter: function(_super) {
          return function(val) {
            if (val <= 0) {
              val = 1;
            }
            return _super.call(this, val);
          };
        }
      });

      itemUtils.defineProperty({
        constructor: Item,
        name: 'rows',
        defaultValue: 2e308,
        implementation: Impl.setItemRows,
        developmentSetter: function(val) {
          return assert.operator(val, '>=', 0);
        },
        setter: function(_super) {
          return function(val) {
            if (val <= 0) {
              val = 1;
            }
            return _super.call(this, val);
          };
        }
      });

      Item.prototype.scaleInPoint = function(scale, pointX, pointY) {
        var height, heightChange, oldScale, width, widthChange, xOriginToChange, yOriginToChange;
        oldScale = this.scale;
        this.scale = scale;
        width = this.width;
        widthChange = (width * scale - width * oldScale) / 2;
        xOriginToChange = -2 * (pointX / width) + 1;
        this.x += xOriginToChange * widthChange;
        height = this.height;
        heightChange = (height * scale - height * oldScale) / 2;
        yOriginToChange = -2 * (pointY / height) + 1;
        this.y += yOriginToChange * heightChange;
      };

      Item.prototype.getGlobalComputes = function() {
        var chain, i, item, m, m2, m2Translate, mRotation, mScale, mTranslate, opacity, originX, originY, ref1, visible;
        m = new Matrix();
        ref1 = this, visible = ref1.visible, opacity = ref1.opacity;
        chain = [];
        item = this;
        while (item) {
          chain.push(item);
          visible && (visible = item.visible);
          opacity *= item.opacity;
          item = item.parent;
        }
        for (i = chain.length - 1; i >= 0; i += -1) {
          item = chain[i];
          originX = item.width / 2;
          originY = item.height / 2;
          m.translate(item.x + originX, item.y + originY);
          m.scale(item.scale);
          m.rotate(item.rotation);
          m.translate(-originX, -originY);
        }
        mScale = m.getScale();
        mRotation = m.getRotation();
        m2 = new Matrix();
        m2.translate(-this.width / 2, -this.height / 2);
        m2.rotate(mRotation);
        m2.translate(this.width * mScale / 2, this.height * mScale / 2);
        mTranslate = m.getTranslate();
        m2Translate = m2.getTranslate();
        return {
          x: mTranslate.x + m2Translate.x,
          y: mTranslate.y + m2Translate.y,
          scale: mScale,
          rotation: mRotation
        };
      };

      Item.createSpacing = require('./item/spacing')(Renderer, Impl, itemUtils, Item);

      Item.createAlignment = require('./item/alignment')(Renderer, Impl, itemUtils, Item);

      Item.createAnchors = require('./item/anchors')(Renderer, Impl, itemUtils, Item);

      Item.createMargin = require('./item/margin')(Renderer, Impl, itemUtils, Item);

      Item.createPointer = require('./item/pointer')(Renderer, Impl, itemUtils, Item);

      Item.createKeys = require('./item/keys')(Renderer, Impl, itemUtils, Item);

      Item.createAnchors(Item);

      Item.Pointer = Item.createPointer(Item);

      Item.createMargin(Item);

      Item.createMargin(Item, {
        propertyName: 'padding'
      });

      Item.createAlignment(Item);

      Item.createSpacing(Item);

      Item.Keys = Item.createKeys(Item);

      Item;

      return Item;

    })(itemUtils.Object);
  };

}).call(this);

},{"../../../assert":"../../../node_modules/@neft/core/src/assert/index.litcoffee","../../../util":"../../../node_modules/@neft/core/src/util/index.litcoffee","../../../signal":"../../../node_modules/@neft/core/src/signal/index.js","../../utils/Matrix":"../../../node_modules/@neft/core/src/renderer/utils/Matrix.coffee","../../../document/element":"../../../node_modules/@neft/core/src/document/element/index.coffee","./item/spacing":"../../../node_modules/@neft/core/src/renderer/types/basics/item/spacing.coffee","./item/alignment":"../../../node_modules/@neft/core/src/renderer/types/basics/item/alignment.coffee","./item/anchors":"../../../node_modules/@neft/core/src/renderer/types/basics/item/anchors.litcoffee","./item/margin":"../../../node_modules/@neft/core/src/renderer/types/basics/item/margin.coffee","./item/pointer":"../../../node_modules/@neft/core/src/renderer/types/basics/item/pointer.coffee","./item/keys":"../../../node_modules/@neft/core/src/renderer/types/basics/item/keys.coffee"}],"../../../node_modules/@neft/core/src/resources/resource.litcoffee":[function(require,module,exports) {
(function() {
  'use strict';
  var assert, log, utils;

  log = require('../log');

  utils = require('../util');

  assert = require('../assert');

  log = log.scope('Resources', 'Resource');

  module.exports = function(Resources) {
    var Resource;
    return Resource = (function() {
      Resource.__name__ = 'Resource';

      Resource.__path__ = 'Resources.Resource';

      Resource.FILE_NAME = /^(.*?)(?:@([0-9p]+)x)?(?:\.([a-zA-Z0-9]+))?(?:\#([a-zA-Z0-9]+))?$/;

      Resource.fromJSON = function(json) {
        var prop, res, val;
        if (typeof json === 'string') {
          json = JSON.parse(json);
        }
        assert.isObject(json);
        res = new Resources[json.__name__];
        for (prop in json) {
          val = json[prop];
          if (prop === '__name__') {
            continue;
          }
          res[prop] = val;
        }
        return res;
      };

      Resource.parseFileName = function(path) {
        var match;
        assert.isString(path);
        if (path && (match = Resource.FILE_NAME.exec(path))) {
          return {
            file: match[1] || void 0,
            resolution: match[2] != null ? parseFloat(match[2].replace('p', '.')) : void 0,
            format: match[3],
            property: match[4]
          };
        }
      };

      function Resource() {
        assert.instanceOf(this, Resource);
        this.file = '';
        this.name = '';
        this.color = '';
        this.width = 0;
        this.height = 0;
        this.formats = null;
        this.resolutions = null;
        this.paths = null;
        Object.seal(this);
      }

      Resource.prototype.resolve = function(uri, req) {
        var bestResolution, diff, file, format, formats, i, j, len, len1, name, property, r, ref, ref1, resolution, thisDiff, val;
        if (uri == null) {
          uri = '';
        }
        if (req === void 0 && utils.isPlainObject(uri)) {
          req = uri;
          uri = '';
        }
        if (uri !== '') {
          name = Resource.parseFileName(uri);
          file = name.file, resolution = name.resolution, property = name.property;
          if (name.format) {
            formats = [name.format];
          }
        }
        assert.isString(uri);
        if (req != null) {
          assert.isPlainObject(req);
        }
        if (file == null) {
          file = (req != null ? req.file : void 0) || this.file;
        }
        if (resolution == null) {
          resolution = (req != null ? req.resolution : void 0) || 1;
        }
        if (formats == null) {
          formats = (req != null ? req.formats : void 0) || this.formats;
        }
        if (property == null) {
          property = (req != null ? req.property : void 0) || 'file';
        }
        if (file !== this.file) {
          return;
        }
        if (property !== 'file') {
          return this[property];
        }
        if (((req != null ? req.width : void 0) != null) || ((req != null ? req.height : void 0) != null)) {
          if ((req.width != null) && req.width > req.height) {
            resolution *= req.width / this.width;
          } else if ((req.height != null) && req.width < req.height) {
            resolution *= req.height / this.height;
          }
        }
        diff = 2e308;
        bestResolution = 0;
        ref = this.resolutions;
        for (i = 0, len = ref.length; i < len; i++) {
          val = ref[i];
          thisDiff = Math.abs(resolution - val);
          if (thisDiff < diff || (thisDiff === diff && val > bestResolution)) {
            diff = thisDiff;
            bestResolution = val;
          }
        }
        for (j = 0, len1 = formats.length; j < len1; j++) {
          format = formats[j];
          if (r = (ref1 = this.paths[format]) != null ? ref1[bestResolution] : void 0) {
            return r;
          }
        }
      };

      Resource.prototype.toJSON = function() {
        return utils.merge({
          __name__: this.constructor.__name__
        }, this);
      };

      return Resource;

    })();
  };

}).call(this);

},{"../log":"../../../node_modules/@neft/core/src/log/index.litcoffee","../util":"../../../node_modules/@neft/core/src/util/index.litcoffee","../assert":"../../../node_modules/@neft/core/src/assert/index.litcoffee"}],"../../../node_modules/@neft/core/src/resources/index.litcoffee":[function(require,module,exports) {
(function() {
  'use strict';
  var Resources, assert, log, utils;

  utils = require('../util');

  log = require('../log');

  assert = require('../assert');

  log = log.scope('Resources');

  module.exports = Resources = (function() {
    var URI_SEPARATOR;

    Resources.__name__ = 'Resources';

    Resources.Resources = Resources;

    Resources.Resource = require('./resource')(Resources);

    URI_SEPARATOR = '/';

    Resources.URI = /^(?:rsc|resource|resources)?:\/?\/?(.*?)((?:@(?:[0-9p]+)x)?(?:\.(?:[a-zA-Z0-9]+))?(?:\#(?:[a-zA-Z0-9]+))?)$/;

    Resources.fromJSON = function(json, resources) {
      var prop, val;
      if (resources == null) {
        resources = new Resources;
      }
      if (typeof json === 'string') {
        json = JSON.parse(json);
      }
      assert.isObject(json);
      for (prop in json) {
        val = json[prop];
        if (prop === '__name__') {
          continue;
        }
        val = Resources[val.__name__].fromJSON(val);
        assert.notOk(prop in resources, "Can't set '" + prop + "' property in this resources object, because it's already defined");
        resources[prop] = val;
      }
      return resources;
    };

    Resources.testUri = function(uri) {
      assert.isString(uri);
      return Resources.URI.test(uri);
    };

    function Resources() {}

    Resources.prototype.getResource = function(uri) {
      var chunk, match, r, rest;
      if (typeof uri === 'string') {
        if (match = Resources.URI.exec(uri)) {
          uri = match[1];
        }
      }
      chunk = uri;
      while (chunk) {
        if (r = this[chunk]) {
          rest = uri.slice(chunk.length + 1);
          if (rest !== '' && r instanceof Resources) {
            return r.getResource(rest);
          } else if (uri === chunk) {
            return r;
          }
          return;
        }
        chunk = chunk.substring(0, chunk.lastIndexOf(URI_SEPARATOR));
      }
    };

    Resources.prototype.resolve = function(uri, req) {
      var ref, rsc, rscUri;
      if (!Resources.testUri(uri)) {
        return;
      }
      rsc = this.getResource(uri);
      rscUri = (ref = Resources.URI.exec(uri)) != null ? ref[2] : void 0;
      return rsc != null ? rsc.resolve(rscUri, req) : void 0;
    };

    Resources.prototype.toJSON = function() {
      return utils.merge({
        __name__: this.constructor.__name__
      }, this);
    };

    return Resources;

  })();

}).call(this);

},{"../util":"../../../node_modules/@neft/core/src/util/index.litcoffee","../log":"../../../node_modules/@neft/core/src/log/index.litcoffee","../assert":"../../../node_modules/@neft/core/src/assert/index.litcoffee","./resource":"../../../node_modules/@neft/core/src/resources/resource.litcoffee"}],"../../../node_modules/@neft/core/src/renderer/types/basics/image.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  var Resources, SignalDispatcher, SignalsEmitter, assert, log, ref, utils,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  assert = require('../../../assert');

  ref = require('../../../signal'), SignalDispatcher = ref.SignalDispatcher, SignalsEmitter = ref.SignalsEmitter;

  log = require('../../../log');

  utils = require('../../../util');

  Resources = require('../../../resources');

  log = log.scope('Renderer', 'Image');

  module.exports = function(Renderer, Impl, itemUtils) {
    var Image;
    return Image = (function(superClass) {
      var getter, itemHeightSetter, itemWidthSetter, pixelRatio, updateSize;

      extend(Image, superClass);

      Image.__name__ = 'Image';

      Image.__path__ = 'Renderer.Image';

      Image.New = function(opts) {
        var item;
        item = new Image;
        itemUtils.Object.initialize(item, opts);
        return item;
      };

      function Image() {
        Image.__super__.constructor.call(this);
        this._source = '';
        this._loaded = false;
        this._resolution = 1;
        this._sourceWidth = 0;
        this._sourceHeight = 0;
        this._autoWidth = true;
        this._autoHeight = true;
        this._width = -1;
        this._height = -1;
      }

      Image.onPixelRatioChange = new SignalDispatcher();

      pixelRatio = 1;

      utils.defineProperty(Image, 'pixelRatio', utils.CONFIGURABLE, function() {
        return pixelRatio;
      }, function(val) {
        var oldVal;
        assert.isFloat(val, "Image.pixelRatio needs to be a float, but " + val + " given");
        if (val === pixelRatio) {
          return;
        }
        oldVal = pixelRatio;
        pixelRatio = val;
        return this.onPixelRatioChange.emit(oldVal);
      });

      updateSize = function() {
        if (this._autoHeight === this._autoWidth) {
          return;
        }
        if (this._autoHeight) {
          itemHeightSetter.call(this, this._width / this.sourceWidth * this.sourceHeight || 0);
        }
        if (this._autoWidth) {
          itemWidthSetter.call(this, this._height / this.sourceHeight * this.sourceWidth || 0);
        }
      };

      Image.prototype._width = -1;

      getter = utils.lookupGetter(Image.prototype, 'width');

      itemWidthSetter = utils.lookupSetter(Image.prototype, 'width');

      utils.defineProperty(Image.prototype, 'width', null, getter, (function(_super) {
        return function(val) {
          this._autoWidth = val === -1;
          _super.call(this, val);
          updateSize.call(this);
        };
      })(itemWidthSetter));

      Image.prototype._height = -1;

      getter = utils.lookupGetter(Image.prototype, 'height');

      itemHeightSetter = utils.lookupSetter(Image.prototype, 'height');

      utils.defineProperty(Image.prototype, 'height', null, getter, (function(_super) {
        return function(val) {
          this._autoHeight = val === -1;
          _super.call(this, val);
          updateSize.call(this);
        };
      })(itemHeightSetter));

      itemUtils.defineProperty({
        constructor: Image,
        name: 'source',
        defaultValue: '',
        developmentSetter: function(val) {
          return assert.isString(val, "Image.source needs to be a string, but " + val + " given");
        },
        setter: (function() {
          var RESOURCE_REQUEST, defaultResult, loadCallback, setSize;
          RESOURCE_REQUEST = {
            resolution: 1
          };
          defaultResult = {
            source: '',
            width: 0,
            height: 0
          };
          setSize = function(size) {
            assert.isFloat(size.width);
            assert.isFloat(size.height);
            itemUtils.setPropertyValue(this, 'sourceWidth', size.width);
            itemUtils.setPropertyValue(this, 'sourceHeight', size.height);
            if (this._autoWidth) {
              itemWidthSetter.call(this, size.width);
            }
            if (this._autoHeight) {
              itemHeightSetter.call(this, size.height);
            }
            updateSize.call(this);
          };
          loadCallback = function(err, opts) {
            if (err == null) {
              err = null;
            }
            if (err) {
              log.warn("Can't load '" + this.source + "' image at " + (this.toString()));
            } else {
              assert.isString(opts.source);
              if (this.sourceWidth === 0 || this.sourceHeight === 0) {
                setSize.call(this, opts);
              } else {
                itemUtils.setPropertyValue(this, 'resolution', opts.width / this.sourceWidth);
              }
            }
            this._loaded = true;
            this.emit('onLoadedChange', false);
            if (err) {
              this.emit('onError', err);
            } else {
              this.emit('onLoad');
            }
          };
          return function(_super) {
            return function(val) {
              var ref1, res, resolution;
              _super.call(this, val);
              if (this._loaded) {
                this._loaded = false;
                this.emit('onLoadedChange', true);
              }
              itemUtils.setPropertyValue(this, 'sourceWidth', 0);
              itemUtils.setPropertyValue(this, 'sourceHeight', 0);
              itemUtils.setPropertyValue(this, 'resolution', 1);
              if (Resources.testUri(val)) {
                if (res = (ref1 = Impl.resources) != null ? ref1.getResource(val) : void 0) {
                  resolution = Renderer.Device.pixelRatio * Image.pixelRatio;
                  RESOURCE_REQUEST.resolution = resolution;
                  val = res.resolve(RESOURCE_REQUEST);
                  setSize.call(this, res);
                } else {
                  log.warn("Unknown resource given `" + val + "`");
                  val = '';
                }
              }
              if (val) {
                Impl.setImageSource.call(this, val, loadCallback);
              } else {
                Impl.setImageSource.call(this, null, null);
                defaultResult.source = val;
                loadCallback.call(this, null, defaultResult);
              }
            };
          };
        })()
      });

      itemUtils.defineProperty({
        constructor: Image,
        name: 'resolution',
        defaultValue: 1,
        setter: function(_super) {
          return function() {};
        }
      });

      itemUtils.defineProperty({
        constructor: Image,
        name: 'sourceWidth',
        defaultValue: 0,
        setter: function(_super) {
          return function() {};
        }
      });

      itemUtils.defineProperty({
        constructor: Image,
        name: 'sourceHeight',
        defaultValue: 0,
        setter: function(_super) {
          return function() {};
        }
      });

      utils.defineProperty(Image.prototype, 'loaded', null, function() {
        return this._loaded;
      }, null);

      SignalsEmitter.createSignal(Image, 'onLoadedChange');

      SignalsEmitter.createSignal(Image, 'onLoad');

      SignalsEmitter.createSignal(Image, 'onError');

      return Image;

    })(Renderer.Item);
  };

}).call(this);

},{"../../../assert":"../../../node_modules/@neft/core/src/assert/index.litcoffee","../../../signal":"../../../node_modules/@neft/core/src/signal/index.js","../../../log":"../../../node_modules/@neft/core/src/log/index.litcoffee","../../../util":"../../../node_modules/@neft/core/src/util/index.litcoffee","../../../resources":"../../../node_modules/@neft/core/src/resources/index.litcoffee"}],"../../../node_modules/@neft/core/src/renderer/types/basics/text/font.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  var assert, log, utils,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  assert = require('../../../../assert');

  utils = require('../../../../util');

  log = require('../../../../log');

  log = log.scope('Renderer', 'Font');

  module.exports = function(Renderer, Impl, itemUtils) {
    return function(ctor) {
      var Font;
      return Font = (function(superClass) {
        var checkingFamily, reloadFontFamily, setFontFamilyImpl;

        extend(Font, superClass);

        Font.__name__ = 'Font';

        itemUtils.defineProperty({
          constructor: ctor,
          name: 'font',
          defaultValue: null,
          valueConstructor: Font,
          developmentSetter: function(val) {
            if (val != null) {
              return assert.isObject(val);
            }
          },
          setter: function(_super) {
            return function(val) {
              var font;
              _super.call(this, val);
              if (utils.isObject(val)) {
                font = this.font;
                if (val.family != null) {
                  font.family = val.family;
                }
                if (val.pixelSize != null) {
                  font.pixelSize = val.pixelSize;
                }
                if (val.weight != null) {
                  font.weight = val.weight;
                }
                if (val.wordSpacing != null) {
                  font.wordSpacing = val.wordSpacing;
                }
                if (val.letterSpacing != null) {
                  font.letterSpacing = val.letterSpacing;
                }
                if (val.italic != null) {
                  font.italic = val.italic;
                }
              }
            };
          }
        });

        function Font(ref) {
          Font.__super__.constructor.call(this, ref);
          this._family = 'sans-serif';
          this._pixelSize = 14;
          this._weight = 0.4;
          this._wordSpacing = 0;
          this._letterSpacing = 0;
          this._italic = false;
          Object.preventExtensions(this);
        }

        setFontFamilyImpl = Impl["set" + ctor.name + "FontFamily"];

        reloadFontFamily = function(font) {
          var name;
          name = Renderer.FontLoader.getInternalFontName(font._family, font._weight, font._italic);
          name || (name = 'sans-serif');
          return setFontFamilyImpl.call(font._ref, name);
        };

        //<development>;

        checkingFamily = {};

        //</development>;

        itemUtils.defineProperty({
          constructor: Font,
          name: 'family',
          defaultValue: 'sans-serif',
          namespace: 'font',
          parentConstructor: ctor,
          developmentSetter: function(val) {
            return assert.isString(val, "Font.family needs to be a string, but " + val + " given");
          },
          setter: function(_super) {
            return function(val) {
              _super.call(this, val);
              return reloadFontFamily(this);
            };
          }
        });

        itemUtils.defineProperty({
          constructor: Font,
          name: 'pixelSize',
          defaultValue: 14,
          namespace: 'font',
          parentConstructor: ctor,
          implementation: Impl["set" + ctor.name + "FontPixelSize"],
          developmentSetter: function(val) {
            return assert.isFloat(val, "Font.pixelSize needs to be a float, but " + val + " given");
          }
        });

        itemUtils.defineProperty({
          constructor: Font,
          name: 'weight',
          defaultValue: 0.4,
          namespace: 'font',
          parentConstructor: ctor,
          developmentSetter: function(val) {
            assert.isFloat(val, "Font.weight needs to be a float, but " + val + " given");
            assert.operator(val, '>=', 0, "Font.weight needs to be in range 0-1, " + val + " given");
            return assert.operator(val, '<=', 1, "Font.weight needs to be in range 0-1, " + val + " given");
          },
          setter: function(_super) {
            return function(val) {
              _super.call(this, val);
              return reloadFontFamily(this);
            };
          }
        });

        itemUtils.defineProperty({
          constructor: Font,
          name: 'wordSpacing',
          defaultValue: 0,
          namespace: 'font',
          parentConstructor: ctor,
          implementation: Impl["set" + ctor.name + "FontWordSpacing"],
          developmentSetter: function(val) {
            return assert.isFloat(val, "Font.wordSpacing needs to be a float, but " + val + " given");
          }
        });

        itemUtils.defineProperty({
          constructor: Font,
          name: 'letterSpacing',
          defaultValue: 0,
          namespace: 'font',
          parentConstructor: ctor,
          implementation: Impl["set" + ctor.name + "FontLetterSpacing"],
          developmentSetter: function(val) {
            return assert.isFloat(val, "Font.letterSpacing needs to be a float, but " + val + " given");
          }
        });

        itemUtils.defineProperty({
          constructor: Font,
          name: 'italic',
          defaultValue: false,
          namespace: 'font',
          parentConstructor: ctor,
          developmentSetter: function(val) {
            return assert.isBoolean(val, "Font.italic needs to be a boolean, but " + val + " given");
          },
          setter: function(_super) {
            return function(val) {
              _super.call(this, val);
              return reloadFontFamily(this);
            };
          }
        });

        Font.prototype.toJSON = function() {
          return {
            family: this.family,
            pixelSize: this.pixelSize,
            weight: this.weight,
            wordSpacing: this.wordSpacing,
            letterSpacing: this.letterSpacing,
            italic: this.italic
          };
        };

        return Font;

      })(itemUtils.DeepObject);
    };
  };

}).call(this);

},{"../../../../assert":"../../../node_modules/@neft/core/src/assert/index.litcoffee","../../../../util":"../../../node_modules/@neft/core/src/util/index.litcoffee","../../../../log":"../../../node_modules/@neft/core/src/log/index.litcoffee"}],"../../../node_modules/@neft/core/src/renderer/types/basics/text.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  var assert, log, signal, utils,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  assert = require('../../../assert');

  utils = require('../../../util');

  signal = require('../../../signal');

  log = require('../../../log');

  log = log.scope('Renderer', 'Text');

  module.exports = function(Renderer, Impl, itemUtils) {
    var Text;
    Text = (function(superClass) {
      var getter, itemHeightSetter, itemWidthSetter;

      extend(Text, superClass);

      Text.__name__ = 'Text';

      Text.__path__ = 'Renderer.Text';

      Text.SUPPORTED_HTML_TAGS = {
        b: true,
        strong: true,
        em: true,
        br: true,
        font: true,
        i: true,
        s: true,
        u: true,
        a: true
      };

      Text.New = function(opts) {
        var item, name;
        item = new Text;
        itemUtils.Object.initialize(item, opts);
        if (name = Renderer.FontLoader.getInternalFontName('sans-serif', 0.4, false)) {
          Impl.setTextFontFamily.call(item, name);
        }
        return item;
      };

      function Text() {
        Text.__super__.constructor.call(this);
        this._text = '';
        this._color = 'black';
        this._linkColor = 'blue';
        this._lineHeight = 1;
        this._contentWidth = 0;
        this._contentHeight = 0;
        this._font = null;
        this._alignment = null;
        this._autoWidth = true;
        this._autoHeight = true;
        this._width = -1;
        this._height = -1;
      }

      Text.prototype._width = -1;

      getter = utils.lookupGetter(Text.prototype, 'width');

      itemWidthSetter = utils.lookupSetter(Text.prototype, 'width');

      utils.defineProperty(Text.prototype, 'width', null, getter, (function(_super) {
        return function(val) {
          var oldAutoWidth;
          oldAutoWidth = this._autoWidth;
          if (this._autoWidth = val === -1) {
            _super.call(this, this._contentWidth);
          } else {
            _super.call(this, val);
          }
          if (this._autoWidth || this._autoHeight) {
            Impl.updateTextContentSize.call(this);
          }
          if (oldAutoWidth !== this._autoWidth) {
            Impl.setTextWrap.call(this, !this._autoWidth);
          }
        };
      })(itemWidthSetter));

      Text.prototype._height = -1;

      getter = utils.lookupGetter(Text.prototype, 'height');

      itemHeightSetter = utils.lookupSetter(Text.prototype, 'height');

      utils.defineProperty(Text.prototype, 'height', null, getter, (function(_super) {
        return function(val) {
          if (this._autoHeight = val === -1) {
            _super.call(this, this._contentHeight);
            Impl.updateTextContentSize.call(this);
          } else {
            _super.call(this, val);
          }
        };
      })(itemHeightSetter));

      itemUtils.defineProperty({
        constructor: Text,
        name: 'text',
        defaultValue: '',
        implementation: Impl.setText,
        setter: function(_super) {
          return function(val) {
            return _super.call(this, val + '');
          };
        }
      });

      itemUtils.defineProperty({
        constructor: Text,
        name: 'color',
        defaultValue: 'black',
        implementation: Impl.setTextColor,
        implementationValue: (function() {
          var RESOURCE_REQUEST;
          RESOURCE_REQUEST = {
            property: 'color'
          };
          return function(val) {
            var ref;
            return ((ref = Impl.resources) != null ? ref.resolve(val, RESOURCE_REQUEST) : void 0) || val;
          };
        })(),
        developmentSetter: function(val) {
          return assert.isString(val, "Text.color needs to be a string, but " + val + " given");
        }
      });

      itemUtils.defineProperty({
        constructor: Text,
        name: 'linkColor',
        defaultValue: 'blue',
        implementation: Impl.setTextLinkColor,
        implementationValue: (function() {
          var RESOURCE_REQUEST;
          RESOURCE_REQUEST = {
            property: 'color'
          };
          return function(val) {
            var ref;
            return ((ref = Impl.resources) != null ? ref.resolve(val, RESOURCE_REQUEST) : void 0) || val;
          };
        })(),
        developmentSetter: function(val) {
          return assert.isString(val);
        }
      });

      itemUtils.defineProperty({
        constructor: Text,
        name: 'lineHeight',
        defaultValue: 1,
        implementation: Impl.setTextLineHeight,
        developmentSetter: function(val) {
          return assert.isFloat(val, "Text.lineHeight needs to be a float, but " + val + " given");
        }
      });

      itemUtils.defineProperty({
        constructor: Text,
        name: 'contentWidth',
        defaultValue: 0,
        developmentSetter: function(val) {
          return assert.isFloat(val);
        },
        setter: function(_super) {
          return function(val) {
            _super.call(this, val);
            if (this._autoWidth) {
              itemWidthSetter.call(this, val);
            }
          };
        }
      });

      itemUtils.defineProperty({
        constructor: Text,
        name: 'contentHeight',
        defaultValue: 0,
        developmentSetter: function(val) {
          return assert.isFloat(val);
        },
        setter: function(_super) {
          return function(val) {
            _super.call(this, val);
            if (this._autoHeight) {
              itemHeightSetter.call(this, val);
            }
          };
        }
      });

      Renderer.Item.createAlignment(Text);

      Text.createFont = require('./text/font')(Renderer, Impl, itemUtils);

      Text.createFont(Text);

      return Text;

    })(Renderer.Item);
    return Text;
  };

}).call(this);

},{"../../../assert":"../../../node_modules/@neft/core/src/assert/index.litcoffee","../../../util":"../../../node_modules/@neft/core/src/util/index.litcoffee","../../../signal":"../../../node_modules/@neft/core/src/signal/index.js","../../../log":"../../../node_modules/@neft/core/src/log/index.litcoffee","./text/font":"../../../node_modules/@neft/core/src/renderer/types/basics/text/font.coffee"}],"../../../node_modules/@neft/core/src/renderer/types/basics/native.litcoffee":[function(require,module,exports) {
(function () {
  'use strict';

  var IS_NATIVE,
      Resources,
      assert,
      callNativeFunction,
      colorUtils,
      log,
      onNativeEvent,
      ref,
      util,
      extend = function (child, parent) {
    for (var key in parent) {
      if (hasProp.call(parent, key)) child[key] = parent[key];
    }

    function ctor() {
      this.constructor = child;
    }

    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
    child.__super__ = parent.prototype;
    return child;
  },
      hasProp = {}.hasOwnProperty,
      slice = [].slice;

  util = require('../../../util');
  log = require('../../../log');
  assert = require('../../../assert');
  colorUtils = require('../../utils/color');
  Resources = require('../../../resources');
  IS_NATIVE = "";

  if ("") {
    ref = require('../../../native'), callNativeFunction = ref.callNativeFunction, onNativeEvent = ref.onNativeEvent;
  }

  module.exports = function (Renderer, Impl, itemUtils) {
    var Native;

    Native = function (superClass) {
      var PROPERTY_TYPES, createNativeEventListener, eventListeners, getter, itemHeightSetter, itemWidthSetter;
      extend(Native, superClass);
      Native.__name__ = 'Native';
      Native.__path__ = 'Renderer.Native';

      Native.New = function (opts) {
        var item;
        item = new this();
        itemUtils.Object.initialize(item, opts);

        if (typeof this.Initialize === "function") {
          this.Initialize(item);
        }

        return item;
      };

      PROPERTY_TYPES = Object.create(null);

      PROPERTY_TYPES.text = function () {
        return {
          defaultValue: '',
          developmentSetter: function (val) {
            return assert.isString(val);
          }
        };
      };

      PROPERTY_TYPES.number = function () {
        return {
          defaultValue: 0,
          developmentSetter: function (val) {
            return assert.isFloat(val);
          }
        };
      };

      PROPERTY_TYPES.boolean = function () {
        return {
          defaultValue: false,
          developmentSetter: function (val) {
            return assert.isBoolean(val);
          }
        };
      };

      PROPERTY_TYPES.resource = function (config) {
        return {
          defaultValue: '',
          developmentSetter: function (val) {
            return assert.isString(val);
          },
          implementationValue: function () {
            var RESOURCE_REQUEST, getResourceResolutionByPath;
            RESOURCE_REQUEST = {
              resolution: 1
            };

            if (typeof requestAnimationFrame === "function") {
              requestAnimationFrame(function () {
                return RESOURCE_REQUEST.resolution = Renderer.Device.pixelRatio;
              });
            }

            getResourceResolutionByPath = function (rsc, path) {
              var format, j, len, paths, ref1, resolution;
              ref1 = rsc.formats;

              for (j = 0, len = ref1.length; j < len; j++) {
                format = ref1[j];
                paths = rsc.paths[format];

                if (!paths) {
                  continue;
                }

                for (resolution in paths) {
                  if (paths[resolution] === path) {
                    return parseFloat(resolution);
                  }
                }
              }

              return 1;
            };

            return function (val) {
              var path, ref1, ref2, resource;

              if (!Resources.testUri(val)) {
                return val;
              }

              resource = (ref1 = Impl.resources) != null ? ref1.getResource(val) : void 0;

              if (resource) {
                path = resource.resolve(RESOURCE_REQUEST);

                if ((ref2 = config.onResolutionChange) != null) {
                  ref2.call(this, getResourceResolutionByPath(resource, path));
                }

                return path;
              } else {
                log.warn("Unknown resource given `" + val + "`");
                return '';
              }
            };
          }()
        };
      };

      PROPERTY_TYPES.color = function (config) {
        return {
          defaultValue: '',
          developmentSetter: function (val) {
            return assert.isString(val);
          },
          implementationValue: function () {
            var RESOURCE_REQUEST;
            RESOURCE_REQUEST = {
              property: 'color'
            };
            return function (val) {
              var ref1;
              val = ((ref1 = Impl.resources) != null ? ref1.resolve(val, RESOURCE_REQUEST) : void 0) || val;

              if (IS_NATIVE) {
                if (val != null) {
                  return colorUtils.toRGBAHex(val, config.defaultValue);
                } else {
                  return null;
                }
              } else {
                return val;
              }
            };
          }()
        };
      };

      PROPERTY_TYPES.item = function (config) {
        return {
          defaultValue: null,
          developmentSetter: function (val) {
            if (val != null) {
              return assert.instanceOf(val, Renderer.Item);
            }
          },
          implementationValue: function (val) {
            if (IS_NATIVE) {
              if (val != null) {
                return val._impl.id;
              } else {
                return null;
              }
            } else {
              return val;
            }
          }
        };
      };

      Native.defineProperty = function (config) {
        var itemName, key, properties, typeConfig, typeConfigFunc, val;
        itemName = this.name;
        properties = this._properties != null ? this._properties : this._properties = [];
        config = util.clone(config);
        assert.isObject(config, 'NativeItem.defineProperty config parameter must be an object');
        assert.isString(config.name, 'NativeItem property name must be a string');
        assert.isNotDefined(properties[config.name], "Property " + config.name + " is already defined");

        if (config.type) {
          assert.isDefined(PROPERTY_TYPES[config.type], "Unknown property type " + config.type);
        }

        if (typeConfigFunc = PROPERTY_TYPES[config.type]) {
          typeConfig = typeConfigFunc(config);

          for (key in typeConfig) {
            val = typeConfig[key];

            if (!(key in config)) {
              config[key] = val;
            }
          }
        }

        config.constructor = this;
        config.internalName = itemUtils.getPropInternalName(config.name);

        config.implementation = function () {
          var ctorName, funcName, name;

          if (config.enabled === false) {
            return util.NOP;
          }

          ctorName = util.capitalize(itemName);
          name = util.capitalize(config.name);

          if (IS_NATIVE) {
            funcName = "rendererSet" + ctorName + name;
            return function (val) {
              return callNativeFunction(funcName, this._impl.id, val);
            };
          } else {
            funcName = "set" + ctorName + name;
            return function (val) {
              var ref1;
              return (ref1 = Impl[funcName]) != null ? ref1.call(this, val) : void 0;
            };
          }
        }();

        properties.push(config);
        return itemUtils.defineProperty(config);
      };

      Native.setPropertyValue = itemUtils.setPropertyValue;

      Native.addTypeImplementation = function (impl) {
        return Impl.addTypeImplementation(this.constructor.name, impl);
      };

      function Native() {
        var j, len, properties, property;

        Native.__super__.constructor.call(this);

        this._autoWidth = true;
        this._autoHeight = true;
        this._width = -1;
        this._height = -1;

        if (properties = this.constructor._properties) {
          for (j = 0, len = properties.length; j < len; j++) {
            property = properties[j];
            this[property.internalName] = property.defaultValue;
          }
        }

        return;
      }

      Native.prototype._width = -1;
      getter = util.lookupGetter(Native.prototype, 'width');
      itemWidthSetter = util.lookupSetter(Native.prototype, 'width');
      util.defineProperty(Native.prototype, 'width', null, getter, function (_super) {
        return function (val) {
          if (this._autoWidth = val === -1) {
            Impl.updateNativeSize.call(this);
          } else {
            _super.call(this, val);
          }
        };
      }(itemWidthSetter));
      Native.prototype._height = -1;
      getter = util.lookupGetter(Native.prototype, 'height');
      itemHeightSetter = util.lookupSetter(Native.prototype, 'height');
      util.defineProperty(Native.prototype, 'height', null, getter, function (_super) {
        return function (val) {
          if (this._autoHeight = val === -1) {
            Impl.updateNativeSize.call(this);
          } else {
            _super.call(this, val);
          }
        };
      }(itemHeightSetter));

      Native.prototype.set = function (name, val) {
        var ctorName, funcName, id, ref1;
        assert.isString(name, "NativeItem.set name must be a string, but " + name + " given");
        ctorName = util.capitalize(this.constructor.name);
        id = this._impl.id;
        name = util.capitalize(name);

        if (IS_NATIVE) {
          funcName = "rendererSet" + ctorName + name;
          callNativeFunction(funcName, id, val);
        } else {
          funcName = "set" + ctorName + name;

          if ((ref1 = Impl[funcName]) != null) {
            ref1.call(this, val);
          }
        }
      };

      Native.prototype.call = function () {
        var args, callArgs, ctorName, funcName, id, name, ref1;
        name = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        assert.isString(name, "NativeItem.call name must be a string, but " + name + " given");
        ctorName = util.capitalize(this.constructor.name);
        id = this._impl.id;
        name = util.capitalize(name);

        if (IS_NATIVE) {
          funcName = "rendererCall" + ctorName + name;
          callArgs = [funcName, id].concat(slice.call(args));
          callNativeFunction.apply(null, callArgs);
        } else {
          funcName = "call" + ctorName + name;

          if ((ref1 = Impl[funcName]) != null) {
            ref1.apply(this, args);
          }
        }
      };

      eventListeners = Object.create(null);

      createNativeEventListener = function (listeners, eventName) {
        return function (id) {
          var args, i, item, itemListeners, j, k, length, ref1, ref2;

          if (!(itemListeners = listeners[id])) {
            log.warn("Got a native event '" + eventName + "' for an item which " + "didn't register a listener on this event; check if you " + "properly call 'on()' method with a signal listener");
            return;
          }

          length = arguments.length;
          args = new Array(length - 1);

          for (i = j = 0, ref1 = length - 1; j < ref1; i = j += 1) {
            args[i] = arguments[i + 1];
          }

          item = itemListeners[0];

          for (i = k = 1, ref2 = itemListeners.length; k < ref2; i = k += 1) {
            itemListeners[i].apply(item, args);
          }
        };
      };

      Native.prototype.on = function (name, func) {
        var ctorName, eventName, itemListeners, listeners, name1, ref1;
        assert.isString(name, "NativeItem.on name must be a string, but " + name + " given");
        assert.isFunction(func, "NativeItem.on listener must be a function, but " + func + " given");
        name = util.capitalize(name);

        if (IS_NATIVE) {
          ctorName = util.capitalize(this.constructor.name);
          eventName = "rendererOn" + ctorName + name;

          if (!(listeners = eventListeners[eventName])) {
            listeners = eventListeners[eventName] = Object.create(null);
            onNativeEvent(eventName, createNativeEventListener(listeners, eventName));
          }

          itemListeners = listeners[name1 = this._impl.id] != null ? listeners[name1] : listeners[name1] = [this];
          itemListeners.push(func);
        } else {
          eventName = "on" + name;

          if ((ref1 = this._impl[eventName]) != null) {
            ref1.connect(func, this);
          }
        }
      };

      return Native;
    }(Renderer.Item);

    return Native;
  };
}).call(this);
},{"../../../util":"../../../node_modules/@neft/core/src/util/index.litcoffee","../../../log":"../../../node_modules/@neft/core/src/log/index.litcoffee","../../../assert":"../../../node_modules/@neft/core/src/assert/index.litcoffee","../../utils/color":"../../../node_modules/@neft/core/src/renderer/utils/color.coffee","../../../resources":"../../../node_modules/@neft/core/src/resources/index.litcoffee"}],"../../../node_modules/@neft/core/src/renderer/types/shapes/rectangle.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  var Resources, assert, log, utils,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  assert = require('../../../assert');

  utils = require('../../../util');

  log = require('../../../log');

  Resources = require('../../../resources');

  log = log.scope('Renderer', 'Rectangle');

  module.exports = function(Renderer, Impl, itemUtils) {
    var Border, DEFAULT_COLOR, Rectangle, getColor;
    DEFAULT_COLOR = 'transparent';
    getColor = (function() {
      var RESOURCE_REQUEST;
      RESOURCE_REQUEST = {
        property: 'color'
      };
      return function(val) {
        var ref1, rscVal;
        if (Resources.testUri(val)) {
          if (rscVal = (ref1 = Impl.resources) != null ? ref1.resolve(val, RESOURCE_REQUEST) : void 0) {
            return rscVal;
          } else {
            log.warn("Unknown resource given `" + val + "`");
            return DEFAULT_COLOR;
          }
        }
        return val;
      };
    })();
    Rectangle = (function(superClass) {
      extend(Rectangle, superClass);

      Rectangle.__name__ = 'Rectangle';

      Rectangle.__path__ = 'Renderer.Rectangle';

      Rectangle.New = function(opts) {
        var item;
        item = new Rectangle;
        itemUtils.Object.initialize(item, opts);
        return item;
      };

      function Rectangle() {
        Rectangle.__super__.constructor.call(this);
        this._color = DEFAULT_COLOR;
        this._radius = 0;
        this._border = null;
      }

      itemUtils.defineProperty({
        constructor: Rectangle,
        name: 'color',
        defaultValue: DEFAULT_COLOR,
        implementation: Impl.setRectangleColor,
        implementationValue: getColor,
        developmentSetter: function(val) {
          return assert.isString(val, "Rectangle.color needs to be a string, but " + val + " given");
        }
      });

      itemUtils.defineProperty({
        constructor: Rectangle,
        name: 'radius',
        defaultValue: 0,
        implementation: Impl.setRectangleRadius,
        developmentSetter: function(val) {
          return assert.isFloat(val, "Rectangle.radius needs to be a float, but " + val + " given");
        }
      });

      return Rectangle;

    })(Renderer.Item);
    Border = (function(superClass) {
      extend(Border, superClass);

      Border.__name__ = 'Border';

      itemUtils.defineProperty({
        constructor: Rectangle,
        name: 'border',
        valueConstructor: Border,
        developmentSetter: function(val) {
          return assert.isObject(val);
        },
        setter: function(_super) {
          return function(val) {
            var border;
            border = this.border;
            if (val.width != null) {
              border.width = val.width;
            }
            if (val.color != null) {
              border.color = val.color;
            }
            _super.call(this, val);
          };
        }
      });

      function Border(ref) {
        this._width = 0;
        this._color = DEFAULT_COLOR;
        Border.__super__.constructor.call(this, ref);
      }

      itemUtils.defineProperty({
        constructor: Border,
        name: 'width',
        defaultValue: 0,
        namespace: 'border',
        parentConstructor: Rectangle,
        implementation: Impl.setRectangleBorderWidth,
        developmentSetter: function(val) {
          return assert.isFloat(val, "Rectangle.border.width needs to be a float, but " + val + " given");
        }
      });

      itemUtils.defineProperty({
        constructor: Border,
        name: 'color',
        defaultValue: DEFAULT_COLOR,
        namespace: 'border',
        parentConstructor: Rectangle,
        implementation: Impl.setRectangleBorderColor,
        implementationValue: getColor,
        developmentSetter: function(val) {
          return assert.isString(val, "Rectangle.border.color needs to be a string, but " + val + " given");
        }
      });

      Border.prototype.toJSON = function() {
        return {
          width: this.width,
          color: this.color
        };
      };

      return Border;

    })(itemUtils.DeepObject);
    return Rectangle;
  };

}).call(this);

},{"../../../assert":"../../../node_modules/@neft/core/src/assert/index.litcoffee","../../../util":"../../../node_modules/@neft/core/src/util/index.litcoffee","../../../log":"../../../node_modules/@neft/core/src/log/index.litcoffee","../../../resources":"../../../node_modules/@neft/core/src/resources/index.litcoffee"}],"../../../node_modules/@neft/core/src/renderer/types/loader/font.litcoffee":[function(require,module,exports) {
(function() {
  'use strict';
  var assert, log, signal, utils;

  assert = require('../../../assert');

  utils = require('../../../util');

  log = require('../../../log');

  signal = require('../../../signal');

  log = log.scope('Renderer', 'FontLoader');

  module.exports = function(Renderer, Impl, itemUtils) {
    var FontLoader;
    return FontLoader = (function() {
      var WEIGHTS, fontsByName, getFontWeight, isItalic;

      fontsByName = Object.create(null);

      WEIGHTS = [/hairline/i, /thin/i, /ultra.*light/i, /extra.*light/i, /light/i, /book/i, /normal|regular|roman|plain/i, /medium/i, /demi.*bold|semi.*bold/i, /bold/i, /extra.*bold|extra/i, /heavy/i, /black/i, /extra.*black/i, /ultra.*black|ultra/i];

      getFontWeight = function(source) {
        var found, i, j, len, re;
        found = -1;
        for (i = j = 0, len = WEIGHTS.length; j < len; i = ++j) {
          re = WEIGHTS[i];
          if (re.test(source)) {
            found = i;
            if (i <= WEIGHTS.length / 2) {
              break;
            }
          }
        }
        if (found >= 0) {
          return found / (WEIGHTS.length - 1);
        }
        log.warn("Can't find font weight in the got source; `" + source + "` got");
        return 0.4;
      };

      isItalic = function(source) {
        return /italic|oblique/i.test(source);
      };

      FontLoader.getInternalFontName = function(name, weight, italic) {
        var closest, closestLeft, closestRight, i, j, k, obj, ref, ref1, ref2, result, weightInt;
        result = '';
        if (obj = fontsByName[name]) {
          if (!obj[italic]) {
            log.warn("Font '" + name + "' italic style is not loaded");
          }
          if (obj = obj[italic] || obj[!italic]) {
            weightInt = Math.round(weight * WEIGHTS.length);
            if (!(result = obj[weightInt])) {
              closestLeft = -1;
              for (i = j = ref = weightInt - 1; j >= 0; i = j += -1) {
                if (obj[i]) {
                  closestLeft = i;
                  break;
                }
              }
              closestRight = -1;
              for (i = k = ref1 = weightInt + 1, ref2 = WEIGHTS.length; k < ref2; i = k += 1) {
                if (obj[i]) {
                  closestRight = i;
                  break;
                }
              }
              if (closestLeft >= 0 && closestRight >= 0) {
                if (closestRight - weightInt < weightInt - closestLeft) {
                  closest = closestRight;
                } else {
                  closest = closestLeft;
                }
              } else if (closestLeft >= 0) {
                closest = closestLeft;
              } else if (closestRight >= 0) {
                closest = closestRight;
              }
              result = obj[closest];
            }
          }
        }
        return result;
      };

      function FontLoader(name1, source1) {
        this.name = name1;
        this.source = source1;
        assert.isString(this.name, "FontLoader.name needs to be a string, but " + this.name + " given");
        assert.notLengthOf(this.name, 0, "FontLoader.name cannot be an empty string");
        assert.isString(this.source, "FontLoader.source needs to be a string, but " + this.source + " given");
        assert.notLengthOf(this.source, 0, "FontLoader.source cannot be an empty string");
        Object.freeze(this);
      }

      FontLoader.prototype.load = function(callback) {
        var _, i, italic, italicStr, j, len, name, name1, obj, path, ref, ref1, ref2, rsc, source, sources, weight, weightInt;
        source = ((ref = Impl.resources) != null ? ref.resolve(this.source) : void 0) || this.source;
        if (rsc = (ref1 = Impl.resources) != null ? ref1.getResource(source) : void 0) {
          sources = [];
          ref2 = rsc.paths;
          for (_ in ref2) {
            path = ref2[_];
            sources.push(path[1]);
          }
        } else {
          sources = [source];
        }
        weight = 0.4;
        italic = false;
        for (i = j = 0, len = sources.length; j < len; i = ++j) {
          source = sources[i];
          if (weight !== (weight = getFontWeight(source)) && i > 0) {
            log.warn("'" + this.source + "' sources have different weights");
          }
          if (italic !== (italic = isItalic(source)) && i > 0) {
            log.warn("'" + this.source + "' sources have different 'italic' styles");
          }
        }
        weightInt = Math.round(weight * WEIGHTS.length);
        italicStr = italic ? 'italic' : 'normal';
        name = "neft-" + this.name + "-" + weightInt + "-" + italicStr;
        obj = fontsByName[name1 = this.name] != null ? fontsByName[name1] : fontsByName[name1] = {};
        obj = obj[italic] != null ? obj[italic] : obj[italic] = new Array(WEIGHTS.length);
        obj[weightInt] = name;
        Impl.loadFont(name, source, sources, callback);
      };

      return FontLoader;

    })();
  };

}).call(this);

},{"../../../assert":"../../../node_modules/@neft/core/src/assert/index.litcoffee","../../../util":"../../../node_modules/@neft/core/src/util/index.litcoffee","../../../log":"../../../node_modules/@neft/core/src/log/index.litcoffee","../../../signal":"../../../node_modules/@neft/core/src/signal/index.js"}],"../../../node_modules/@neft/core/src/renderer/index.js":[function(require,module,exports) {
const { SignalDispatcher } = require('../signal')
const assert = require('../assert')

exports.onReady = new SignalDispatcher()
exports.onWindowItemChange = new SignalDispatcher()

const Impl = require('./impl')(exports)

exports.Impl = {
  addTypeImplementation: Impl.addTypeImplementation,
  Types: Impl.Types,
  onWindowItemReady: Impl.onWindowItemReady,
  utils: Impl.utils,
}

const itemUtils = require('./utils/item')(exports, Impl)

exports.itemUtils = itemUtils

exports.sizeUtils = require('./utils/size')(exports)

exports.colorUtils = require('./utils/color')

exports.Screen = require('./types/namespace/screen')(exports, Impl, itemUtils)

exports.Device = require('./types/namespace/device')(exports, Impl, itemUtils)

exports.Navigator = require('./types/namespace/navigator')(exports, Impl, itemUtils)

exports.Extension = require('./types/extension')(exports, Impl, itemUtils)

exports.Class = require('./types/extensions/class')(exports, Impl, itemUtils)

exports.Animation = require('./types/extensions/animation')(exports, Impl, itemUtils)

exports.PropertyAnimation = require('./types/extensions/animation/types/property')(exports, Impl, itemUtils)

exports.NumberAnimation = require('./types/extensions/animation/types/property/types/number')(exports, Impl, itemUtils)

exports.SequentialAnimation = require('./types/extensions/animation/types/sequential')(exports, Impl, itemUtils)

exports.ParallelAnimation = require('./types/extensions/animation/types/parallel')(exports, Impl, itemUtils)

exports.Transition = require('./types/extensions/transition')(exports, Impl, itemUtils)

exports.Item = require('./types/basics/item')(exports, Impl, itemUtils)

exports.Image = require('./types/basics/image')(exports, Impl, itemUtils)

exports.Text = require('./types/basics/text')(exports, Impl, itemUtils)

exports.Native = require('./types/basics/native')(exports, Impl, itemUtils)

exports.Rectangle = require('./types/shapes/rectangle')(exports, Impl, itemUtils)

exports.FontLoader = require('./types/loader/font')(exports, Impl, itemUtils)

exports.setWindowItem = function (val) {
  assert.instanceOf(val, exports.Item)
  Impl.setWindow(val)
  exports.onWindowItemChange.emit(null)
}

exports.setServerUrl = function (val) {
  Impl.serverUrl = val
}

exports.setResources = function (val) {
  Impl.resources = val
}

exports.getResource = function (path) {
  return Impl.resources != null ? Impl.resources.getResource(path) : null
}

exports.loadFont = ({ name, source }) => new Promise((resolve, reject) => {
  const loader = new exports.FontLoader(name, source)
  loader.load((err) => {
    if (err) reject(err)
    else resolve()
  })
})

exports.onReady.emit()

},{"../signal":"../../../node_modules/@neft/core/src/signal/index.js","../assert":"../../../node_modules/@neft/core/src/assert/index.litcoffee","./impl":"../../../node_modules/@neft/core/src/renderer/impl.coffee","./utils/item":"../../../node_modules/@neft/core/src/renderer/utils/item.coffee","./utils/size":"../../../node_modules/@neft/core/src/renderer/utils/size.coffee","./utils/color":"../../../node_modules/@neft/core/src/renderer/utils/color.coffee","./types/namespace/screen":"../../../node_modules/@neft/core/src/renderer/types/namespace/screen.coffee","./types/namespace/device":"../../../node_modules/@neft/core/src/renderer/types/namespace/device.coffee","./types/namespace/navigator":"../../../node_modules/@neft/core/src/renderer/types/namespace/navigator.coffee","./types/extension":"../../../node_modules/@neft/core/src/renderer/types/extension.litcoffee","./types/extensions/class":"../../../node_modules/@neft/core/src/renderer/types/extensions/class.litcoffee","./types/extensions/animation":"../../../node_modules/@neft/core/src/renderer/types/extensions/animation.coffee","./types/extensions/animation/types/property":"../../../node_modules/@neft/core/src/renderer/types/extensions/animation/types/property.coffee","./types/extensions/animation/types/property/types/number":"../../../node_modules/@neft/core/src/renderer/types/extensions/animation/types/property/types/number.coffee","./types/extensions/animation/types/sequential":"../../../node_modules/@neft/core/src/renderer/types/extensions/animation/types/sequential.coffee","./types/extensions/animation/types/parallel":"../../../node_modules/@neft/core/src/renderer/types/extensions/animation/types/parallel.coffee","./types/extensions/transition":"../../../node_modules/@neft/core/src/renderer/types/extensions/transition.coffee","./types/basics/item":"../../../node_modules/@neft/core/src/renderer/types/basics/item.coffee","./types/basics/image":"../../../node_modules/@neft/core/src/renderer/types/basics/image.coffee","./types/basics/text":"../../../node_modules/@neft/core/src/renderer/types/basics/text.coffee","./types/basics/native":"../../../node_modules/@neft/core/src/renderer/types/basics/native.litcoffee","./types/shapes/rectangle":"../../../node_modules/@neft/core/src/renderer/types/shapes/rectangle.coffee","./types/loader/font":"../../../node_modules/@neft/core/src/renderer/types/loader/font.litcoffee"}],"../../../node_modules/@neft/core/src/document/use.js":[function(require,module,exports) {
const log = require('../log')
const assert = require('../assert')
const eventLoop = require('../event-loop')

class Use {
  constructor(document, element) {
    this.document = document
    this.element = document.element.getChildByAccessPath(element)

    this.name = ''
    this.refName = ''
    this.component = null

    this.hiddenDepth = 0
    this.immediateRenderPending = false
    this.onElementPropsChange = this.element.onPropsChange.asSignalDispatcher()

    this.element.onPropsChange.connect(this.handleElementPropsChange, this)

    let anyElement = this.element
    while (anyElement) {
      if ('n-if' in anyElement.props) {
        anyElement.onVisibleChange.connect(this.handleElementVisibleChange, this)
      }
      anyElement = anyElement.parent
    }
  }

  handleElementVisibleChange(oldValue) {
    const value = !oldValue
    const hiddenInc = value ? -1 : 1
    this.hiddenDepth += hiddenInc
    if (this.document.rendered && !this.component && this.hiddenDepth === 0) {
      this.renderImmediate()
    } else if (this.document.rendered && this.component && this.hiddenDepth > 0) {
      this.revert()
    }
  }

  handleElementPropsChange(propName) {
    if (propName !== 'n-component') return
    if (!this.document.rendered) return
    this.revert()
    this.renderImmediate()
  }

  renderImmediate() {
    if (this.immediateRenderPending) return
    this.immediateRenderPending = true
    eventLoop.setImmediate(() => {
      this.immediateRenderPending = false
      if (this.document.rendered && !this.component) this.render()
    })
  }

  render() {
    assert.notOk(this.component, '<n-use /> is already rendered')
    if (this.hiddenDepth > 0) return

    const name = this.element.props['n-component']
    if (!name) return
    const component = this.document.getComponent(name)
    if (!component) {
      log.warning(`Cannot find ${name} component to render`)
      return
    }

    component.render({
      context: this.document.context,
      props: this.element.props,
      onPropsChange: this.onElementPropsChange,
      sourceElement: this.element,
    })
    component.element.parent = this.element

    this.name = name
    this.refName = this.element.props['n-ref'] || this.element.props.ref
    this.component = component

    if (this.refName) {
      this.document.setRef(this.refName, component.exported)
    }
  }

  revert() {
    if (!this.component) return
    this.component.revert()
    this.component.element.parent = null
    this.document.returnComponent(this.name, this.component)
    if (this.refName) {
      this.document.deleteRef(this.refName)
    }
    this.name = ''
    this.refName = ''
    this.component = null
  }
}

module.exports = Use

},{"../log":"../../../node_modules/@neft/core/src/log/index.litcoffee","../assert":"../../../node_modules/@neft/core/src/assert/index.litcoffee","../event-loop":"../../../node_modules/@neft/core/src/event-loop/index.coffee"}],"../../../node_modules/@neft/core/src/document/log.js":[function(require,module,exports) {
/* eslint-disable no-console */
const utils = require('../util')
const eventLoop = require('../event-loop')
const { Text } = require('./element')

const listenOnTextChange = function (element, log) {
  if (element instanceof Text) {
    element.onTextChange.connect(log.renderOnChange, log)
  } else {
    element.children.forEach(child => listenOnTextChange(child, log))
  }
}

class Log {
  constructor(document, element) {
    this.document = document
    this.element = document.element.getChildByAccessPath(element)

    this.isRenderPending = false
    this.log = utils.bindFunctionContext(this.log, this)
    this.element.onPropsChange.connect(this.renderOnChange, this)
    listenOnTextChange(this.element, this)
  }

  renderOnChange() {
    if (this.document.rendered) {
      this.render()
    }
  }

  render() {
    if (!this.isRenderPending) {
      this.isRenderPending = true
      eventLoop.setImmediate(this.log)
    }
  }

  log() {
    this.isRenderPending = false
    if (utils.isEmpty(this.element.props)) {
      console.log(this.element.stringifyChildren())
    } else {
      const { props } = this.element
      const log = []
      const content = this.element.stringifyChildren()
      if (content) {
        log.push(content)
      }
      Object.entries(props).forEach(([key, value]) => {
        log.push(key, '=', value)
      })
      console.log(...log)
    }
  }
}

module.exports = Log

},{"../util":"../../../node_modules/@neft/core/src/util/index.litcoffee","../event-loop":"../../../node_modules/@neft/core/src/event-loop/index.coffee","./element":"../../../node_modules/@neft/core/src/document/element/index.coffee"}],"../../../node_modules/@neft/core/src/document/condition.js":[function(require,module,exports) {
class Condition {
  constructor(document, { element, elseElement }) {
    this.document = document
    this.element = document.element.getChildByAccessPath(element)
    this.elseElement = elseElement && document.element.getChildByAccessPath(elseElement)

    this.element.onPropsChange.connect(this.onPropsChange, this)
  }

  onPropsChange(name) {
    if (name === 'n-if') {
      this.update()
    }
  }

  update() {
    const { element, elseElement } = this
    const visible = !!element.props['n-if']
    element.visible = visible
    if (elseElement) {
      elseElement.visible = !visible
    }
  }

  render() {
    this.update()
  }

  revert() {
    // NOP
  }
}

module.exports = Condition

},{}],"../../../node_modules/@neft/core/src/document/input.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  var Binding, DocumentBinding, Input, SignalsEmitter, assert, eventLoop, log, utils,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  utils = require('../util');

  assert = require('../assert');

  log = require('../log');

  SignalsEmitter = require('../signal').SignalsEmitter;

  eventLoop = require('../event-loop');

  Binding = require('../binding');

  assert = assert.scope('View.Input');

  log = log.scope('View', 'Input');

  DocumentBinding = (function(superClass) {
    extend(DocumentBinding, superClass);

    DocumentBinding.New = function(binding, input, target) {
      if (target == null) {
        target = new DocumentBinding(binding, input);
      }
      return Binding.New(binding, input.target, target);
    };

    function DocumentBinding(binding, input1) {
      this.input = input1;
      DocumentBinding.__super__.constructor.call(this, binding, this.input.target);
    }

    DocumentBinding.prototype.getItemById = function(item) {
      if (item === 'this') {
        return this.ctx;
      }
    };

    //<development>;

    DocumentBinding.prototype.onError = function(err) {
      log.error("Failed `" + this.input.text + "` binding in file `" + this.input.document.path + "`: `" + err + "`");
    };

    //</development>;

    DocumentBinding.prototype.update = function() {
      if (!this.input.isRendered) {
        return;
      }
      eventLoop.lock();
      DocumentBinding.__super__.update.call(this);
      eventLoop.release();
    };

    DocumentBinding.prototype.getValue = function() {
      return this.input.getValue();
    };

    DocumentBinding.prototype.setValue = function(val) {
      return this.input.setValue(val);
    };

    return DocumentBinding;

  })(Binding);

  module.exports = Input = (function(superClass) {
    var initBindingConfig;

    extend(Input, superClass);

    initBindingConfig = function(cfg) {
      if (cfg.func == null) {
        cfg.func = new Function('self', cfg.body);
      }
      if (cfg.tree == null) {
        cfg.tree = [cfg.func, cfg.connections];
      }
    };

    function Input(document, element, interpolation, text) {
      this.document = document;
      this.interpolation = interpolation;
      this.text = text;
      Input.__super__.constructor.call(this);
      this.element = this.document.element.getChildByAccessPath(element);
      this.isRendered = false;
      this.target = null;
      this.binding = null;
      initBindingConfig(this.interpolation);
    }

    Input.prototype.render = function() {
      assert.isNotDefined(this.binding);
      this.target = this.document.exported;
      this.binding = DocumentBinding.New(this.interpolation.tree, this);
      this.isRendered = true;
      this.binding.update();
    };

    Input.prototype.revert = function() {
      this.binding.destroy();
      this.binding = null;
      this.isRendered = false;
    };

    return Input;

  })(SignalsEmitter);

}).call(this);

},{"../util":"../../../node_modules/@neft/core/src/util/index.litcoffee","../assert":"../../../node_modules/@neft/core/src/assert/index.litcoffee","../log":"../../../node_modules/@neft/core/src/log/index.litcoffee","../signal":"../../../node_modules/@neft/core/src/signal/index.js","../event-loop":"../../../node_modules/@neft/core/src/event-loop/index.coffee","../binding":"../../../node_modules/@neft/core/src/binding/index.coffee"}],"../../../node_modules/@neft/core/src/document/input/text.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  var Input, InputText,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Input = require('../input');

  module.exports = InputText = (function(superClass) {
    extend(InputText, superClass);

    function InputText(document, arg) {
      var element, interpolation, text;
      element = arg.element, interpolation = arg.interpolation, text = arg.text;
      InputText.__super__.constructor.call(this, document, element, interpolation, text);
    }

    InputText.prototype.getValue = function() {
      return this.element.text;
    };

    InputText.prototype.setValue = function(val) {
      if (val == null) {
        val = '';
      } else if (typeof val !== 'string') {
        val += '';
      }
      return this.element.text = val;
    };

    return InputText;

  })(Input);

}).call(this);

},{"../input":"../../../node_modules/@neft/core/src/document/input.coffee"}],"../../../node_modules/@neft/core/src/document/input/prop.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  var Input, InputProp, assert, utils,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  assert = require('../../assert');

  utils = require('../../util');

  Input = require('../input');

  module.exports = InputProp = (function(superClass) {
    var createHandlerFunc, isHandler;

    extend(InputProp, superClass);

    InputProp.isHandler = isHandler = function(node, prop) {
      if (/(?:^|:)on[A-Z][A-Za-z0-9_$]*$/.test(prop)) {
        return true;
      } else {
        return false;
      }
    };

    function InputProp(document, arg) {
      var element, interpolation, text;
      element = arg.element, this.prop = arg.prop, interpolation = arg.interpolation, text = arg.text;
      InputProp.__super__.constructor.call(this, document, element, interpolation, text);
      if (isHandler(this.element, this.prop)) {
        this.handlerFunc = createHandlerFunc(this);
        this.element.props.set(this.prop, this.handlerFunc);
      } else {
        this.handlerFunc = null;
      }
    }

    InputProp.prototype.getValue = function() {
      return this.element.props[this.prop];
    };

    InputProp.prototype.setValue = function(val) {
      return this.element.props.set(this.prop, val);
    };

    InputProp.prototype.render = function() {
      if (!this.handlerFunc) {
        return InputProp.__super__.render.call(this);
      }
    };

    InputProp.prototype.revert = function() {
      if (!this.handlerFunc) {
        return InputProp.__super__.revert.call(this);
      }
    };

    createHandlerFunc = function(input) {
      return function() {
        var r;
        if (!input.document.rendered) {
          return;
        }
        r = input.interpolation.func.call(input.document.exported, this);
        if (typeof r === 'function') {
          r = r.apply(this, arguments);
        }
        return r;
      };
    };

    return InputProp;

  })(Input);

}).call(this);

},{"../../assert":"../../../node_modules/@neft/core/src/assert/index.litcoffee","../../util":"../../../node_modules/@neft/core/src/util/index.litcoffee","../input":"../../../node_modules/@neft/core/src/document/input.coffee"}],"../../../node_modules/@neft/core/src/struct/index.js":[function(require,module,exports) {
const util = require('../util')
const assert = require('../assert')
const eventLoop = require('../event-loop')
const { SignalsEmitter } = require('../signal')

const privatePropOpts = util.CONFIGURABLE | util.WRITABLE
const propOpts = util.CONFIGURABLE | util.ENUMERABLE

const createProperty = (struct, key, value) => {
  const privateKey = `_${key}`
  const signalName = `on${util.capitalize(key)}Change`
  util.defineProperty(struct, privateKey, privatePropOpts, value)
  SignalsEmitter.createSignal(struct, signalName)
  const getter = function () {
    return this[privateKey]
  }
  const setter = function (newValue) {
    const oldVal = this[privateKey]
    if (newValue === oldVal) return
    this[privateKey] = newValue
    this.emit(signalName, oldVal)
  }
  util.defineProperty(struct, key, propOpts, getter, eventLoop.bindInLock(setter))
}

class Struct extends SignalsEmitter {
  constructor(obj) {
    super()

    assert.instanceOf(this, Struct, "Constructor Struct requires 'new'")

    if (util.isPlainObject(obj)) {
      Object.keys(obj).forEach((key) => {
        createProperty(this, key, obj[key])
      })
    }

    if (this.constructor === Struct) {
      Object.seal(this)
    }
  }
}

module.exports = Struct

},{"../util":"../../../node_modules/@neft/core/src/util/index.litcoffee","../assert":"../../../node_modules/@neft/core/src/assert/index.litcoffee","../event-loop":"../../../node_modules/@neft/core/src/event-loop/index.coffee","../signal":"../../../node_modules/@neft/core/src/signal/index.js"}],"../../../node_modules/@neft/core/src/document/script.js":[function(require,module,exports) {
const util = require('../util')
const Struct = require('../struct')
const { SignalsEmitter } = require('../signal')

const PROP_OPTS = 0

class ScriptExported extends Struct {
  constructor(document, obj) {
    super(obj)
    util.defineProperty(this, '$element', PROP_OPTS, document.element)
    util.defineProperty(this, '$refs', PROP_OPTS, document.refs)
    util.defineProperty(this, '$context', PROP_OPTS, () => document.context, null)
  }
}

util.defineProperty(ScriptExported.prototype, 'constructor', PROP_OPTS, ScriptExported)

SignalsEmitter.createSignal(ScriptExported, 'on$RefsChange')

class Script {
  constructor(document, script) {
    class ComponentScript extends ScriptExported {}

    this.document = document
    this.produceInstanceFields = null
    this.ExportedConstructor = ComponentScript

    if (typeof script === 'function') {
      this.produceInstanceFields = script
    } else if (util.isObject(script)) {
      Object.keys(script).forEach((key) => {
        if (key !== 'default') ComponentScript.prototype[key] = script[key]
      })
      if (typeof script.default === 'function') {
        this.produceInstanceFields = script.default
      } else {
        this.produceInstanceFields = () => script.default
      }
    } else {
      this.produceInstanceFields = () => null
    }
  }

  produceExported() {
    // produce object with combined static methods and instance fields
    const object = this.produceInstanceFields() || {}

    // add props
    Object.keys(this.document.props).forEach((prop) => {
      if (!(prop in object)) {
        object[prop] = null
      }
    })

    // create struct
    const exported = new this.ExportedConstructor(this.document, object)

    // bind instance methods
    Object.keys(object).forEach((field) => {
      if (typeof object[field] === 'function') {
        exported[field] = exported[field].bind(exported)
      }
    })

    return exported
  }

  afterRender() {
    if (typeof this.document.exported.onRender === 'function') {
      this.document.exported.onRender()
    }
  }

  beforeRevert() {
    if (typeof this.document.exported.onRevert === 'function') {
      this.document.exported.onRevert()
    }
  }
}

module.exports = Script

},{"../util":"../../../node_modules/@neft/core/src/util/index.litcoffee","../struct":"../../../node_modules/@neft/core/src/struct/index.js","../signal":"../../../node_modules/@neft/core/src/signal/index.js"}],"../../../node_modules/@neft/core/src/document/slot.js":[function(require,module,exports) {
class Slot {
  constructor(document, element) {
    this.document = document
    this.element = document.element.getChildByAccessPath(element)
    this.sourceElement = null
  }

  render(sourceElement) {
    if (!sourceElement) return
    this.sourceElement = sourceElement
    sourceElement.children.forEach((child) => {
      child.parent = this.element
    })
  }

  revert() {
    if (!this.sourceElement) return
    this.element.children.forEach((child) => {
      child.parent = this.sourceElement
    })
    this.sourceElement = null
  }
}

module.exports = Slot

},{}],"../../../node_modules/@neft/core/src/document/iterator.js":[function(require,module,exports) {
const util = require('../util')
const assert = require('../assert')
const eventLoop = require('../event-loop')
const ObservableArray = require('../observable-array')

class Iterator {
  constructor(document, { element, component, naming }) {
    this.document = document
    this.element = document.element.getChildByAccessPath(element)
    this.component = component
    this.naming = naming

    this.data = null
    this.pool = []
    this.usedComponents = []
    this.refs = {}
    this.hiddenDepth = 0
    this.immediateRenderPending = false
    this.componentListeners = {
      refSet: this.setRef.bind(this),
      refDelete: this.deleteRef.bind(this),
    }

    this.element.onPropsChange.connect(this.handleElementPropsChange, this)

    let anyElement = this.element
    while (anyElement) {
      if ('n-if' in anyElement.props) {
        anyElement.onVisibleChange.connect(this.handleElementVisibleChange, this)
      }
      anyElement = anyElement.parent
    }
  }

  handleElementVisibleChange(oldValue) {
    const value = !oldValue
    const hiddenInc = value ? -1 : 1
    this.hiddenDepth += hiddenInc
    if (this.document.rendered && this.data === null && this.hiddenDepth === 0) {
      this.renderImmediate()
    } else if (this.document.rendered && this.data !== null && this.hiddenDepth > 0) {
      this.revert()
    }
  }

  handleElementPropsChange(propName) {
    if (propName !== 'n-for') return
    if (!this.document.rendered) return
    this.revert()
    this.renderImmediate()
  }

  setRef(name, value) {
    let array = this.document.refs[name]
    if (!array) {
      array = new ObservableArray()
      this.document.setRef(name, array)
    }
    array.push(value)
  }

  deleteRef(name, value) {
    const array = this.document.refs[name]
    if (Array.isArray(array)) {
      util.remove(array, value)
    }
  }

  forEachComponentBaseRef(component, func) {
    const refs = Object.getPrototypeOf(component.refs)
    Object.keys(refs).forEach((ref) => { this[func](ref, refs[ref]) })
  }

  renderImmediate() {
    if (this.immediateRenderPending) return
    this.immediateRenderPending = true
    eventLoop.setImmediate(() => {
      this.immediateRenderPending = false
      if (this.document.rendered && !this.data) this.render()
    })
  }

  render() {
    if (this.hiddenDepth > 0) return
    const data = this.element.props['n-for']

    // stop if nothing changed
    if (data === this.data) return

    // stop if no data found
    if (!Array.isArray(data)) return

    // set as data
    this.data = data

    // listen on changes
    if (data instanceof ObservableArray) {
      data.onPush.connect(this.insertItem, this)
      data.onPop.connect(this.popItem, this)
    }

    // add items
    data.forEach(this.insertItem, this)
  }

  revert() {
    const { data } = this
    if (data) {
      this.popAllItems()
      if (data instanceof ObservableArray) {
        data.onPush.disconnect(this.insertItem, this)
        data.onPop.disconnect(this.popItem, this)
      }
    }
    this.data = null
  }

  updateItem(elem, index = elem) {
    assert.isObject(this.data)
    assert.isInteger(index)
    this.popItem(index)
    this.insertItem(index)
  }

  getComponent() {
    if (this.pool.length) return this.pool.pop()
    const component = this.component({
      parent: this.document,
      root: false,
    })
    return component
  }

  insertItem(elem, index = elem) {
    assert.isObject(this.data)
    assert.isInteger(index)

    const { data, naming } = this
    const usedComponent = this.getComponent()
    const exported = Object.create(this.document.exported)

    this.usedComponents.splice(index, 0, usedComponent)

    if (naming.item) exported[naming.item] = data[index]
    if (naming.index) exported[naming.index] = index
    if (naming.array) exported[naming.array] = data

    const newChild = usedComponent.element
    newChild.parent = this.element
    newChild.index = index
    this.forEachComponentBaseRef(usedComponent, 'setRef')
    usedComponent.render({
      exported,
      context: this.document.context,
      listeners: this.componentListeners,
    })
  }

  popItem(elem, index = elem) {
    assert.isObject(this.data)
    assert.isInteger(index)
    const usedComponent = this.usedComponents[index]
    this.forEachComponentBaseRef(usedComponent, 'deleteRef')
    if (usedComponent.rendered) usedComponent.revert()
    usedComponent.element.parent = null
    this.pool.push(usedComponent)
    this.usedComponents.splice(index, 1)
  }

  popAllItems() {
    assert.isObject(this.data)
    while (this.usedComponents.length) {
      this.popItem(this.usedComponents.length - 1)
    }
  }
}

module.exports = Iterator

},{"../util":"../../../node_modules/@neft/core/src/util/index.litcoffee","../assert":"../../../node_modules/@neft/core/src/assert/index.litcoffee","../event-loop":"../../../node_modules/@neft/core/src/event-loop/index.coffee","../observable-array":"../../../node_modules/@neft/core/src/observable-array/index.js"}],"../../../node_modules/@neft/core/src/document/style-item.coffee":[function(require,module,exports) {
(function() {
  'use strict';
  var DEFAULT_PROP_ALIASES, InputProp, PROPS_CLASS_PRIORITY, PROP_PREFIX, Renderer, STYLE_ID_PROP, Signal, StyleItem, Tag, Text, assert, eventLoop, log, ref, utils;

  assert = require('../assert');

  utils = require('../util');

  Signal = require('../signal/signal').Signal;

  log = require('../log');

  eventLoop = require('../event-loop');

  Renderer = require('../renderer');

  InputProp = require('./input/prop');

  ref = require('./element'), Tag = ref.Tag, Text = ref.Text;

  log = log.scope('Styles');

  PROPS_CLASS_PRIORITY = 9999;

  PROP_PREFIX = 'style:';

  STYLE_ID_PROP = 'n-style';

  DEFAULT_PROP_ALIASES = {
    onClick: 'pointer:onClick',
    onPress: 'pointer:onPress',
    onRelease: 'pointer:onRelease',
    onMove: 'pointer:onMove'
  };

  module.exports = StyleItem = (function() {
    var findItemWithParent, isHandler;

    isHandler = InputProp.isHandler;

    function StyleItem(document, arg, parent1) {
      var children, element, styleAttr;
      this.document = document;
      element = arg.element, children = arg.children;
      this.parent = parent1 != null ? parent1 : null;
      this.element = this.document.element.getChildByAccessPath(element);
      this.children = children != null ? children.map((function(_this) {
        return function(child) {
          return new StyleItem(_this.document, child, _this);
        };
      })(this)) : void 0;
      this.item = null;
      this.propsClass = null;
      this.scope = null;
      if (this.element instanceof Tag) {
        styleAttr = this.element.props[STYLE_ID_PROP];
        this.isAutoParent = !/^(.+?)\:(.+?)$/.test(styleAttr);
      } else {
        this.isAutoParent = true;
      }
      this.element._documentStyle = this;
      if (!this.parent) {
        this.createItemDeeply();
      }
      Object.seal(this);
    }

    StyleItem.prototype.createClassWithPriority = function(priority) {
      var r;
      assert.ok(this.item);
      r = Renderer.Class.New();
      r.target = this.item;
      if (priority != null) {
        r.priority = priority;
      }
      return r;
    };

    StyleItem.prototype.updateText = function() {
      this.item.text = this.element.text;
    };

    StyleItem.prototype.setPropsClassAttribute = function(attr, val) {
      var propsClass;
      assert.instanceOf(this, StyleItem);
      if (!this.propsClass) {
        this.propsClass = this.createClassWithPriority(PROPS_CLASS_PRIORITY);
      }
      propsClass = this.propsClass;
      if (propsClass.changes._attributes[attr] === val) {
        return;
      }
      propsClass.running = false;
      propsClass.changes.setAttribute(attr, val);
      propsClass.running = true;
    };

    StyleItem.prototype.setProp = (function() {
      var getInternalProperty, getPropWithoutPrefix, getPropertyPath, getSplitProp, isStyleProp;
      isStyleProp = function(prop) {
        return prop.startsWith(PROP_PREFIX);
      };
      getPropWithoutPrefix = function(prop) {
        return prop.slice(PROP_PREFIX.length);
      };
      getSplitProp = (function() {
        var cache;
        cache = Object.create(null);
        return function(prop) {
          return cache[prop] || (cache[prop] = prop.split(':'));
        };
      })();
      getPropertyPath = (function() {
        var cache;
        cache = Object.create(null);
        return function(prop) {
          return cache[prop] || (cache[prop] = prop.replace(/:/g, '.'));
        };
      })();
      getInternalProperty = (function() {
        var cache;
        cache = Object.create(null);
        return function(prop) {
          return cache[prop] || (cache[prop] = "_" + prop);
        };
      })();
      return function(prop, val, oldVal) {
        var alias, i, internalProp, j, lastPart, obj, parts, ref1;
        assert.instanceOf(this, StyleItem);
        if (prop.startsWith('n-')) {
          return false;
        }
        if (isStyleProp(prop)) {
          prop = getPropWithoutPrefix(prop);
        } else if (this.element.constructor._styleAliasesByName) {
          parts = getSplitProp(prop);
          alias = this.element.constructor._styleAliasesByName[parts[0]];
          if (alias) {
            prop = alias.styleName;
          } else {
            return false;
          }
        } else {
          prop = DEFAULT_PROP_ALIASES[prop];
          if (!prop) {
            return false;
          }
        }
        parts = getSplitProp(prop);
        obj = this.item;
        if (!obj) {
          return;
        }
        for (i = j = 0, ref1 = parts.length - 1; j < ref1; i = j += 1) {
          if (!(obj = obj[parts[i]])) {
            return false;
          }
        }
        lastPart = utils.last(parts);
        if (!(lastPart in obj)) {
          return false;
        }
        internalProp = getInternalProperty(lastPart);
        if (obj[lastPart] instanceof Signal) {
          if (typeof oldVal === 'function') {
            obj[lastPart].disconnect(oldVal, this.element);
          }
          if (typeof val === 'function') {
            obj[lastPart].connect(val, this.element);
          }
        } else {
          this.setPropsClassAttribute(getPropertyPath(prop), val);
        }
        return true;
      };
    })();

    StyleItem.prototype.findAndSetVisibility = function() {
      var element, tmp;
      assert.isDefined(this.item);
      element = this.element;
      tmp = element;
      while (tmp) {
        if (tmp._documentStyle && tmp !== element) {
          break;
        }
        if (!tmp.visible) {
          this.setVisibility(false);
          break;
        }
        tmp = tmp.parent;
      }
    };


    /*
    Sets the item visibility.
     */

    StyleItem.prototype.setVisibility = function(val) {
      assert.isBoolean(val);
      if (this.item) {
        this.setPropsClassAttribute('visible', val);
      }
    };


    /*
    Creates and initializes renderer item based on the element 'n-style' attribute.
    The style element 'n-style' attribute may be:
        - a 'Renderer.Item' instance - item will be used as is,
        - a string in format:
            - File, Style, SubId,
            - File, Style.
    
    The newly created or found item is initialized.
     */

    StyleItem.prototype.createItem = function() {
      var element, file, id, isMainItem, key, parent, parentStyle, ref1, ref2, ref3, scope, style, subid;
      assert.isNotDefined(this.item, "Can't create a style item, because it already exists");
      assert.isNotDefined(this.element.style, 'Can\'t create a style item, because the element already has a style');
      element = this.element;
      isMainItem = true;
      if (element instanceof Tag) {
        id = element.props[STYLE_ID_PROP];
        assert.isDefined(id, "Tag must specify " + STYLE_ID_PROP + " prop to create an item for it");
      } else if (element instanceof Text) {
        id = Renderer.Text.New();
      }
      if (id instanceof Renderer.Item) {
        this.item = id;
        this.isAutoParent = !id.parent;
      } else if (Array.isArray(id)) {
        file = id[0], style = id[1], subid = id[2];
        if (subid) {
          isMainItem = false;
          parent = this.parent;
          while (true) {
            parentStyle = parent != null ? parent.element.props[STYLE_ID_PROP] : void 0;
            if (parentStyle && parentStyle[0] === file && parentStyle[1] === style) {
              scope = parent.scope;
              this.item = scope != null ? scope.objects[subid] : void 0;
            }
            if (this.item || !parent) {
              break;
            }
            parent = parent.parent;
          }
          if (!this.item) {
            log.warn("Can't find `" + id + "` style item");
            return;
          }
        } else {
          this.scope = (ref1 = this.document.style[file]) != null ? typeof ref1[style] === "function" ? ref1[style]() : void 0 : void 0;
          this.scope || (this.scope = (ref2 = this.document.parent) != null ? (ref3 = ref2.style[file]) != null ? typeof ref3[style] === "function" ? ref3[style]() : void 0 : void 0 : void 0);
          if (this.scope) {
            this.item = this.scope.item;
          } else {
            log.warn("Style file `" + id + "` can't be find");
          }
        }
      } else {
        throw new Error("Unexpected n-style; '" + id + "' given");
      }
      if (this.item) {
        this.isAutoParent = !this.item.parent;
        this.findAndSetVisibility();
        if (element instanceof Text) {
          this.updateText();
        }
        if (element instanceof Tag) {
          for (key in element.props) {
            if (isHandler(this.element, key)) {
              this.setProp(key, element.props[key], null);
            }
          }
        }
        if (this.isAutoParent) {
          this.findItemParent();
        } else if (isMainItem) {
          this.findItemIndex();
        }
        element.style = this.item;
        this.item.element = element;
      }
    };


    /*
    Create an item for this style and for children recursively.
    Item may not be created if it won't be used, that is:
        - parent is a text style.
     */

    StyleItem.prototype.createItemDeeply = eventLoop.bindInLock(function() {
      var child, j, len, ref1;
      this.createItem();
      if (this.children) {
        ref1 = this.children;
        for (j = 0, len = ref1.length; j < len; j++) {
          child = ref1[j];
          child.createItemDeeply();
        }
      }
    });

    StyleItem.prototype.findItemParent = function() {
      var element, item, style, tmpNode;
      if (!this.isAutoParent) {
        return false;
      }
      element = this.element;
      tmpNode = element.parent;
      while (tmpNode) {
        if (style = tmpNode._documentStyle) {
          if (item = style.item) {
            this.item.parent = item;
            break;
          }
        }
        tmpNode = tmpNode.parent;
      }
      if (!item) {
        this.item.parent = null;
        return false;
      }
      return true;
    };

    StyleItem.prototype.setItemParent = function(val) {
      if (this.isAutoParent && this.item) {
        this.item.parent = val;
        this.findItemIndex();
      }
    };

    findItemWithParent = function(item, parent) {
      var tmp, tmpParent;
      tmp = item;
      while (tmp && (tmpParent = tmp._parent)) {
        if (tmpParent === parent) {
          return tmp;
        }
        tmp = tmpParent;
      }
    };

    StyleItem.prototype.findItemIndex = function() {
      var child, element, item, parent, ref1, ref2, ref3, targetChild, tmpIndexNode, tmpSiblingDocStyle, tmpSiblingItem, tmpSiblingNode, tmpSiblingTargetItem;
      ref1 = this, element = ref1.element, item = ref1.item;
      if (!(parent = item.parent)) {
        return false;
      }
      tmpIndexNode = element;
      parent = ((ref2 = parent._children) != null ? ref2._target : void 0) || parent;
      tmpSiblingNode = tmpIndexNode;
      while (tmpIndexNode) {
        while (tmpSiblingNode) {
          if (tmpSiblingNode !== element) {
            tmpSiblingDocStyle = tmpSiblingNode._documentStyle;
            if (tmpSiblingDocStyle && tmpSiblingDocStyle.isAutoParent) {
              if (tmpSiblingItem = tmpSiblingDocStyle.item) {
                if (tmpSiblingTargetItem = findItemWithParent(tmpSiblingItem, parent)) {
                  if (item !== tmpSiblingTargetItem) {
                    item.previousSibling = tmpSiblingTargetItem;
                  }
                  return true;
                }
              }
            } else if (!tmpSiblingDocStyle) {
              tmpIndexNode = tmpSiblingNode;
              tmpSiblingNode = utils.last(tmpIndexNode.children);
              continue;
            }
          }
          tmpSiblingNode = tmpSiblingNode._previousSibling;
        }
        if (tmpIndexNode !== element && tmpIndexNode.style) {
          return true;
        }
        if (tmpSiblingNode = tmpIndexNode._previousSibling) {
          tmpIndexNode = tmpSiblingNode;
        } else if (tmpIndexNode = tmpIndexNode._parent) {
          if (((ref3 = tmpIndexNode._documentStyle) != null ? ref3.item : void 0) === parent) {
            targetChild = null;
            child = parent.children.firstChild;
            while (child) {
              if (child !== item && child.element) {
                targetChild = child;
                break;
              }
              child = child.nextSibling;
            }
            item.nextSibling = targetChild;
            return true;
          }
        }
      }
      return false;
    };

    StyleItem.prototype.render = function() {
      var j, key, len, ref1, style;
      if (this.element instanceof Tag) {
        for (key in this.element.props) {
          if (!isHandler(this.element, key)) {
            this.setProp(key, this.element.props[key], null);
          }
        }
      }
      if (this.children) {
        ref1 = this.children;
        for (j = 0, len = ref1.length; j < len; j++) {
          style = ref1[j];
          style.render();
        }
      }
    };

    StyleItem.prototype.revert = function() {};

    return StyleItem;

  })();

}).call(this);

},{"../assert":"../../../node_modules/@neft/core/src/assert/index.litcoffee","../util":"../../../node_modules/@neft/core/src/util/index.litcoffee","../signal/signal":"../../../node_modules/@neft/core/src/signal/signal.js","../log":"../../../node_modules/@neft/core/src/log/index.litcoffee","../event-loop":"../../../node_modules/@neft/core/src/event-loop/index.coffee","../renderer":"../../../node_modules/@neft/core/src/renderer/index.js","./input/prop":"../../../node_modules/@neft/core/src/document/input/prop.coffee","./element":"../../../node_modules/@neft/core/src/document/element/index.coffee"}],"../../../node_modules/@neft/core/src/document/index.js":[function(require,module,exports) {
const util = require('../util');

const assert = require('../assert');

const eventLoop = require('../event-loop');

const Renderer = require('../renderer');

const log = require('../log');

const Use = require('./use');

const Log = require('./log');

const Condition = require('./condition');

const TextInput = require('./input/text');

const PropInput = require('./input/prop');

const Script = require('./script');

const Slot = require('./slot');

const Iterator = require('./iterator');

const StyleItem = require('./style-item');

const parseImports = imports => {
  Object.keys(imports).forEach(name => {
    const file = imports[name];

    if (typeof file === 'object' && file != null) {
      imports[name] = file.default;
    }
  });
  return imports;
};

const parseRefs = (refs, element) => Object.create(Object.keys(refs).reduce((result, key) => {
  result[key] = element.getChildByAccessPath(refs[key]);
  return result;
}, {}));

const mapToTypes = (Type, list, document) => {
  if (list) return list.map(opts => new Type(document, opts));
  return [];
};

const createInitLocalPool = components => {
  const pool = {};
  Object.keys(components).forEach(key => {
    pool[key] = [];
  });
  return pool;
};

const isInternalProp = prop => prop[0] === 'n' && prop[1] === '-' || prop === 'ref';

const attachStyles = (styles, element) => {
  Object.values(styles).forEach(style => {
    const {
      selects
    } = style;
    if (!selects) return;
    selects.forEach(selectGen => {
      const {
        select
      } = selectGen();
      select.target = new Renderer.Class.ElementTarget(element);
      select.running = true;
    });
  });
};

const documents = Object.create(null);
const globalPool = Object.create(null);
const localPool = Symbol('localPool');
const renderProps = Symbol('renderProps');
const renderOnPropsChange = Symbol('renderOnPropsChange');
const renderSourceElement = Symbol('renderSourceElement');
const renderListeners = Symbol('renderListeners');
const callRenderListener = Symbol('callRenderListener');
let instances;
let saveInstance;

if ("development" === 'development') {
  instances = {};

  saveInstance = document => {
    const {
      path
    } = document;
    instances[path] = instances[path] || [];
    instances[path].push(document);
  };
}

class Document {
  constructor(path, config, options) {
    assert.isString(path);
    assert.notLengthOf(path, 0);
    this.path = path;
    this.parent = options && options.parent || null;
    this.element = config.element;
    this.imports = config.imports ? parseImports(config.imports) : {};
    this.components = config.components || {};
    this.refs = config.refs ? parseRefs(config.refs, this.element) : {};
    this.props = config.props || {};
    this.script = new Script(this, config.script);
    this.exported = null;
    this.root = options && options.root != null ? options.root : true;
    this.inputs = mapToTypes(TextInput, config.textInputs, this).concat(mapToTypes(PropInput, config.propInputs, this));
    this.conditions = mapToTypes(Condition, config.conditions, this);
    this.iterators = mapToTypes(Iterator, config.iterators, this);
    this.logs = mapToTypes(Log, config.logs, this);
    this.style = config.style || {};
    this.styleItems = mapToTypes(StyleItem, config.styleItems, this);
    this.slot = config.slot ? new Slot(this, config.slot) : null;
    this.uses = mapToTypes(Use, config.uses, this);
    this.context = null;
    this.rendered = false;
    this[localPool] = createInitLocalPool(this.components);
    this[renderProps] = null;
    this[renderOnPropsChange] = null;
    this[renderSourceElement] = null;
    this[renderListeners] = null;
    this.uid = util.uid();
    Object.seal(this);

    if ("development" === 'development') {
      saveInstance(this);
    }

    attachStyles(this.style, this.element);
  }

  [callRenderListener](name, arg1, arg2) {
    const listeners = this[renderListeners];

    if (listeners && typeof listeners[name] === 'function') {
      listeners[name](arg1, arg2);
    }
  }

  getComponent(name) {
    const imported = this.imports[name];

    if (imported) {
      const pool = globalPool[imported];
      if (pool.length > 0) return pool.pop();
      return documents[imported].constructor();
    }

    const local = this.components[name];

    if (local) {
      const pool = this[localPool][name];
      if (pool.length > 0) return pool.pop();
      return local({
        parent: this
      });
    }

    return this.parent ? this.parent.getComponent(name) : null;
  }

  returnComponent(name, component) {
    assert.notOk(component.rendered, 'Cannot return rendered component');
    const imported = this.imports[name];

    if (imported) {
      globalPool[imported].push(component);
      return;
    }

    const local = this.components[name];

    if (local) {
      this[localPool][name].push(component);
      return;
    }

    if (this.parent) {
      this.parent.returnComponent(name, component);
    } else {
      throw new Error('Unknown component given to return');
    }
  }

  reloadProp(name) {
    if (isInternalProp(name)) return;

    if (!this.props[name]) {
      log.warn(`Trying to set unknown \`${name}\` prop on component \`${this.path}\``);
      return;
    }

    this.exported[name] = this[renderProps][name];
  }

  setRef(ref, value) {
    if (!value) return;
    const oldValue = this.refs[ref];
    if (oldValue) this[callRenderListener]('refDelete', ref, oldValue);
    this.refs[ref] = value;
    this[callRenderListener]('refSet', ref, value);
    this.exported.emit('on$RefsChange');
  }

  deleteRef(ref) {
    const oldValue = this.refs[ref];
    delete this.refs[ref];
    this[callRenderListener]('refDelete', ref, oldValue);
    this.exported.emit('on$RefsChange');
  }

  render({
    context = null,
    props = null,
    onPropsChange,
    sourceElement = null,
    listeners = null,
    exported = null
  } = {}) {
    assert.notOk(this.rendered, 'Document is already rendered');
    this.exported = exported === null ? this.script.produceExported() : exported;
    this.context = context;

    if (typeof props === 'object' && props !== null) {
      this[renderProps] = props;
      Object.keys(props).forEach(this.reloadProp, this);
    }

    if (onPropsChange && typeof onPropsChange.connect === 'function') {
      this[renderOnPropsChange] = onPropsChange;
      onPropsChange.connect(this.reloadProp, this);
    }

    this[renderSourceElement] = sourceElement;
    this[renderListeners] = listeners;
    this.inputs.forEach(input => input.render());
    this.conditions.forEach(condition => condition.render());
    this.uses.forEach(use => use.render());
    this.iterators.forEach(iterator => iterator.render());
    if (this.slot) this.slot.render(sourceElement);
    this.styleItems.forEach(styleItem => styleItem.render());
    this.logs.forEach(docLog => docLog.render());
    this.rendered = true;
    if (this.root) this.script.afterRender();
  }

  revert() {
    assert.ok(this.rendered, 'Document is not rendered');
    if (this.root) this.script.beforeRevert();
    this[renderProps] = null;

    if (this[renderOnPropsChange]) {
      this[renderOnPropsChange].disconnect(this.reloadProp, this);
      this[renderOnPropsChange] = null;
    }

    this[renderSourceElement] = null;
    this.inputs.forEach(input => input.revert());
    this.conditions.forEach(condition => condition.revert());
    this.uses.forEach(use => use.revert());
    this.iterators.forEach(iterator => iterator.revert());
    if (this.slot) this.slot.revert();
    this.styleItems.forEach(styleItem => styleItem.revert());
    this.rendered = false;
    this[renderListeners] = null;
    this.exported = null;
  }

}

Document.prototype.render = eventLoop.bindInLock(Document.prototype.render);
Document.prototype.revert = eventLoop.bindInLock(Document.prototype.revert);

Document.register = (path, constructor, {
  dependencies
}) => {
  documents[path] = {
    constructor,
    dependencies
  };
  globalPool[path] = [];
};

Document.getComponentConstructorOf = path => {
  const config = documents[path];
  return config ? config.constructor : null;
};

if ("development" === 'development') {
  Document.reload = path => {
    instances[path] = [];
    globalPool[path] = [];
    Object.keys(documents).filter(docPath => documents[docPath].dependencies.includes(path)).forEach(docPath => {
      instances[docPath].filter(doc => doc.rendered).forEach(doc => {
        eventLoop.callInLock(() => {
          const {
            context,
            exported
          } = doc;
          const props = doc[renderProps];
          const onPropsChange = doc[renderOnPropsChange];
          const sourceElement = doc[renderSourceElement];
          const listeners = doc[renderListeners];
          doc.revert();
          globalPool[path] = [];
          doc.render({
            context,
            props,
            onPropsChange,
            sourceElement,
            listeners,
            exported
          });
        });
      });
    });
  };
}

module.exports = Document;
},{"../util":"../../../node_modules/@neft/core/src/util/index.litcoffee","../assert":"../../../node_modules/@neft/core/src/assert/index.litcoffee","../event-loop":"../../../node_modules/@neft/core/src/event-loop/index.coffee","../renderer":"../../../node_modules/@neft/core/src/renderer/index.js","../log":"../../../node_modules/@neft/core/src/log/index.litcoffee","./use":"../../../node_modules/@neft/core/src/document/use.js","./log":"../../../node_modules/@neft/core/src/document/log.js","./condition":"../../../node_modules/@neft/core/src/document/condition.js","./input/text":"../../../node_modules/@neft/core/src/document/input/text.coffee","./input/prop":"../../../node_modules/@neft/core/src/document/input/prop.coffee","./script":"../../../node_modules/@neft/core/src/document/script.js","./slot":"../../../node_modules/@neft/core/src/document/slot.js","./iterator":"../../../node_modules/@neft/core/src/document/iterator.js","./style-item":"../../../node_modules/@neft/core/src/document/style-item.coffee"}],"../../../node_modules/@neft/core/src/initializer/render.js":[function(require,module,exports) {
const Renderer = require('../renderer')
const Document = require('../document')
const Element = require('../document/element')
const eventLoop = require('../event-loop')

const createWindowDocument = (Content, options) => {
  const windowElement = new Element.Tag()
  windowElement.props.set('n-component', 'Content')
  windowElement.props.set('n-style', ['__default__', 'item'])

  const windowDocument = new Document('__window__', {
    style: {
      __default__: {
        item: () => {
          const item = Renderer.Item.New({ layout: 'flow' })
          return { objects: { item }, item }
        },
      },
    },
    styleItems: [{ element: [], children: [] }],
    imports: { Content },
    uses: [[]],
    element: windowElement,
  })

  windowDocument.render(options)
  Renderer.setWindowItem(windowElement.style)

  return windowDocument
}

let windowDocument
module.exports = (documentImport, options) => {
  eventLoop.setImmediate(() => {
    Document.register('__window__', null, { dependencies: [documentImport] })
    if (windowDocument) {
      if (windowDocument.rendered) windowDocument.revert()
      windowDocument.imports.Content = documentImport
      windowDocument.render(options)
    } else {
      windowDocument = createWindowDocument(documentImport, options)
    }
  })
}

},{"../renderer":"../../../node_modules/@neft/core/src/renderer/index.js","../document":"../../../node_modules/@neft/core/src/document/index.js","../document/element":"../../../node_modules/@neft/core/src/document/element/index.coffee","../event-loop":"../../../node_modules/@neft/core/src/event-loop/index.coffee"}],"../../../node_modules/@neft/core/src/initializer/index.js":[function(require,module,exports) {
if ("") require('./runtime/android');
if ("") require('./runtime/ios');
exports.render = require('./render');
},{"./render":"../../../node_modules/@neft/core/src/initializer/render.js"}],"../../../node_modules/@neft/core/src/native/actions.js":[function(require,module,exports) {
{
  let i = -1
  exports.in = {
    EVENT: i += 1,
    SCREEN_SIZE: i += 1,
    SCREEN_ORIENTATION: i += 1,
    SCREEN_STATUSBAR_HEIGHT: i += 1,
    SCREEN_NAVIGATIONBAR_HEIGHT: i += 1,
    NAVIGATOR_LANGUAGE: i += 1,
    NAVIGATOR_ONLINE: i += 1,
    DEVICE_PIXEL_RATIO: i += 1,
    DEVICE_IS_PHONE: i += 1,
    POINTER_PRESS: i += 1,
    POINTER_RELEASE: i += 1,
    POINTER_MOVE: i += 1,
    DEVICE_KEYBOARD_SHOW: i += 1,
    DEVICE_KEYBOARD_HIDE: i += 1,
    DEVICE_KEYBOARD_HEIGHT: i += 1,
    KEY_PRESS: i += 1,
    KEY_HOLD: i += 1,
    KEY_INPUT: i += 1,
    KEY_RELEASE: i += 1,
    IMAGE_SIZE: i += 1,
    TEXT_SIZE: i += 1,
    FONT_LOAD: i += 1,
    NATIVE_ITEM_WIDTH: i += 1,
    NATIVE_ITEM_HEIGHT: i += 1,
    WINDOW_RESIZE: i += 1,
    ITEM_KEYS_FOCUS: i += 1,
  }
}

{
  let i = -1
  exports.out = {
    LOCK: i += 1,
    RELEASE_LOCK: i += 1,
    CALL_FUNCTION: i += 1,
    SET_SCREEN_STATUSBAR_COLOR: i += 1,
    DEVICE_LOG: i += 1,
    DEVICE_SHOW_KEYBOARD: i += 1,
    DEVICE_HIDE_KEYBOARD: i += 1,
    SET_WINDOW: i += 1,
    CREATE_ITEM: i += 1,
    SET_ITEM_PARENT: i += 1,
    INSERT_ITEM_BEFORE: i += 1,
    SET_ITEM_VISIBLE: i += 1,
    SET_ITEM_CLIP: i += 1,
    SET_ITEM_WIDTH: i += 1,
    SET_ITEM_HEIGHT: i += 1,
    SET_ITEM_X: i += 1,
    SET_ITEM_Y: i += 1,
    SET_ITEM_SCALE: i += 1,
    SET_ITEM_ROTATION: i += 1,
    SET_ITEM_OPACITY: i += 1,
    SET_ITEM_KEYS_FOCUS: i += 1,
    CREATE_IMAGE: i += 1,
    SET_IMAGE_SOURCE: i += 1,
    CREATE_TEXT: i += 1,
    SET_TEXT: i += 1,
    SET_TEXT_WRAP: i += 1,
    UPDATE_TEXT_CONTENT_SIZE: i += 1,
    SET_TEXT_COLOR: i += 1,
    SET_TEXT_LINE_HEIGHT: i += 1,
    SET_TEXT_FONT_FAMILY: i += 1,
    SET_TEXT_FONT_PIXEL_SIZE: i += 1,
    SET_TEXT_FONT_WORD_SPACING: i += 1,
    SET_TEXT_FONT_LETTER_SPACING: i += 1,
    SET_TEXT_ALIGNMENT_HORIZONTAL: i += 1,
    SET_TEXT_ALIGNMENT_VERTICAL: i += 1,
    CREATE_NATIVE_ITEM: i += 1,
    ON_NATIVE_ITEM_POINTER_PRESS: i += 1,
    ON_NATIVE_ITEM_POINTER_RELEASE: i += 1,
    ON_NATIVE_ITEM_POINTER_MOVE: i += 1,
    LOAD_FONT: i += 1,
    CREATE_RECTANGLE: i += 1,
    SET_RECTANGLE_COLOR: i += 1,
    SET_RECTANGLE_RADIUS: i += 1,
    SET_RECTANGLE_BORDER_COLOR: i += 1,
    SET_RECTANGLE_BORDER_WIDTH: i += 1,
  }
}

},{}],"../../../node_modules/@neft/core/src/native/event-types.js":[function(require,module,exports) {
let i = -1
module.exports = {
  EVENT_NULL_TYPE: i += 1,
  EVENT_BOOLEAN_TYPE: i += 1,
  EVENT_INTEGER_TYPE: i += 1,
  EVENT_FLOAT_TYPE: i += 1,
  EVENT_STRING_TYPE: i += 1,
}

},{}],"../../../node_modules/@neft/core/src/native/impl/browser/bridge.js":[function(require,module,exports) {
const log = require('../../../log')
const bridgeActions = require('../../actions')
const {
  EVENT_NULL_TYPE, EVENT_INTEGER_TYPE, EVENT_BOOLEAN_TYPE, EVENT_FLOAT_TYPE, EVENT_STRING_TYPE,
} = require('../../event-types')

module.exports = (bridge) => {
  const functions = {}

  const actions = []
  let actionsIndex = 0
  const booleans = []
  let booleansIndex = 0
  const integers = []
  let integersIndex = 0
  const floats = []
  let floatsIndex = 0
  const strings = []
  let stringsIndex = 0

  let readActionsIndex = 0
  let readBooleansIndex = 0
  let readIntegersIndex = 0
  let readFloatsIndex = 0
  let readStringsIndex = 0

  const startReading = () => {
    readActionsIndex = 0
    readBooleansIndex = 0
    readIntegersIndex = 0
    readFloatsIndex = 0
    readStringsIndex = 0
  }

  const readAction = () => {
    readActionsIndex += 1
    return actions[readActionsIndex - 1]
  }

  const readBoolean = () => {
    readBooleansIndex += 1
    return booleans[readBooleansIndex - 1]
  }

  const readInteger = () => {
    readIntegersIndex += 1
    return integers[readIntegersIndex - 1]
  }

  const readFloat = () => {
    readFloatsIndex += 1
    return floats[readFloatsIndex - 1]
  }

  const readString = () => {
    readStringsIndex += 1
    return strings[readStringsIndex - 1]
  }

  return {
    registerNativeFunction(name, func) {
      functions[name] = func
    },
    publishNativeEvent(name, ...args) {
      const outActions = [bridgeActions.in.EVENT]
      const outBooleans = []
      const outIntegers = [args.length]
      const outFloats = []
      const outStrings = [name]
      args.forEach((arg) => {
        if (arg == null) {
          outIntegers.push(EVENT_NULL_TYPE)
        } else if (typeof arg === 'boolean') {
          outIntegers.push(EVENT_BOOLEAN_TYPE)
          outBooleans.push(arg)
        } else if (typeof arg === 'number') {
          outIntegers.push(EVENT_FLOAT_TYPE)
          outFloats.push(arg)
        } else if (typeof arg === 'string') {
          outIntegers.push(EVENT_STRING_TYPE)
          outStrings.push(arg)
        } else {
          log.warn(`Event can be pushed with a null, boolean, number or string, but \`${arg}\` given`)
          outIntegers.push(EVENT_NULL_TYPE)
        }
      })
      bridge.onData(outActions, outBooleans, outIntegers, outFloats, outStrings)
    },
    sendData() {
      if (actionsIndex <= 0) return
      const length = actionsIndex

      actionsIndex = 0
      booleansIndex = 0
      integersIndex = 0
      floatsIndex = 0
      stringsIndex = 0

      startReading()

      for (let i = 0; i < length; i += 1) {
        const action = readAction()
        if (action === bridgeActions.out.CALL_FUNCTION) {
          const name = readString()
          const func = functions[name]
          const argsLength = readInteger()
          const args = []
          for (let j = 0; j < argsLength; j += 1) {
            const type = readInteger()
            switch (type) {
              case EVENT_NULL_TYPE:
                args.push(null)
                break
              case EVENT_BOOLEAN_TYPE:
                args.push(readBoolean())
                break
              case EVENT_INTEGER_TYPE:
                args.push(readInteger())
                break
              case EVENT_FLOAT_TYPE:
                args.push(readFloat())
                break
              case EVENT_STRING_TYPE:
                args.push(readString())
                break
              default:
            }
          }
          if (func == null) {
            log.warn(`Native function \`${name}\` not found`)
          } else {
            func(...args)
          }
        } else {
          log.warn(`Unknown event ${action} given`)
        }
      }
    },
    pushAction(val) {
      actions[actionsIndex] = val
      actionsIndex += 1
    },
    pushBoolean(val) {
      booleans[booleansIndex] = val
      booleansIndex += 1
    },
    pushInteger(val) {
      integers[integersIndex] = val
      integersIndex += 1
    },
    pushFloat(val) {
      floats[floatsIndex] = val
      floatsIndex += 1
    },
    pushString(val) {
      strings[stringsIndex] = val
      stringsIndex += 1
    },
  }
}

},{"../../../log":"../../../node_modules/@neft/core/src/log/index.litcoffee","../../actions":"../../../node_modules/@neft/core/src/native/actions.js","../../event-types":"../../../node_modules/@neft/core/src/native/event-types.js"}],"../../../node_modules/@neft/core/src/native/bridge.coffee":[function(require,module,exports) {
(function () {
  'use strict';

  var assert, eventLoop, impl, listeners, log, reader, utils;
  utils = require('../util');
  log = require('../log');
  assert = require('../assert');
  eventLoop = require('../event-loop');
  listeners = Object.create(null);
  reader = {
    booleans: null,
    booleansIndex: 0,
    integers: null,
    integersIndex: 0,
    floats: null,
    floatsIndex: 0,
    strings: null,
    stringsIndex: 0,
    getBoolean: function () {
      //<development>;
      if (this.booleansIndex >= this.booleans.length) {
        throw new Error("Index " + this.booleansIndex + " out of range for native booleans array");
      } //</development>;


      return this.booleans[this.booleansIndex++];
    },
    getInteger: function () {
      //<development>;
      if (this.integersIndex >= this.integers.length) {
        throw new Error("Index " + this.booleansIndex + " out of range for native integers array");
      } //</development>;


      return this.integers[this.integersIndex++];
    },
    getFloat: function () {
      //<development>;
      if (this.floatsIndex >= this.floats.length) {
        throw new Error("Index " + this.booleansIndex + " out of range for native floats array");
      } //</development>;


      return this.floats[this.floatsIndex++];
    },
    getString: function () {
      //<development>;
      if (this.stringsIndex >= this.strings.length) {
        throw new Error("Index " + this.booleansIndex + " out of range for native strings array");
      } //</development>;


      return this.strings[this.stringsIndex++];
    }
  };
  Object.preventExtensions(reader);

  exports.onData = function (actions, booleans, integers, floats, strings) {
    var action, error, func, i, len;
    reader.booleans = booleans;
    reader.booleansIndex = 0;
    reader.integers = integers;
    reader.integersIndex = 0;
    reader.floats = floats;
    reader.floatsIndex = 0;
    reader.strings = strings;
    reader.stringsIndex = 0;
    eventLoop.lock();

    for (i = 0, len = actions.length; i < len; i++) {
      action = actions[i];
      func = listeners[action];

      try {
        assert.isFunction(func, "unknown native action got '" + action + "'");
        func(reader);
      } catch (error1) {
        error = error1;
        log.error('Uncaught error when processing native events', error);
      }
    }

    eventLoop.release();
    exports.sendData();
  };

  exports.addActionListener = function (action, listener) {
    assert.isInteger(action);
    assert.isFunction(listener);
    assert.isNotDefined(listeners[action], "action '" + action + "' already has a listener");
    listeners[action] = listener;
  };

  exports.sendData = function () {};

  exports.pushAction = function (val) {};

  exports.pushBoolean = function (val) {};

  exports.pushInteger = function (val) {};

  exports.pushFloat = function (val) {};

  exports.pushString = function (val) {};

  exports.registerNativeFunction = function () {};

  exports.publishNativeEvent = function () {};

  exports.sendDataInLock = function () {
    return exports.sendData();
  };

  if ("") {
    impl = require('./impl/android/bridge');
  }

  if ("") {
    impl = require('./impl/ios/bridge');
  }

  if ("") {
    impl = require('./impl/macos/bridge');
  }

  if ("1") {
    impl = require('./impl/browser/bridge');
  }

  if (impl != null) {
    utils.merge(exports, impl(exports));
  } //<development>;


  exports.pushAction = function (_super) {
    return function (val) {
      assert.isInteger(val, "integer expected, but '" + val + "' given");

      _super(val);
    };
  }(exports.pushAction);

  exports.pushBoolean = function (_super) {
    return function (val) {
      assert.isBoolean(val, "boolean expected, but '" + val + "' given");

      _super(val);
    };
  }(exports.pushBoolean);

  exports.pushInteger = function (_super) {
    return function (val) {
      assert.isInteger(val, "integer expected, but '" + val + "' given");

      _super(val);
    };
  }(exports.pushInteger);

  exports.pushFloat = function (_super) {
    return function (val) {
      assert.isFloat(val, "float expected, but '" + val + "' given");

      _super(val);
    };
  }(exports.pushFloat);

  exports.pushString = function (_super) {
    return function (val) {
      assert.isString(val, "string expected, but '" + val + "' given");

      _super(val);
    };
  }(exports.pushString); //</development>;

}).call(this);
},{"../util":"../../../node_modules/@neft/core/src/util/index.litcoffee","../log":"../../../node_modules/@neft/core/src/log/index.litcoffee","../assert":"../../../node_modules/@neft/core/src/assert/index.litcoffee","../event-loop":"../../../node_modules/@neft/core/src/event-loop/index.coffee","./impl/browser/bridge":"../../../node_modules/@neft/core/src/native/impl/browser/bridge.js"}],"../../../node_modules/@neft/core/src/native/index.litcoffee":[function(require,module,exports) {
(function () {
  'use strict';

  var CALL_FUNCTION, CALL_FUNCTION_WITH_CALLBACK, EVENT_BOOLEAN_TYPE, EVENT_FLOAT_TYPE, EVENT_INTEGER_TYPE, EVENT_NULL_TYPE, EVENT_STRING_TYPE, actions, assert, bridge, eventTypes, listeners, log, pushPending, ref, sendData, utils;
  utils = require('../util');
  assert = require('../assert');
  log = require('../log');
  actions = require('./actions');
  eventTypes = require('./event-types');
  bridge = require('./bridge');
  ref = actions.out, CALL_FUNCTION = ref.CALL_FUNCTION, CALL_FUNCTION_WITH_CALLBACK = ref.CALL_FUNCTION_WITH_CALLBACK;
  EVENT_NULL_TYPE = eventTypes.EVENT_NULL_TYPE, EVENT_BOOLEAN_TYPE = eventTypes.EVENT_BOOLEAN_TYPE, EVENT_INTEGER_TYPE = eventTypes.EVENT_INTEGER_TYPE, EVENT_FLOAT_TYPE = eventTypes.EVENT_FLOAT_TYPE, EVENT_STRING_TYPE = eventTypes.EVENT_STRING_TYPE;
  listeners = Object.create(null);
  bridge.addActionListener(actions["in"].EVENT, function (args) {
    return function (reader) {
      var argsLen, arr, func, i, j, k, len, name, ref1;
      name = reader.getString();
      argsLen = reader.getInteger();

      for (i = j = 0, ref1 = argsLen; j < ref1; i = j += 1) {
        switch (reader.getInteger()) {
          case EVENT_NULL_TYPE:
            args[i] = null;
            break;

          case EVENT_BOOLEAN_TYPE:
            args[i] = reader.getBoolean();
            break;

          case EVENT_INTEGER_TYPE:
            args[i] = reader.getInteger();
            break;

          case EVENT_FLOAT_TYPE:
            args[i] = reader.getFloat();
            break;

          case EVENT_STRING_TYPE:
            args[i] = reader.getString();
            break;

          default:
            throw new Error("Unexpected native event argument type");
        }
      }

      if (arr = listeners[name]) {
        for (k = 0, len = arr.length; k < len; k++) {
          func = arr[k];
          func.apply(null, args);
        }
      } else {
        log.warn("No listeners added for the native event '" + name + "'");
      }
    };
  }([]));
  pushPending = false;

  sendData = function () {
    pushPending = false;
    bridge.sendData();
  };

  exports.callNativeFunction = function (name, arg1, arg2, arg3) {
    var arg, argsLen, i, j, ref1;
    assert.isString(name, "native.callNativeFunction name needs to be a string, but " + name + " given");
    assert.notLengthOf(name, 0, "native.callNativeFunction name cannot be an empty string");
    bridge.pushAction(CALL_FUNCTION);
    bridge.pushString(name);
    argsLen = arguments.length - 1;
    bridge.pushInteger(argsLen);

    for (i = j = 0, ref1 = argsLen; 0 <= ref1 ? j < ref1 : j > ref1; i = 0 <= ref1 ? ++j : --j) {
      arg = arguments[i + 1];

      switch (true) {
        case typeof arg === 'boolean':
          bridge.pushInteger(EVENT_BOOLEAN_TYPE);
          bridge.pushBoolean(arg);
          break;

        case typeof arg === 'string':
          bridge.pushInteger(EVENT_STRING_TYPE);
          bridge.pushString(arg);
          break;

        case utils.isInteger(arg):
          bridge.pushInteger(EVENT_INTEGER_TYPE);
          bridge.pushInteger(arg);
          break;

        case typeof arg === 'number':
          assert.isFloat(arg, "NaN can't be passed to the native function");
          bridge.pushInteger(EVENT_FLOAT_TYPE);
          bridge.pushFloat(arg);
          break;

        default:
          if (arg != null) {
            log.warn('Native function can be called with a boolean, ' + ("integer, float or a string, but '" + arg + "' given"));
          }

          bridge.pushInteger(EVENT_NULL_TYPE);
      }
    }

    if (!pushPending && "1") {
      pushPending = true;
      setImmediate(sendData);
    }
  };

  exports.callFunction = utils.deprecate(exports.callNativeFunction, 'Neft.native.callFunction is deprecated; use callNativeFunction instead');

  exports.onNativeEvent = function (name, listener) {
    var eventListeners;
    assert.isString(name, "native.onNativeEvent name needs to be a string, but " + name + " given");
    assert.notLengthOf(name, 0, "native.onNativeEvent name cannot be an empty string");
    assert.isFunction(listener, "native.onNativeEvent listener needs to be a function, but " + listener + " given");
    eventListeners = listeners[name] != null ? listeners[name] : listeners[name] = [];
    eventListeners.push(listener);
  };

  exports.on = utils.deprecate(exports.onNativeEvent, 'Neft.native.on is deprecated; use onNativeEvent instead');
  exports.registerNativeFunction = bridge.registerNativeFunction;
  exports.publishNativeEvent = bridge.publishNativeEvent;
}).call(this);
},{"../util":"../../../node_modules/@neft/core/src/util/index.litcoffee","../assert":"../../../node_modules/@neft/core/src/assert/index.litcoffee","../log":"../../../node_modules/@neft/core/src/log/index.litcoffee","./actions":"../../../node_modules/@neft/core/src/native/actions.js","./event-types":"../../../node_modules/@neft/core/src/native/event-types.js","./bridge":"../../../node_modules/@neft/core/src/native/bridge.coffee"}],"../../../node_modules/@neft/core/src/index.js":[function(require,module,exports) {
const { render } = require('./initializer')
const {
  callNativeFunction, onNativeEvent, registerNativeFunction, publishNativeEvent,
} = require('./native')
const { SignalDispatcher, SignalsEmitter } = require('./signal')
const Resources = require('./resources')
const Renderer = require('./renderer')
const log = require('./log')
const Document = require('./document')
const Element = require('./document/element')

// native
exports.callNativeFunction = callNativeFunction
exports.onNativeEvent = onNativeEvent
// exports.registerNativeFunction = registerNativeFunction
// exports.publishNativeEvent = publishNativeEvent

// utilities
exports.logger = log
exports.util = require('./util')
exports.Struct = require('./struct')
exports.ObservableArray = require('./observable-array')

// signal
exports.SignalDispatcher = SignalDispatcher
exports.SignalsEmitter = SignalsEmitter

// document
exports.Document = Document
exports.Element = Element
exports.CustomTag = Element.Tag.CustomTag

// renderer
exports.render = render
exports.Renderer = Renderer
exports.loadFont = Renderer.loadFont
exports.NativeStyleItem = Renderer.Native
exports.Device = Renderer.Device
exports.Screen = Renderer.Screen
exports.Navigator = Renderer.Navigator

// resources
exports.Resource = Resources.Resource
exports.Resources = Resources
exports.resources = new Resources()
Renderer.setResources(exports.resources)

Object.freeze(exports)

},{"./initializer":"../../../node_modules/@neft/core/src/initializer/index.js","./native":"../../../node_modules/@neft/core/src/native/index.litcoffee","./signal":"../../../node_modules/@neft/core/src/signal/index.js","./resources":"../../../node_modules/@neft/core/src/resources/index.litcoffee","./renderer":"../../../node_modules/@neft/core/src/renderer/index.js","./log":"../../../node_modules/@neft/core/src/log/index.litcoffee","./document":"../../../node_modules/@neft/core/src/document/index.js","./document/element":"../../../node_modules/@neft/core/src/document/element/index.coffee","./util":"../../../node_modules/@neft/core/src/util/index.litcoffee","./struct":"../../../node_modules/@neft/core/src/struct/index.js","./observable-array":"../../../node_modules/@neft/core/src/observable-array/index.js"}],"../../../node_modules/@neft/core/index.js":[function(require,module,exports) {
module.exports = require('./src')

},{"./src":"../../../node_modules/@neft/core/src/index.js"}],"../../../node_modules/@neft/default-styles/img-tag.js":[function(require,module,exports) {
const { CustomTag } = require('@neft/core')

class ImgTag extends CustomTag {}

ImgTag.registerAs('img')

ImgTag.defineStyleProperty({
  name: 'src',
  styleName: 'source',
})

ImgTag.defineStyleProperty({
  name: 'loaded',
})

module.exports = ImgTag

},{"@neft/core":"../../../node_modules/@neft/core/index.js"}],"../../../node_modules/@neft/default-styles/index.js":[function(require,module,exports) {
const ImgTag = require('./img-tag')

exports.ImgTag = ImgTag

},{"./img-tag":"../../../node_modules/@neft/default-styles/img-tag.js"}],"../../../node_modules/@neft/default-styles/style.nml":[function(require,module,exports) {
module.exports = (() => { const exports = {}

const { Renderer } = require('@neft/core')
const _RendererObject = Renderer.itemUtils.Object
const Class = Renderer.Class
const Device = Renderer.Device
const Navigator = Renderer.Navigator
const Screen = Renderer.Screen
const Item = Renderer.Item
const Image = Renderer.Image
exports._i0 = () => {
  const _i0 = Item.New()
  _i0._path = "../../../node_modules/@neft/default-styles/style.nml"
  _RendererObject.setOpts(_i0, {"query": 'body, div, li, pre, layer, article, aside, footer, header, hgroup, main, nav, section, ul, menu, dir, ol, li, dl, dt, dd, form, fieldset, pre', "layout": 'flow', "fillWidth": true})
  return { objects: {"_i0": _i0}, item: _i0 }
}
exports._i1 = () => {
  const _i1 = Item.New()
  _i1._path = "../../../node_modules/@neft/default-styles/style.nml"
  const _r0 = Class.New()
  _r0._path = "../../../node_modules/@neft/default-styles/style.nml"
  _RendererObject.setOpts(_i1, {"query": 'p, address, blockquote, h1, h2, h3, h4, h5, h6, h7, legend', "layout": 'flow', "fillWidth": true, "children": [_RendererObject.setOpts(_r0, {"document.query": '#text', "changes": {"fillWidth": true}})]})
  return { objects: {"_i1": _i1, "_r0": _r0}, item: _i1 }
}
exports._i2 = () => {
  const _i2 = Item.New()
  _i2._path = "../../../node_modules/@neft/default-styles/style.nml"
  const _r0 = Class.New()
  _r0._path = "../../../node_modules/@neft/default-styles/style.nml"
  _RendererObject.setOpts(_i2, {"query": 'u, strong, b, i, em, code, mark', "layout": 'flow', "children": [_RendererObject.setOpts(_r0, {"document.query": '#text', "changes": {"fillWidth": true}})]})
  return { objects: {"_i2": _i2, "_r0": _r0}, item: _i2 }
}
exports._i3 = () => {
  const _i3 = Image.New()
  _i3._path = "../../../node_modules/@neft/default-styles/style.nml"
  _RendererObject.setOpts(_i3, {"query": 'img'})
  return { objects: {"_i3": _i3}, item: _i3 }
}
exports._path = "../../../node_modules/@neft/default-styles/style.nml"
return exports })()
},{"@neft/core":"../../../node_modules/@neft/core/index.js"}],"src/index.js":[function(require,module,exports) {
"use strict";

var _core = require("@neft/core");

require("@neft/default-styles/style.nml");

/* global window */
// for browser we put app inside an iframe
if ("1") {
  window.onmessage = function (event) {
    try {
      // eslint-disable-next-line no-new-func
      var body = new Function('module', 'require', event.data);
      var bodyModule = {
        exports: {}
      };
      body(bodyModule, require);
      (0, _core.render)(bodyModule.exports);
    } catch (error) {// NOP
    }
  };
}
},{"@neft/core":"../../../node_modules/@neft/core/index.js","@neft/default-styles/style.nml":"../../../node_modules/@neft/default-styles/style.nml"}],".neft-entry.js":[function(require,module,exports) {
require('core-js/stable');

require('regenerator-runtime/runtime');

require('@neft/default-styles');

var _require = require('@neft/core'),
    Resources = _require.Resources,
    resources = _require.resources;

Resources.fromJSON({
  "__name__": "Resources"
}, resources);
module.exports = require('./');
},{"core-js/stable":"../../../node_modules/core-js/stable/index.js","regenerator-runtime/runtime":"../../../node_modules/regenerator-runtime/runtime.js","@neft/default-styles":"../../../node_modules/@neft/default-styles/index.js","@neft/core":"../../../node_modules/@neft/core/index.js","./":"src/index.js"}]},{},[".neft-entry.js"], null)
//# sourceMappingURL=/bundle.js.map