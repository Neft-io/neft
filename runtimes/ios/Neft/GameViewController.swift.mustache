import UIKit

public extension CGFloat {
    /**
     Returns a random floating point number between 0.0 and 1.0, inclusive.
     */
    public static func random() -> CGFloat {
        return CGFloat(Float(arc4random()) / 0xFFFFFFFF)
    }
}

extension String {
    var uppercaseFirst: String {
        return String(characters.prefix(1)).uppercased() + String(characters.dropFirst())
    }
}

struct Extension {
    {{#iosExtensions}}
    struct {{&name}} {}
    {{/iosExtensions}}
}

class GameViewController: UIViewController {
    let client = Client()
    let renderer = Renderer()
    var shadowWindow: ShadowWindow!
    var renderView: RenderView!
    var window: Window!
    var customApp: CustomApp!
    var frameDelay: Double = 0
    var frameTime: Double = 0

    class Window: UIView {
        var app: GameViewController!
        var windowItem: Item?
        let background = CAShapeLayer()

        override func didMoveToSuperview() {
            background.fillColor = UIColor.white.cgColor
            background.path = CGPath(rect: CGRect(x: 0, y: 0, width: frame.width, height: frame.height), transform: nil)
        }

        override func draw(_ rect: CGRect) {
            let context = UIGraphicsGetCurrentContext()!
            background.render(in: context)
            windowItem?.draw(context, inRect: rect)

            // DEBUG dirty rectangles
            // CGContextSetRGBFillColor(context, CGFloat.random(), CGFloat.random(), CGFloat.random(), 0.3);
            // CGContextFillRect(context, rect);
        }
    }

    class RenderView: UIView {
        var app: GameViewController!

        override func draw(_ rect: CGRect) {
            let time = CACurrentMediaTime()
            app.frameDelay = (time - app.frameTime) * 1000;
            app.frameTime = time
            app.renderer.draw()
        }
    }

    class ShadowWindow: UIView {
        override func draw(_ rect: CGRect) {
        }
    }

    @objc private func animationFrame() {
        client.js.callAnimationFrame()
        renderView.setNeedsDisplay()
    }

    override func viewDidLoad() {
        renderer.app = self

        (UIApplication.shared as! NeftApplication).renderer = renderer

        client.actions[InAction.setWindow] = {
            (reader: Reader) in
            self.window.windowItem = self.renderer.getObjectFromReader(reader) as? Item
            self.window.setNeedsDisplay()
        }

        // animation frame
        renderView = RenderView(frame: CGRect(x: 0, y: 0, width: 1, height: 1))
        renderView.app = self
        renderView.isUserInteractionEnabled = false
        view.addSubview(renderView)

        // animation frame
        let updater = CADisplayLink(target: self, selector: #selector(GameViewController.animationFrame))
        updater.frameInterval = 1
        updater.add(to: RunLoop.current, forMode: RunLoopMode.commonModes)

        // shadow window
        self.shadowWindow = ShadowWindow(frame: CGRect(x: 0, y: 0, width: view.frame.width, height: view.frame.height))
        view.addSubview(shadowWindow)

        // window
        self.window = Window(frame: shadowWindow.frame)
        window.app = self
        window.isUserInteractionEnabled = false
        view.addSubview(self.window)

        super.viewDidLoad()

        self.customApp = CustomApp(app: self)
        {{#iosExtensions}}
        Extension.{{&name}}.register(app: self)
        {{/iosExtensions}}

        self.renderer.load()
        self.client.js.runScript("neft")
    }

    override var shouldAutorotate : Bool {
        return false
    }

    override var supportedInterfaceOrientations : UIInterfaceOrientationMask {
        if UIDevice.current.userInterfaceIdiom == .phone {
            return .allButUpsideDown
        } else {
            return .all
        }
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
    }

    override var prefersStatusBarHidden : Bool {
        return false
    }
}
